<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ritchie – Overview</title>
    <link>https://zupit.github.io/docs-ritchie/docs/</link>
    <description>Recent content in Overview on Ritchie</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://zupit.github.io/docs-ritchie/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Overview</title>
      <link>https://zupit.github.io/docs-ritchie/docs/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/overview/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;what-is-ritchie&#34;&gt;What is Ritchie?&lt;/h2&gt;
&lt;p&gt;Ritchie is an &lt;strong&gt;open source framework&lt;/strong&gt; that allows you to create, store and share any kind of automations, executing them through command lines, to run operations or start workflows.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/PtKFco2pIqs&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;versioning&#34;&gt;&lt;strong&gt;Versioning&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Currently, Ritchie has &lt;strong&gt;two available versions&lt;/strong&gt;. On this documentation, we&amp;rsquo;ll focus on &lt;strong&gt;Ritchie&lt;/strong&gt; &lt;strong&gt;version 2.0.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;whats-new&#34;&gt;&lt;strong&gt;What&amp;rsquo;s new?&lt;/strong&gt;&lt;/h3&gt;
&lt;h2 id=&#34;how-does-ritchie-work--through-formulas&#34;&gt;&lt;strong&gt;How does Ritchie work? → Through Formulas!&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In Ritchie&amp;rsquo;s context, &lt;strong&gt;a formula is a script&lt;/strong&gt; that can be executed automatically or interactively through a command line.&lt;/p&gt;
&lt;p&gt;Adapting an existing script to Ritchie structure allows you to run it &lt;strong&gt;locally&lt;/strong&gt; or through &lt;strong&gt;Docker&lt;/strong&gt;, and to share it on a &lt;strong&gt;Github&lt;/strong&gt; or &lt;strong&gt;Gitlab&lt;/strong&gt; repository.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/formula-ritchie-en.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Key Concepts</title>
      <link>https://zupit.github.io/docs-ritchie/docs/key-concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/key-concepts/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;formulas&#34;&gt;Formulas&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Formulas&lt;/strong&gt; are nothing more than &lt;strong&gt;automations&lt;/strong&gt;. That is, they are codes called through command lines to perform some operation.&lt;/p&gt;
&lt;h2 id=&#34;formulas-execution&#34;&gt;&lt;strong&gt;Formulas execution&lt;/strong&gt;&lt;/h2&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

Formulas are executed after running command lines on the terminal.
&lt;/div&gt;

&lt;p&gt;Depending on the formula, the user might need to inform input parameters.&lt;/p&gt;
&lt;p&gt;Those input parameters can be informed in different ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;After running the command on the terminal (via &lt;strong&gt;prompt&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;When typing the command on the terminal (via &lt;strong&gt;stdin&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;During the execution of the formula (if coded using &lt;strong&gt;prompt&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/start-end-ritchie%20%281%29.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;command-tree&#34;&gt;Command Tree&lt;/h2&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;Commands used in Ritchie are grouped according to a &lt;strong&gt;tree&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It is important to know this concept in order to actually understand the structure of the product.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;In the case of Ritchie, the &lt;strong&gt;Cobra&lt;/strong&gt; (a Golang library) pattern was followed using the following logic of building core commands:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;RIT + VERB + NOUN&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To allow more options and freedom for users, it is also allowed to follow the pattern below in the construction of formula commands:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;RIT + GROUP + VERB + NOUN&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The app name is Ritchie, so we use the name &lt;strong&gt;&lt;code&gt;rit&lt;/code&gt;&lt;/strong&gt; to start our command tree.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/arvore-rit%20%281%29.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;The &lt;strong&gt;rit&lt;/strong&gt; command is therefore our parent command, or &lt;strong&gt;root&lt;/strong&gt;. It is not executable (it means that it will not start any operations if you use it alone in the terminal), but has been configured to return the &lt;strong&gt;helper command&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It is necessary to use executable sub-commands (which are child commands, or branches, of the rit command) in order to start any process.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;The executable commands in Ritchie are the commands located at the last level of the tree.&lt;/p&gt;
&lt;p&gt;For example, in the image above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;rit set context&lt;/strong&gt; command is executable, as it is at the last level of the tree.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;rit kafka create&lt;/strong&gt; command is not executable as there is an executable &lt;strong&gt;topic&lt;/strong&gt; subcommand, at the last level of the tree.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This command tree concept is the &lt;strong&gt;core&lt;/strong&gt; of Ritchie&amp;rsquo;s structure.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

All commands and sub-commands are mapped in a tree dynamically created according to the repositories the user added locally on his computer by using the &lt;strong&gt;&lt;code&gt;rit add repo&lt;/code&gt;&lt;/strong&gt; command.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Ritchie V1.0 ➡ V2.0</title>
      <link>https://zupit.github.io/docs-ritchie/docs/ritchie-v1.0-v2.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/ritchie-v1.0-v2.0/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;differences-between-version-10-and-20&#34;&gt;&lt;strong&gt;Differences between version 1.0 and 2.0&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ritchie versions &lt;strong&gt;Single&lt;/strong&gt; and &lt;strong&gt;Team&lt;/strong&gt; are deprecated.  &lt;em&gt;Check the observation below if you still want to use the previous version.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The command tree will be dynamically generated on the added repositories.  &lt;em&gt;So, it won&amp;rsquo;t be necessary to edit formula&amp;rsquo;s repositories tree.json files anymore.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;There isn&amp;rsquo;t a cloud storage anymore.  &lt;em&gt;The user can import formulas repositories from Github or Gitlab.&lt;/em&gt; (&lt;strong&gt;&lt;code&gt;rit add repo&lt;/code&gt;&lt;/strong&gt;) __&lt;/li&gt;
&lt;li&gt;Autocomplete support for 2 new shells: &lt;strong&gt;Fish&lt;/strong&gt; and &lt;strong&gt;Powershell&lt;/strong&gt;. (&lt;strong&gt;&lt;code&gt;rit completion fish&lt;/code&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;code&gt;rit completion powershell&lt;/code&gt;&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Support to run formula in a container. (&lt;strong&gt;&lt;code&gt;--docker flag&lt;/code&gt;&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Support to build formulas on Windows OS.&lt;/li&gt;
&lt;li&gt;New tutorial to the CLI.&lt;/li&gt;
&lt;li&gt;Structural upgrades.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-danger&#34; role=&#34;alert&#34;&gt;

Version 2.0 &lt;strong&gt;doesn&amp;rsquo;t support Vault to share credentials&lt;/strong&gt;.&lt;br&gt;
Therefore, if you want to keep using those features, you have to stay on the &lt;strong&gt;1.0 version.&lt;/strong&gt;
&lt;/div&gt;

&lt;h2 id=&#34;how-to-migrate-formulas-from-v10-to-v20-&#34;&gt;How to migrate formulas from V1.0 to V2.0 ?&lt;/h2&gt;
&lt;h3 id=&#34;context&#34;&gt;Context&lt;/h3&gt;
&lt;p&gt;If you use Ritchie 1.0 version and want to upgrade to the 2.0 one, &lt;strong&gt;you have to update your formula&amp;rsquo;s repository structure&lt;/strong&gt; to be compatible to the pattern used on the new version.&lt;/p&gt;
&lt;h3 id=&#34;how-to-migrate&#34;&gt;How to migrate?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Create  new formula repo from scratch using the &lt;strong&gt;&lt;code&gt;rit create formula&lt;/code&gt;&lt;/strong&gt; command.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adding the same formulas paths used on the older repository to the new one.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Export your formulas implementations from the older repository to the new one.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The structure still uses the same files: &lt;strong&gt;&lt;code&gt;config.json&lt;/code&gt;&lt;/strong&gt; , &lt;strong&gt;&lt;code&gt;main.*&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;formula.*&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Copy these files codes from the old structure to the new one, respecting the new layout.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Publish the new formula repository on &lt;strong&gt;github&lt;/strong&gt; or &lt;strong&gt;gitlab&lt;/strong&gt; (also, it can &lt;strong&gt;public&lt;/strong&gt; or &lt;strong&gt;private&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: Generate a release of the formula repository.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;: Add the formula repository on Ritchie using the &lt;strong&gt;&lt;code&gt;rit add repo&lt;/code&gt;&lt;/strong&gt; command.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt;: Share your formula&amp;rsquo;s repository with your team, colleagues or the community.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

If you have any question, feel free to contact our team at &lt;strong&gt;&lt;a href=&#34;mailto:ritchie@zup.com.br&#34;&gt;ritchie@zup.com.br&lt;/a&gt;&lt;/strong&gt; or by opening an issue on the &lt;a href=&#34;https://github.com/ZupIT/ritchie-formulas&#34;&gt;&lt;strong&gt;ritchie-formulas repository&lt;/strong&gt;&lt;/a&gt;.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Quick start guide</title>
      <link>https://zupit.github.io/docs-ritchie/docs/quick-start-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/quick-start-guide/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;To use Ritchie, you must follow these &lt;strong&gt;3 steps&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Installation&lt;/li&gt;
&lt;li&gt;Initialization&lt;/li&gt;
&lt;li&gt;Running a test formula&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;1-installation&#34;&gt;&lt;strong&gt;1. Installation&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;First things first: you must install Ritchie according to your operational system. See the links below, you can choose the path that better helps you out.&lt;/p&gt;
&lt;h3 id=&#34;2-initialization&#34;&gt;&lt;strong&gt;2. Initialization&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Once you finished Ritchie&amp;rsquo;s installation, it is necessary to initialize it. To do so,  check out more on the following  page.&lt;/p&gt;
&lt;h3 id=&#34;3-running-a-test-formula&#34;&gt;&lt;strong&gt;3. Running a test formula&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Last (but not least), run a &amp;ldquo;hello-world&amp;rdquo; on Ritchie to confirm if your installation went well. Check out more on the following page.&lt;/p&gt;


&lt;div class=&#34;alert alert-success&#34; role=&#34;alert&#34;&gt;

Well done, you&amp;rsquo;re ready to use Ritchie on your projects!
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Linux</title>
      <link>https://zupit.github.io/docs-ritchie/docs/getting-started/install-cli/linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/getting-started/install-cli/linux/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;step-1-requirements&#34;&gt;Step 1: Requirements&lt;/h2&gt;
&lt;p&gt;If you want to efficiently use Ritchie on Linux with version &lt;strong&gt;&lt;code&gt;2.0.5 and earlier&lt;/code&gt;&lt;/strong&gt;, we recommend to install the following element configured:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;make&lt;/strong&gt; command&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you have it, just run the command below at your terminal.&lt;/p&gt;
&lt;h2 id=&#34;step-2-installing-command&#34;&gt;Step 2: Installing command&lt;/h2&gt;
&lt;p&gt;Copy and paste the command below to run on your terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;curl -fsSL https://commons-repo.ritchiecli.io/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

If you prefer, you also can follow with the&lt;a href=&#34;manual-installation.md&#34;&gt; &lt;strong&gt;manual installation&lt;/strong&gt;.&lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&#34;step-3-verify-installation&#34;&gt;Step 3: Verify installation&lt;/h2&gt;
&lt;p&gt;You can confirm if your installation went well by running this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;rit --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If everything&amp;rsquo;s configured, the terminal will return Ritchie&amp;rsquo;s current version.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Macos</title>
      <link>https://zupit.github.io/docs-ritchie/docs/getting-started/install-cli/macos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/getting-started/install-cli/macos/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;To install the &lt;strong&gt;latest version of Ritchie&lt;/strong&gt; for MacOS, you just have to run the command below on your terminal. However, it is important to keep in mind &lt;strong&gt;there are some requirements&lt;/strong&gt; before starting the installation on MacOS.&lt;/p&gt;
&lt;h2 id=&#34;step-1-requirements&#34;&gt;Step 1: Requirements&lt;/h2&gt;
&lt;p&gt;To use Ritchie on MacOs with version &lt;strong&gt;&lt;code&gt;2.0.5 and earlier&lt;/code&gt;&lt;/strong&gt;, we recommend to install the following elements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;make&lt;/strong&gt; command (&lt;a href=&#34;https://stackoverflow.com/questions/1469994/using-make-on-os-x&#34;&gt;&lt;strong&gt;Using &amp;ldquo;make&amp;rdquo; on macOS&lt;/strong&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;md5sum&lt;/strong&gt; tools&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;To install &lt;strong&gt;md5sum&lt;/strong&gt; with &lt;em&gt;&lt;strong&gt;Homebrew&lt;/strong&gt;&lt;/em&gt; , use: &lt;code&gt;brew install md5sha1sum&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To install &lt;strong&gt;md5sum&lt;/strong&gt; with &lt;em&gt;&lt;strong&gt;MacPorts&lt;/strong&gt;&lt;/em&gt; , use: &lt;code&gt;sudo port install md5sha1sum&lt;/code&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&#34;step-2-installing-command&#34;&gt;Step 2: Installing command&lt;/h2&gt;
&lt;h3 id=&#34;first-option&#34;&gt;First option&lt;/h3&gt;
&lt;p&gt;The command used to install Ritchie at your terminal is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;curl -fsSL https://commons-repo.ritchiecli.io/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

If you prefer, you also can follow with the&lt;a href=&#34;manual-installation.md&#34;&gt; &lt;strong&gt;manual installation&lt;/strong&gt;.&lt;/a&gt;
&lt;/div&gt;

&lt;h3 id=&#34;second-option&#34;&gt;Second option&lt;/h3&gt;
&lt;p&gt;You can also &lt;strong&gt;download the Ritchie CLI package&lt;/strong&gt; through the command line below, to &lt;strong&gt;install it manually.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;curl --output ~/Desktop/Ritchie-CLI-macos-installer-x64.pkg --location https://commons-repo.ritchiecli.io/latest/Ritchie-CLI-macos-installer-x64.pkg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;step-3-verify-installation&#34;&gt;Step 3: Verify installation&lt;/h2&gt;
&lt;p&gt;You can confirm if your installation went well by running this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;rit --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If everything&amp;rsquo;s configured, the terminal will return Ritchie&amp;rsquo;s current version.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Windows</title>
      <link>https://zupit.github.io/docs-ritchie/docs/getting-started/install-cli/windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/getting-started/install-cli/windows/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;To install &lt;strong&gt;the latest version of Ritchie&lt;/strong&gt; on Windows, you have to download Ritchie&amp;rsquo;s installer and run it on your terminal.&lt;/p&gt;
&lt;h2 id=&#34;step-1-installation&#34;&gt;Step 1: Installation&lt;/h2&gt;
&lt;p&gt;You must &lt;a href=&#34;https://commons-repo.ritchiecli.io/latest/ritchiecli.msi&#34;&gt;&lt;strong&gt;download Ritchie&amp;rsquo;s installer&lt;/strong&gt;&lt;/a&gt; to make this configuration. Once you made it, follow the instructions on your terminal.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

If you prefer, you also can proceed with the&lt;a href=&#34;manual-installation.md&#34;&gt; &lt;strong&gt;manual installation&lt;/strong&gt;.&lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&#34;step-2-verify-installation&#34;&gt;Step 2: Verify installation&lt;/h2&gt;
&lt;p&gt;You can confirm if your installation went well by running this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;rit --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If everything&amp;rsquo;s configured, the terminal will return Ritchie&amp;rsquo;s current version.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Manual Installation</title>
      <link>https://zupit.github.io/docs-ritchie/docs/getting-started/install-cli/manual-installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/getting-started/install-cli/manual-installation/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;If you choose to make the manual process of Ritchie&amp;rsquo;s installation, you have to follow the guideline: &lt;strong&gt;get the latest Ritchie&amp;rsquo;s version and inform the URL below on your navigator.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The link:&lt;/strong&gt; &lt;a href=&#34;https://commons-repo.ritchiecli.io/stable.txt&#34;&gt;&lt;strong&gt;https://commons-repo.ritchiecli.io/stable.txt&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;​&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically, when you indicate the URL above on your navigator, the system returns the latest version of Ritchie. For example, it can return &lt;strong&gt;1.0.1 or 2.0.1&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-to-install&#34;&gt;How to install?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Download the Ritchie binary version;&lt;/li&gt;
&lt;li&gt;Enter the URL below in your browser by informing &lt;strong&gt;the version&lt;/strong&gt; &lt;strong&gt;{VERSION}&lt;/strong&gt; as obtained in step 1.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;installation-for-macos-a-idinstallation-for-maca&#34;&gt;&lt;strong&gt;Installation for MacOS&lt;/strong&gt; &lt;a id=&#34;installation-for-mac&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;https://commons-repo.ritchiecli.io/{VERSION}/darwin/rit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;installation-for-linux-a-idinstallation-for-linuxa&#34;&gt;&lt;strong&gt;Installation for Linux&lt;/strong&gt; &lt;a id=&#34;installation-for-linux&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;https://commons-repo.ritchiecli.io/{VERSION}/linux/rit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;installation-for-windows--a-idinstallation-for-windowsa&#34;&gt;&lt;strong&gt;Installation for Windows&lt;/strong&gt;  &lt;a id=&#34;installation-for-windows&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;https://commons-repo.ritchiecli.io/{VERSION}/windows/rit.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;manual-settings--a-idmanual-settingsa&#34;&gt;&lt;strong&gt;Manual settings&lt;/strong&gt;  &lt;a id=&#34;manual-settings&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;how-to-create-a-folder-a-idfolder-creationa&#34;&gt;&lt;strong&gt;How to create a folder?&lt;/strong&gt; &lt;a id=&#34;folder-creation&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;First, run the command below to create a folder &lt;code&gt;$HOME/.rit/bin&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;mkdir -p $HOME/.rit/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;2. Then, copy and paste the binary to the folder above.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;​cd $HOME/.rit/bin 
cp $HOME/Downloads/rit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Lastly, run a permission to run:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;chmod +x rit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;how-to-configure-the-bashrc-ou-etcprofile-or-zshrc-linux--macos-a-idconfigure-the-bashrc-ou-etc-profile-or-zshrc-linux-macosa&#34;&gt;&lt;strong&gt;How to configure the .bashrc ou /etc/profile or .zshrc (Linux / MacOS)&lt;/strong&gt; &lt;a id=&#34;configure-the-bashrc-ou-etc-profile-or-zshrc-linux-macos&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To ZSH, define a new PATH by copying the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;export RIT_PATH=$HOME/.rit
PATH=$RIT_PATH/bin:$PATH
rit completion zsh &amp;gt; ~/.rit_completion
source ~/.rit_completion
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To Bash, define a new PATH by copying the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;export RIT_PATH=$HOME/.rit
PATH=$RIT_PATH/bin:$PATH
rit completion bash &amp;gt; ~/.rit_completion
source ~/.rit_completion​
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;setting-environment-variables-windows-a-idsetting-environment-variables-windowsa&#34;&gt;Setting environment variables (Windows) &lt;a id=&#34;setting-environment-variables-windows&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For this operating system, you need to call rit on the terminal directly from rit.exe (&lt;strong&gt;rit.exe login&lt;/strong&gt; command for example)&lt;/p&gt;
&lt;p&gt;It is possible (and suggested) to create an environment variable for rit to facilitate the use of the CLI.&lt;/p&gt;
&lt;p&gt;Here are some articles explaining how to add an environment variable in Windows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adding &lt;a href=&#34;https://professor-falken.com/pt/windows/como-configurar-la-ruta-y-las-variables-de-entorno-en-windows-10/&#34;&gt;&lt;strong&gt;through interface&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adding&lt;a href=&#34;https://devcontent.com.br/artigos/windows/o-que-sao-como-alterar-criar-excluir-variaveis-de-ambiente&#34;&gt; &lt;strong&gt;through terminal&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Initialize Cli</title>
      <link>https://zupit.github.io/docs-ritchie/docs/getting-started/initialize-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/getting-started/initialize-cli/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;step-1-initialization&#34;&gt;Step 1: Initialization&lt;/h2&gt;
&lt;p&gt;Run the following command to initialize Ritchie:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;rit init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command will ask the user three questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If he &lt;strong&gt;wants to contribute anonymously&lt;/strong&gt; to Ritchie metrics.&lt;/li&gt;
&lt;li&gt;If he &lt;strong&gt;wants to add the community&lt;/strong&gt; formulas locally.&lt;/li&gt;
&lt;li&gt;If he &lt;strong&gt;wants the default&lt;/strong&gt; &lt;a href=&#34;../tutorials/formulas/how-to-run-formulas/&#34;&gt;&lt;strong&gt;formula execution method&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;to be local or through docker.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/rit-init%20%283%29.gif&#34; alt=&#34;rit init command&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then, the command execution will create all the necessary configuration&amp;rsquo;s files.&lt;/p&gt;
&lt;h2 id=&#34;step-2-verify-initialization&#34;&gt;Step 2: Verify Initialization&lt;/h2&gt;
&lt;h3 id=&#34;1-commons-repository&#34;&gt;1. Commons repository&lt;/h3&gt;
&lt;p&gt;If you added the community formulas repository, you can check it by using the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;rit list repo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command will return all formulas repositories the user has access locally.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/large-gif-1448x466-.gif&#34; alt=&#34;rit list repo command&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-ritchie-folder&#34;&gt;2. Ritchie folder&lt;/h3&gt;
&lt;p&gt;You can then check the &lt;strong&gt;&lt;code&gt;.rit&lt;/code&gt;&lt;/strong&gt; folder has been created on your &lt;strong&gt;&lt;code&gt;$HOME&lt;/code&gt;&lt;/strong&gt; directory.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

All operations done using Ritchie will be saved in this &lt;strong&gt;.rit&lt;/strong&gt; &lt;strong&gt;folder&lt;/strong&gt; (credentials, repos, metrics&amp;hellip;)
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: hello World formula</title>
      <link>https://zupit.github.io/docs-ritchie/docs/tutorials/formulas/how-to-run-formulas/hello-world-formula/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/tutorials/formulas/how-to-run-formulas/hello-world-formula/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;hello-world&#34;&gt;Hello World&lt;/h2&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

&lt;strong&gt;Premisse&lt;/strong&gt;: After you finished the previous steps -&lt;a href=&#34;../../../getting-started/installation/&#34;&gt;&lt;strong&gt;installation&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;../../../getting-started/initialization.md&#34;&gt;&lt;strong&gt;initialization&lt;/strong&gt;&lt;/a&gt; - to access the &lt;a href=&#34;https://github.com/ZupIT/ritchie-formulas/tree/master/demo/hello-world&#34;&gt;&lt;strong&gt;hello-world formula&lt;/strong&gt;&lt;/a&gt; to test Ritchie, you&amp;rsquo;ll need to add the &lt;a href=&#34;https://github.com/ZupIT/ritchie-formulas-demo&#34;&gt;&lt;strong&gt;ritchie-formulas-demo&lt;/strong&gt;&lt;/a&gt; repository &lt;strong&gt;&lt;code&gt;locally&lt;/code&gt;&lt;/strong&gt;.
&lt;/div&gt;

&lt;p&gt;To do so, you can use the &lt;strong&gt;&lt;code&gt;rit add repo&lt;/code&gt;&lt;/strong&gt; command, or execute the command line below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;provider&amp;#34;:&amp;#34;Github&amp;#34;, &amp;#34;name&amp;#34;:&amp;#34;demo&amp;#34;, &amp;#34;version&amp;#34;:&amp;#34;2.2.0&amp;#34;, &amp;#34;url&amp;#34;:&amp;#34;https://github.com/ZupIT/ritchie-formulas-demo&amp;#34;, &amp;#34;token&amp;#34;: null, &amp;#34;priority&amp;#34;:1}&amp;#39; | rit add repo --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

You can also check which repositories you&amp;rsquo;re using with the**&lt;code&gt;rit list repo&lt;/code&gt;** command.
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Now that you have added the &lt;code&gt;demo&lt;/code&gt; repository and check the details of the formula, you can execute this tutorial commands.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;premisse-check-the-formulas-details&#34;&gt;&lt;strong&gt;Premisse: Check the formula&amp;rsquo;s details&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;To get details about a formula, you can execute the command using with the &lt;code&gt;--help&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;rit demo hello-world --help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It will return all the flags available for the command execution.&lt;/p&gt;
&lt;h4 id=&#34;on-ritchie-you-have-6-possibilities-to-run-a-formula-through-those-flags&#34;&gt;On Ritchie, you have 6 possibilities to run a formula through those flags:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Using Prompt&lt;/li&gt;
&lt;li&gt;Using Prompt and Docker&lt;/li&gt;
&lt;li&gt;Using Input Flags&lt;/li&gt;
&lt;li&gt;Using Input Flags and Docker&lt;/li&gt;
&lt;li&gt;Using Stdin&lt;/li&gt;
&lt;li&gt;Using Stdin and Docker&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To do so, type the following commands lines:&lt;/p&gt;
&lt;h3 id=&#34;case-1-with-prompt&#34;&gt;Case 1: With Prompt&lt;/h3&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

As &lt;strong&gt;this formula has been coded using Golang&lt;/strong&gt;, it is necessary to have &lt;strong&gt;Golang&lt;/strong&gt; installed on your computer to run it &lt;strong&gt;locally&lt;/strong&gt;.
&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;rit demo hello-world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Select an option for each input parameter and see how the magic works:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/large-gif-1054x366-%20%281%29.gif&#34; alt=&#34;rit demo hello-world&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is the default command line execution, that runs the formula locally using &lt;strong&gt;prompt&lt;/strong&gt; to inform the input parameters.&lt;/p&gt;
&lt;h3 id=&#34;case-2-with-prompt-and-docker&#34;&gt;Case 2: With Prompt and Docker&lt;/h3&gt;
&lt;p&gt;You can run the same command using the &lt;strong&gt;&amp;ndash;docker&lt;/strong&gt; flag to execute it remotely (on a container), but still using &lt;strong&gt;prompt&lt;/strong&gt; to inform the inputs parameters:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;rit demo hello-world --docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

&lt;strong&gt;Docker&lt;/strong&gt; needs to be installed and running on your computer for this flag to work.&lt;br&gt;
In that case, you won&amp;rsquo;t need to have &lt;strong&gt;Golang&lt;/strong&gt; installed.
&lt;/div&gt;

&lt;h3 id=&#34;case-3-with-input-flags&#34;&gt;Case 3: With Input Flags&lt;/h3&gt;
&lt;p&gt;You can also run the command informing the inputs through flags (you can know which flags are available using the &lt;strong&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/strong&gt; flag when executing a command). This way, inputs parameters are informed directly with the command line.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rit demo hello-world --rit_input_text=Dennis --rit_input_boolean=true --rit_input_list=everything --rit_input_password=Ritchie
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;case-4-with-input-flags-and-docker&#34;&gt;Case 4: With Input flags and Docker&lt;/h3&gt;
&lt;p&gt;When you combine both &lt;strong&gt;&lt;code&gt;input flags&lt;/code&gt;&lt;/strong&gt; and the &lt;strong&gt;&lt;code&gt;--docker&lt;/code&gt;&lt;/strong&gt; flag, it is possible to run a command remotely (on a container) with the input parameters directly informed on the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;rit demo hello-world --rit_input_text=Dennis --rit_input_boolean=true --rit_input_list=everything --rit_input_password=Ritchie --docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;case-5-with-stdin&#34;&gt;Case 5: With Stdin&lt;/h3&gt;
&lt;p&gt;You can also run the command with the &lt;strong&gt;&amp;ndash;stdin&lt;/strong&gt; (Standard input) flag. This way, inputs parameters are also informed directly with the command line.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &#39;{&amp;quot;rit_input_text&amp;quot;:&amp;quot;Dennis&amp;quot;, &amp;quot;rit_input_boolean&amp;quot;:&amp;quot;true&amp;quot;, &amp;quot;rit_input_list&amp;quot;:&amp;quot;everything&amp;quot;, &amp;quot;rit_input_password&amp;quot;:&amp;quot;Ritchie&amp;quot;}&#39; | rit demo hello-world --stdinRitchie uses the json format to execute STDIN commands
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

Ritchie uses the &lt;strong&gt;JSON&lt;/strong&gt; format to execute STDIN commands
&lt;/div&gt;

&lt;h3 id=&#34;case-6-with-stdin-and-docker&#34;&gt;Case 6: With Stdin and Docker&lt;/h3&gt;
&lt;p&gt;When you combine both &lt;strong&gt;&amp;ndash;stdin&lt;/strong&gt; and &lt;strong&gt;&amp;ndash;docker&lt;/strong&gt; flags, it is also possible to run a command remotely (on a container) with the input parameters directly informed on the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;rit_input_text&amp;#34;:&amp;#34;Dennis&amp;#34;, &amp;#34;rit_input_boolean&amp;#34;:&amp;#34;true&amp;#34;, &amp;#34;rit_input_list&amp;#34;:&amp;#34;everything&amp;#34;, &amp;#34;rit_input_password&amp;#34;:&amp;#34;Ritchie&amp;#34;}&amp;#39; | rit demo hello-world --stdin --docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;Take a look at the formulas repositories (ex: &lt;a href=&#34;https://github.com/ZupIT/ritchie-formulas&#34;&gt;&lt;strong&gt;ritchie-formulas&lt;/strong&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Most of the community formulas are composed of a &lt;a href=&#34;https://github.com/ZupIT/ritchie-formulas/tree/master/demo/hello-world&#34;&gt;&lt;strong&gt;README file&lt;/strong&gt;&lt;/a&gt; explaining what the command does and how to run it.&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;In this section, you saw how to run formulas on Ritchie. To keep learning:&lt;/p&gt;
&lt;p&gt;👉Check which formulas you can run using the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;rit --help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;👉See &lt;a href=&#34;../how-to-create-formulas.md&#34;&gt;&lt;strong&gt;how to create new formulas&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: How to create formulas</title>
      <link>https://zupit.github.io/docs-ritchie/docs/tutorials/formulas/how-to-create-formulas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/tutorials/formulas/how-to-create-formulas/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;how-to-create&#34;&gt;How to create?&lt;/h2&gt;
&lt;h3 id=&#34;step-1-run-the-formula-creation-command&#34;&gt;Step 1: Run the formula creation command&lt;/h3&gt;
&lt;p&gt;Run the following command to create a formula:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;rit create formula
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, you&amp;rsquo;ll have to inform those inputs before running the formula:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;strong&gt;command&lt;/strong&gt; (following the &lt;strong&gt;pattern &lt;code&gt;rit + group + verb + noun&lt;/code&gt;&lt;/strong&gt; to respect the &lt;a href=&#34;https://docs.ritchiecli.io/key-concepts#command-tree&#34;&gt;&lt;strong&gt;tree pattern&lt;/strong&gt;&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;The formula&amp;rsquo;s &lt;strong&gt;programming language&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The path&lt;/strong&gt; used to save formula&amp;rsquo;s files.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;rit demo create formula&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/rit-create-formula-3.gif&#34; alt=&#34;Example of running rit create formula command&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-2-test-your-formula&#34;&gt;&lt;strong&gt;Step 2: Test your formula&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;You can test the formula directly after its creation. That&amp;rsquo;s possible because the &lt;strong&gt;&lt;code&gt;rit create formula&lt;/code&gt;&lt;/strong&gt; command also builds the formula automatically (it generates the formula&amp;rsquo;s executable files and add them on &lt;strong&gt;.rit folder&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;In that case, the formula &lt;strong&gt;&amp;ldquo;Hello World&amp;rdquo; template&lt;/strong&gt; will be executed as shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/large-gif-1054x366-.gif&#34; alt=&#34;Example of &amp;ldquo;Hello-Worl&amp;rdquo; formula demo&#34;&gt;&lt;/p&gt;
&lt;p&gt;This template is composed of 4 &lt;strong&gt;inputs parameters&lt;/strong&gt;, that represents the currently available kinds of inputs to use Ritchie:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;strong&gt;&lt;code&gt;sample text&lt;/code&gt;&lt;/strong&gt; variable&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;&lt;code&gt;sample list&lt;/code&gt;&lt;/strong&gt; of text variables&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;&lt;code&gt;sample boolean&lt;/code&gt;&lt;/strong&gt; variable&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;&lt;code&gt;sample password&lt;/code&gt;&lt;/strong&gt; variable&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;On this section, you saw how to create a formula on Ritchie and test it. To keep configuring the formula:&lt;/p&gt;
&lt;p&gt;👉 Go to &lt;a href=&#34;implement-a-formula/&#34;&gt;&lt;strong&gt;implement a formula&lt;/strong&gt;&lt;/a&gt; to understand how to edit the files Ritchie creates after formula creation.&lt;/p&gt;
&lt;p&gt;👉 Go to &lt;a href=&#34;build-a-formula.md&#34;&gt;&lt;strong&gt;build a formula&lt;/strong&gt;&lt;/a&gt; to see how to continue the tests on the formulas you create.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Formula Folder</title>
      <link>https://zupit.github.io/docs-ritchie/docs/tutorials/formulas/how-to-implement-formulas/formula-folder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/tutorials/formulas/how-to-implement-formulas/formula-folder/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;what-is-the-formula-folder&#34;&gt;What is the formula folder?&lt;/h2&gt;
&lt;p&gt;This folder contains the files with the formula&amp;rsquo;s behavior.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

The folder structures defines the command tree, so &lt;strong&gt;it&amp;rsquo;s not indicated to update&lt;/strong&gt; folders names or include more files/folders, &lt;strong&gt;if not&lt;/strong&gt; in the &lt;strong&gt;src/*&lt;/strong&gt; folder.
&lt;/div&gt;

&lt;p&gt;Each programming language has its own specificities, but the formula&amp;rsquo;s structure is almost always the same, no matter what language is used, and will contain:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;config.json&lt;/code&gt; file: to configure the formula inputs.&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;main&lt;/code&gt; file: to extract local variables.&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;pkg/formula&lt;/code&gt; folder: to implement the formula operation.&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;Dockerfile&lt;/code&gt; file: to build docker images.&lt;/li&gt;
&lt;li&gt;o &lt;code&gt;README&lt;/code&gt; file: to explain what the formula does.&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;Makefile&lt;/code&gt; file: to compile the formula&amp;rsquo;s code.&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;metadata.json&lt;/code&gt; file: to tag the formula&amp;rsquo;s information.&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;set_unmask.sh&lt;/code&gt; file: used by the Makefile file.&lt;/li&gt;
&lt;li&gt;some &lt;code&gt;help.json&lt;/code&gt; files: to configure formula helper messages on the CLI.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find all &lt;a href=&#34;https://github.com/ZupIT/ritchie-formulas/tree/master/templates/create_formula/languages&#34;&gt;&lt;strong&gt;languages templates&lt;/strong&gt;&lt;/a&gt; on the ritchie-formulas repository.&lt;/p&gt;
&lt;h3 id=&#34;formula-folder-examples&#34;&gt;Formula folder examples&lt;/h3&gt;
&lt;div class=&#39;code-tabs&#39;&gt;
  &lt;ul class=&#34;nav nav-tabs&#34;&gt;&lt;/ul&gt;
  &lt;div class=&#34;tab-content&#34;&gt;
&lt;div class=&#34;tab-pane&#34; title=&#34;&#34;&gt;
  &lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/go.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;To change the formula&amp;rsquo;s behavior for this language, you&amp;rsquo;ll have at least to update the following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;config.json:&lt;/strong&gt; Update the inputs configurations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;main.go:&lt;/strong&gt; Extract the inputs and call the formula&amp;rsquo;s methods (coded on &lt;strong&gt;formula/*&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;formula/*:&lt;/strong&gt; Code the formula&amp;rsquo;s behavior.&lt;/li&gt;
&lt;/ul&gt;

 &lt;/div&gt;

&lt;div class=&#34;tab-pane&#34; title=&#34;&#34;&gt;
  &lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/java.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;To change the formula&amp;rsquo;s behavior for this language, you&amp;rsquo;ll have at least to update the following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;config.json:&lt;/strong&gt; Update the inputs configurations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;main.java:&lt;/strong&gt; Extract the inputs and call the formula&amp;rsquo;s methods (coded on &lt;strong&gt;formula/*&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;formula/*:&lt;/strong&gt; Code the formula&amp;rsquo;s behavior.&lt;/li&gt;
&lt;/ul&gt;

 &lt;/div&gt;

&lt;div class=&#34;tab-pane&#34; title=&#34;&#34;&gt;
  &lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/node.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;To change the formula&amp;rsquo;s behavior for this language, you&amp;rsquo;ll have at least to update the following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;config.json:&lt;/strong&gt; Update the inputs configurations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;index.js:&lt;/strong&gt; Extract the inputs and call the formula&amp;rsquo;s methods (coded on &lt;strong&gt;formula/*&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;formula/*:&lt;/strong&gt; Code the formula&amp;rsquo;s behavior.&lt;/li&gt;
&lt;/ul&gt;

 &lt;/div&gt;

&lt;div class=&#34;tab-pane&#34; title=&#34;&#34;&gt;
  &lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/python.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;To change the formula&amp;rsquo;s behavior for this language, you&amp;rsquo;ll have at least to update the following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;config.json:&lt;/strong&gt; Update the inputs configurations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;main.py:&lt;/strong&gt; Extract the inputs and call the formula&amp;rsquo;s methods (coded on &lt;strong&gt;formula/*&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;formula/*:&lt;/strong&gt; Code the formula&amp;rsquo;s behavior.&lt;/li&gt;
&lt;/ul&gt;

 &lt;/div&gt;

&lt;div class=&#34;tab-pane&#34; title=&#34;&#34;&gt;
  &lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/shell.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;To change the formula&amp;rsquo;s behavior for this language, you&amp;rsquo;ll have at least to update the following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;config.json:&lt;/strong&gt; Update the inputs configurations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;main.sh:&lt;/strong&gt; Extract the inputs and call the formula&amp;rsquo;s methods (coded on &lt;strong&gt;formula/*&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;formula/*:&lt;/strong&gt; Code the formula&amp;rsquo;s behavior.&lt;/li&gt;
&lt;/ul&gt;

 &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

The structures defines the command, so &lt;strong&gt;it&amp;rsquo;s not indicated to update&lt;/strong&gt; folders names or include more files/folders &lt;strong&gt;if not&lt;/strong&gt; in the &lt;strong&gt;src/*&lt;/strong&gt; folder.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Config File</title>
      <link>https://zupit.github.io/docs-ritchie/docs/tutorials/formulas/how-to-implement-formulas/config-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/tutorials/formulas/how-to-implement-formulas/config-file/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;what-is-the-configjson-file&#34;&gt;What is the config.json file?&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;config.json&lt;/strong&gt; file contains the formula&amp;rsquo;s input parameters. It allows the CLI to know what datas to ask the user when he runs the command in the terminal in order to process the formula correctly.&lt;/p&gt;
&lt;p&gt;These input parameters are made up of the following fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;strong&gt;&lt;code&gt;docker image builder&lt;/code&gt;&lt;/strong&gt; (according to the programming language chose at the formula creation)&lt;/li&gt;
&lt;li&gt;the formula &lt;strong&gt;&lt;code&gt;inputs parameters list&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{
  &amp;#34;dockerImageBuilder&amp;#34;: &amp;#34;dockerImage&amp;#34;,
  &amp;#34;inputs&amp;#34;: []
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;input-parameter-configuration&#34;&gt;Input parameter configuration&lt;/h2&gt;
&lt;p&gt;Each input parameter is composed of the following fields:&lt;/p&gt;
&lt;h3 id=&#34;mandatory-fields&#34;&gt;Mandatory fields&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;: variable name to extract.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;Once an input value is informed on Ritchie CLI, it is saved as a &lt;strong&gt;local variable&lt;/strong&gt; during the formula execution.&lt;/p&gt;
&lt;p&gt;The variable &lt;strong&gt;name&lt;/strong&gt; will be convert &lt;strong&gt;uppercase&lt;/strong&gt; as the &lt;strong&gt;local variable name&lt;/strong&gt;.&lt;/p&gt;

&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;A good practice is to add a &lt;em&gt;&lt;strong&gt;&lt;code&gt;RIT_&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; suffix to each &lt;strong&gt;&lt;code&gt;input name&lt;/code&gt;&lt;/strong&gt; to avoid having conflicts with local variables.&lt;/p&gt;
&lt;p&gt;Example_: &lt;code&gt;rit_file_name&lt;/code&gt; &amp;ndash;&amp;gt; &lt;code&gt;RIT_FILE_NAME&lt;/code&gt;_&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;text&lt;/strong&gt; (string),&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bool&lt;/strong&gt; (boolean),&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;password&lt;/strong&gt; (hidden string on CLI),&lt;/li&gt;
&lt;li&gt;**credentials** &lt;em&gt;(specific type, learn more informations_ &lt;/em&gt;&lt;strong&gt;here&lt;/strong&gt;_&lt;a href=&#34;https://docs.ritchiecli.io/tutorials/credentials#how-to-use-credentials-as-formula-inputs&#34;&gt;&lt;/a&gt;&lt;em&gt;)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dynamic&lt;/strong&gt; &lt;em&gt;(associated with the optional &lt;code&gt;request_info&lt;/code&gt; field below)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;label&lt;/code&gt; : text appearing on the CLI, asking for the input.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;input-example-with-mandatory-fields&#34;&gt;Input example with mandatory fields:&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{
      &amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
      &amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
      &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;optional-fields&#34;&gt;Optional fields&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt;: default input value (&lt;strong&gt;if&lt;/strong&gt; &lt;strong&gt;null&lt;/strong&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{
      &amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
      &amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
      &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
      &amp;#34;default&amp;#34;: &amp;#34;Dennis&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;You also can make this default configuration with the default flag, which allows you to attribute default values configured on the formula.&lt;/p&gt;
&lt;p&gt;In case of fields without a default value, the flag will keep asking for this inputs that must be configured on your config.json file.&lt;/p&gt;

&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;required&lt;/code&gt;: boolean that indicates if the input value is required or optional.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{
      &amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
      &amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
      &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
      &amp;#34;required&amp;#34;: true
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tutorial&lt;/code&gt;: input helper message &lt;em&gt;[? for help]&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{
      &amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
      &amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
      &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
      &amp;#34;tutorial&amp;#34;: &amp;#34;We are expecting you to write your name (ex: John)&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;items&lt;/code&gt;: list of input variable options.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{
      &amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
      &amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
      &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
      &amp;#34;items&amp;#34;: [
            &amp;#34;Dennis&amp;#34;,
            &amp;#34;John&amp;#34;,
            &amp;#34;Bill&amp;#34;
      ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cache&lt;/code&gt;:  saves former input values.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;active&lt;/code&gt;: if cache is enabled or not.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;qty&lt;/code&gt;: amount of values to store.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;newLabel&lt;/code&gt;: text appearing on the CLI asking for a new input.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{
      &amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
      &amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
      &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
      &amp;#34;cache&amp;#34;: {
            &amp;#34;active&amp;#34;: true,
            &amp;#34;qty&amp;#34;: 5,
            &amp;#34;newLabel&amp;#34;: &amp;#34;Type another name:&amp;#34;
      }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;condition&lt;/code&gt;: shows this input if the given condition succeeds
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;variable&lt;/code&gt;: The variable name used on a previous input for comparison.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;operator&lt;/code&gt;: A logical operator to compare. Supports &lt;strong&gt;&lt;code&gt;==&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;!=&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value&lt;/code&gt;: The desired value to compare to.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{
      &amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
      &amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
      &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
      &amp;#34;default&amp;#34;: &amp;#34;Dennis&amp;#34;
},
{
      &amp;#34;condition&amp;#34;: {
            variable: &amp;#34;rit_name&amp;#34;,
            &amp;#34;operator&amp;#34;: &amp;#34;!=&amp;#34;,
            &amp;#34;value&amp;#34;: &amp;#34;Dennis&amp;#34;
      }
      &amp;#34;label&amp;#34;: &amp;#34;What is your date of birth?&amp;#34;,
      &amp;#34;name&amp;#34;: &amp;#34;rit_date_of_birth&amp;#34;,
      &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pattern&lt;/code&gt;: configure an input value validation.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;regex&lt;/code&gt;: The regex pattern to validate the input.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mismatchText&lt;/code&gt;: error message when input doesn&amp;rsquo;t match the regex pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{
      &amp;#34;label&amp;#34;: &amp;#34;What is your age&amp;#34;,
      &amp;#34;name&amp;#34;: &amp;#34;rit_age&amp;#34;,
      &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
      &amp;#34;pattern&amp;#34;: {
            &amp;#34;regex&amp;#34;: [0-9],
            &amp;#34;mismatchText&amp;#34;: &amp;#34;Only a integer value is allowed here (ex: 20)&amp;#34;
      }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;requestInfo&lt;/code&gt;: configuration to get dynamic input type.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt;: URL to consume a GET service that will return a list of objects.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jsonPath&lt;/code&gt;: Path to the variable to extract from the returned list, for each object. (Check out &lt;a href=&#34;https://goessner.net/articles/JsonPath/&#34;&gt;&lt;strong&gt;how works the json path&lt;/strong&gt;&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{
      &amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
      &amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
      &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
      &amp;#34;requestInfo&amp;#34;: {
            &amp;#34;url&amp;#34;: &amp;#34;https://my-url.com&amp;#34;,
            &amp;#34;jsonPath&amp;#34;: $[&amp;#39;user&amp;#39;][&amp;#39;name&amp;#39;]
      }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

Each formula can contain as many inputs as necessary, as well as any association of the above fields.
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Conditional input example with Regex pattern:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&amp;#34;inputs&amp;#34;: [
    {
      &amp;#34;label&amp;#34;: &amp;#34;Select a system:&amp;#34;,
      &amp;#34;name&amp;#34;: &amp;#34;rit_system&amp;#34;,
      &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
      &amp;#34;items&amp;#34;: [
        &amp;#34;LINUX&amp;#34;,
        &amp;#34;MACOS&amp;#34;,
        &amp;#34;WINDOWS&amp;#34;
      ],
      &amp;#34;required&amp;#34;: true,
      &amp;#34;tutorial&amp;#34;: &amp;#34;Select a System from the list.&amp;#34;   
    },
    {
      &amp;#34;condition&amp;#34;: {
        &amp;#34;variable&amp;#34;:&amp;#34;rit_system&amp;#34;,
        &amp;#34;operator&amp;#34;:&amp;#34;==&amp;#34;,
        &amp;#34;value&amp;#34;:&amp;#34;LINUX&amp;#34;
      },
      &amp;#34;label&amp;#34;: &amp;#34;Select a LINUX OS:&amp;#34;,
      &amp;#34;name&amp;#34;: &amp;#34;rit_linux_os&amp;#34;,
      &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
      &amp;#34;items&amp;#34;: [
        &amp;#34;UBUNTU&amp;#34;,
        &amp;#34;FEDORA&amp;#34;,
        &amp;#34;CENTOS&amp;#34;
      ],
      &amp;#34;pattern&amp;#34;: {
        &amp;#34;regex&amp;#34;: &amp;#34;UBUNTU|FEDORA|CENTOS&amp;#34;,
        &amp;#34;mismatchText&amp;#34;: &amp;#34;Invalid option&amp;#34;
      },
      &amp;#34;required&amp;#34;: false,
      &amp;#34;tutorial&amp;#34;: &amp;#34;Select an Linux Operating System from the list.&amp;#34;   
    }
  ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

Once an input is informed on Ritchie CLI, it is saved as a &lt;strong&gt;local variable&lt;/strong&gt; during the formula execution.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Main File</title>
      <link>https://zupit.github.io/docs-ritchie/docs/tutorials/formulas/how-to-implement-formulas/main-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/tutorials/formulas/how-to-implement-formulas/main-file/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;what-is-the-main-file&#34;&gt;What is the main file?&lt;/h2&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;The main file is used to extract the &lt;strong&gt;inputs&lt;/strong&gt; asked in the config.json file, saved as &lt;strong&gt;local variables.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Inputs are extracted by the field &lt;strong&gt;name&lt;/strong&gt; informed on the config.json file &lt;strong&gt;UPPERCASE&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;This file is also where the formula functions, manipulating the input parameters, are called to perform the operation / automation of the formula.&lt;/p&gt;
&lt;h3 id=&#34;main-file-examples&#34;&gt;Main file examples&lt;/h3&gt;
&lt;p&gt;In our examples below, there is always an existing &lt;code&gt;formula&lt;/code&gt; class with a &lt;code&gt;Run()&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#39;code-tabs&#39;&gt;
  &lt;ul class=&#34;nav nav-tabs&#34;&gt;&lt;/ul&gt;
  &lt;div class=&#34;tab-content&#34;&gt;
&lt;div class=&#34;tab-pane&#34; title=&#34;&#34;&gt;
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;func main() {
	input1 := os.Getenv(&amp;#34;INPUT_TEXT&amp;#34;)
	input2 := os.Getenv(&amp;#34;INPUT_LIST&amp;#34;)
	input3, _ := strconv.ParseBool(os.Getenv(&amp;#34;INPUT_BOOLEAN&amp;#34;))
	input4 := os.Getenv(&amp;#34;INPUT_PASSWORD&amp;#34;)

	formula.Formula{
		Text:     input1,
		List:     input2,
		Boolean:  input3,
		Password: input4,
	}.Run(os.Stdout)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;/div&gt;

&lt;div class=&#34;tab-pane&#34; title=&#34;&#34;&gt;
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;public class Main {

  public static void main(String[] args) {

    String inputText = System.getenv(&amp;#34;INPUT_TEXT&amp;#34;);
    boolean inputBoolean = Boolean.parseBoolean(System.getenv(&amp;#34;INPUT_BOOLEAN&amp;#34;));
    String inputList = System.getenv(&amp;#34;INPUT_LIST&amp;#34;);
    String inputPassword = System.getenv(&amp;#34;INPUT_PASSWORD&amp;#34;);

    Formula formula = new Formula(
      inputText, 
      inputBoolean, 
      inputList, 
      inputPassword
    );
    
    formula.Run();
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;/div&gt;

&lt;div class=&#34;tab-pane&#34; title=&#34;&#34;&gt;
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;const INPUT1 = process.env.INPUT_TEXT
const INPUT2 = process.env.INPUT_BOOLEAN
const INPUT3 = process.env.INPUT_LIST
const INPUT4 = process.env.INPUT_PASSWORD

run(INPUT1, INPUT2, INPUT3, INPUT4)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;/div&gt;

&lt;div class=&#34;tab-pane&#34; title=&#34;&#34;&gt;
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;input1 = os.environ.get(&amp;#34;INPUT_TEXT&amp;#34;)
input2 = os.environ.get(&amp;#34;INPUT_BOOLEAN&amp;#34;)
input3 = os.environ.get(&amp;#34;INPUT_LIST&amp;#34;)
input4 = os.environ.get(&amp;#34;INPUT_PASSWORD&amp;#34;)

formula.Run(input1, input2, input3, input4)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;/div&gt;

&lt;div class=&#34;tab-pane&#34; title=&#34;&#34;&gt;
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;//Inputs are not even necessary here, as Shellscript get values from local variables directly.

runFormula &amp;#39;$SAMPLE_TEXT&amp;#39; $SAMPLE_LIST &amp;#39;$SAMPLE_BOOL&amp;#39;&amp;#39;$SAMPLE_PASSWORD&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Dependencies</title>
      <link>https://zupit.github.io/docs-ritchie/docs/tutorials/formulas/how-to-implement-formulas/dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/tutorials/formulas/how-to-implement-formulas/dependencies/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;what-are-dependencies&#34;&gt;What are dependencies?&lt;/h2&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

Each programming language has its own specificities &lt;strong&gt;to import libraries or packages&lt;/strong&gt;.
&lt;/div&gt;

&lt;p&gt;On Ritchie, it&amp;rsquo;s possible to configure each formula as an independent and small project.&lt;/p&gt;
&lt;p&gt;Therefore, it will be possible to import all the necessary dependencies to perform the operations you want to implement.&lt;/p&gt;
&lt;div class=&#39;code-tabs&#39;&gt;
  &lt;ul class=&#34;nav nav-tabs&#34;&gt;&lt;/ul&gt;
  &lt;div class=&#34;tab-content&#34;&gt;
&lt;div class=&#34;tab-pane&#34; title=&#34;&#34;&gt;
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module formula

go 1.14

require (
    github.com/gookit/color v1.2.5
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;/div&gt;

&lt;div class=&#34;tab-pane&#34; title=&#34;&#34;&gt;
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;
&amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;
         xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

    &amp;lt;groupId&amp;gt;com.ritchie&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;formula&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;

    &amp;lt;properties&amp;gt;
        &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;
        &amp;lt;maven.compiler.source&amp;gt;${java.version}&amp;lt;/maven.compiler.source&amp;gt;
        &amp;lt;maven.compiler.target&amp;gt;${java.version}&amp;lt;/maven.compiler.target&amp;gt;
        &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
        &amp;lt;maven-jar-plugin.version&amp;gt;3.2.0&amp;lt;/maven-jar-plugin.version&amp;gt;
    &amp;lt;/properties&amp;gt;

    &amp;lt;build&amp;gt;
        &amp;lt;finalName&amp;gt;Main&amp;lt;/finalName&amp;gt;
        &amp;lt;plugins&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt;
                &amp;lt;configuration&amp;gt;
                    &amp;lt;source&amp;gt;1.8&amp;lt;/source&amp;gt;
                    &amp;lt;target&amp;gt;1.8&amp;lt;/target&amp;gt;
                &amp;lt;/configuration&amp;gt;
            &amp;lt;/plugin&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;!-- Build an executable JAR --&amp;gt;
                &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;maven-jar-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;${maven-jar-plugin.version}&amp;lt;/version&amp;gt;
                &amp;lt;configuration&amp;gt;
                    &amp;lt;archive&amp;gt;
                        &amp;lt;manifest&amp;gt;
                            &amp;lt;!-- &amp;lt;addClasspath&amp;gt;true&amp;lt;/addClasspath&amp;gt; --&amp;gt;
                            &amp;lt;mainClass&amp;gt;com.ritchie.Main&amp;lt;/mainClass&amp;gt;
                        &amp;lt;/manifest&amp;gt;
                    &amp;lt;/archive&amp;gt;
                &amp;lt;/configuration&amp;gt;
            &amp;lt;/plugin&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;configuration&amp;gt;
                    &amp;lt;appendAssemblyId&amp;gt;false&amp;lt;/appendAssemblyId&amp;gt;
                    &amp;lt;archive&amp;gt;
                        &amp;lt;manifest&amp;gt;
                            &amp;lt;mainClass&amp;gt;com.ritchie.Main&amp;lt;/mainClass&amp;gt;
                        &amp;lt;/manifest&amp;gt;
                    &amp;lt;/archive&amp;gt;
                    &amp;lt;descriptorRefs&amp;gt;
                        &amp;lt;descriptorRef&amp;gt;jar-with-dependencies&amp;lt;/descriptorRef&amp;gt;
                    &amp;lt;/descriptorRefs&amp;gt;
                &amp;lt;/configuration&amp;gt;
                &amp;lt;executions&amp;gt;
                    &amp;lt;execution&amp;gt;
                        &amp;lt;id&amp;gt;make-assembly&amp;lt;/id&amp;gt;
                        &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;
                        &amp;lt;goals&amp;gt;
                            &amp;lt;goal&amp;gt;single&amp;lt;/goal&amp;gt;
                        &amp;lt;/goals&amp;gt;
                    &amp;lt;/execution&amp;gt;
                &amp;lt;/executions&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
    &amp;lt;/build&amp;gt;

    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;4.13.1&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.github.tomas-langer&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;chalk&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.0.2&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;/div&gt;

&lt;div class=&#34;tab-pane&#34; title=&#34;&#34;&gt;
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{
  &amp;#34;dependencies&amp;#34;: {
    &amp;#34;cli-color&amp;#34;: &amp;#34;^2.0.0&amp;#34;
  },
  &amp;#34;main&amp;#34;: &amp;#34;index.js&amp;#34;,
  &amp;#34;scripts&amp;#34;: {
    &amp;#34;test&amp;#34;: &amp;#34;echo \&amp;#34;Error: no test specified\&amp;#34; &amp;amp;&amp;amp; exit 1&amp;#34;
  },
  &amp;#34;version&amp;#34;: &amp;#34;1.0.0&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;/div&gt;

&lt;div class=&#34;tab-pane&#34; title=&#34;&#34;&gt;
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;colored==1.4.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;/div&gt;

&lt;div class=&#34;tab-pane&#34; title=&#34;&#34;&gt;
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{
  &amp;#34;require&amp;#34;: {
    &amp;#34;codedungeon/php-cli-colors&amp;#34;: &amp;#34;~1.0&amp;#34;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: How to build formulas</title>
      <link>https://zupit.github.io/docs-ritchie/docs/tutorials/formulas/how-to-build-formulas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/tutorials/formulas/how-to-build-formulas/</guid>
      <description>
        
        
        &lt;hr&gt;


&lt;div class=&#34;alert alert-danger&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;This functionality is no longer available from Ritchie&amp;rsquo;s 2.5.0 version. From now on, a formula build is automatically made on your CLI.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re using a previous version just follow the instructions of this section.&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&#34;how-to-build&#34;&gt;How to build?&lt;/h2&gt;
&lt;p&gt;After &lt;a href=&#34;how-to-create-formulas.md&#34;&gt;&lt;strong&gt;creating a formula&lt;/strong&gt;&lt;/a&gt;, if you want to edit the code of the formula, it&amp;rsquo;s necessary to &lt;strong&gt;build&lt;/strong&gt; these changes to test the command with the new implementation.&lt;/p&gt;
&lt;p&gt;To do so, just run the command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;rit build formula
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You must inform:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;directory&amp;rsquo;s path&lt;/strong&gt; where the formula is located.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;formula&amp;rsquo;s path&lt;/strong&gt; to be builded (the formula&amp;rsquo;s command).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In case you want to update the formula&amp;rsquo;s code in running time, you can use the &lt;strong&gt;flag “&amp;ndash;watch”&lt;/strong&gt; as shown in the command below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;rit build formula --watch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;On this section, you saw how to implement a formula on Ritchie. To keep configuring the formula:&lt;/p&gt;
&lt;p&gt;👉 Go to &lt;a href=&#34;publish-a-formula.md&#34;&gt;&lt;strong&gt;publish a formula&lt;/strong&gt;&lt;/a&gt; to see how to transfer your work to a public repository.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: How to publish formulas</title>
      <link>https://zupit.github.io/docs-ritchie/docs/tutorials/formulas/how-to-publish-formulas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/tutorials/formulas/how-to-publish-formulas/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;how-to-publish&#34;&gt;How to publish?&lt;/h2&gt;
&lt;p&gt;There is a formula on Ritchie that allows the user to create / update a formula repository on Github / Gitlab.&lt;/p&gt;
&lt;h3 id=&#34;premisses&#34;&gt;Premisses&lt;/h3&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

To publish your formula, make sure to set Github / Gitlab credentials using the**&lt;code&gt;rit set credential&lt;/code&gt;** command.
&lt;/div&gt;

&lt;h2 id=&#34;publish-your-repository&#34;&gt;Publish your repository&lt;/h2&gt;
&lt;p&gt;A formula has been created on the community repository to perform:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The initialization of a local repository on Git (if necessary),&lt;/li&gt;
&lt;li&gt;The creation of the repository on Github / Gitlab,&lt;/li&gt;
&lt;li&gt;The release generation of a new version of the repository,&lt;/li&gt;
&lt;li&gt;The addition of the repository to Ritchie local repositories (**&lt;code&gt;rit add repo&lt;/code&gt;**command).&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

Moreover, if the repository already exists, it will commit the new code and generate the new release version informed, before updating Ritchie repositories (**&lt;code&gt;rit update repo&lt;/code&gt;**command).
&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;rit publish repo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The user has to inform 5 different kinds of inputs:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;provider&lt;/code&gt;&lt;/strong&gt; (Github or Gitlab)&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;repository&#39;s privacy&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;repository&#39;s name&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;local repository path&lt;/code&gt;&lt;/strong&gt; you wish to publish&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;release version&lt;/code&gt;&lt;/strong&gt; to generate&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/rit-publish-repo.gif&#34; alt=&#34;rit publish repo command&#34;&gt;&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

As shown on the example above, you can check if the publication has been successful by using the &lt;strong&gt;&lt;code&gt;rit list repo&lt;/code&gt;&lt;/strong&gt; command and see if the published repository appears.
&lt;/div&gt;

&lt;h2 id=&#34;publish-manually&#34;&gt;Publish manually&lt;/h2&gt;
&lt;p&gt;To publish a formula manually, you need to push it on a &lt;strong&gt;Github / Gitlab&lt;/strong&gt; repository, following these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Have an exclusive repository for formulas on Github / Gitlab.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;It can be created from the a local repository, or based on a cloned repository.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add your formulas to the repository _Using the**&lt;code&gt;rit create formula&lt;/code&gt;** command, or **copy / paste** folders**.**_&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Commit and push the new code to the Github / Gitlab repository.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate a new release of the formulas repository.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;On this section, you saw how to publish a formula on Ritchie. To keep configuring the formula:&lt;/p&gt;
&lt;p&gt;👉 Check out &lt;a href=&#34;share-formulas.md&#34;&gt;&lt;strong&gt;how to share formulas&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: How to share formulas</title>
      <link>https://zupit.github.io/docs-ritchie/docs/tutorials/formulas/how-to-share-formulas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/tutorials/formulas/how-to-share-formulas/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;how-to-share&#34;&gt;How to share?&lt;/h2&gt;
&lt;p&gt;Once a formula repository has been published, other users can add it locally from its &lt;strong&gt;URL&lt;/strong&gt; to access its formulas.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example**: &lt;/strong&gt;&lt;code&gt;https://github.com/ZupIT/ritchie-formulas&lt;/code&gt;**&lt;a href=&#34;https://github.com/ZupIT/ritchie-formulas&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To add a new repository on Ritchie, it is necessary to run the command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;rit add repo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the repository has been added, Ritchie will use the selected release on the repository to access the available formulas.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/rit-add-repo-3.gif&#34; alt=&#34;rit add repo command demonstration&#34;&gt;&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

If the formula repository is &lt;strong&gt;private&lt;/strong&gt;, the user will have to inform his Github / Gitlab token.
&lt;/div&gt;

&lt;h2 id=&#34;how-to-see-the-repo-latest-version&#34;&gt;How to see the repo latest version?&lt;/h2&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

This feature is available from Ritchie 2.2 version.
&lt;/div&gt;

&lt;p&gt;On Ritchie, it is possible to check out new formula commands and if there is a new version of some repository you added locally.&lt;/p&gt;
&lt;p&gt;To do so, just follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run the help command**&lt;code&gt;rit --help&lt;/code&gt;**. The system will return a list with the group of available repositories.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;(new version 2.12.1) commons repo commands:
  beagle      Beagle commands
  bitbucket   Manage bitbucket objects
  clean-swift Manage clean-swift objects
  docker      Manipulate Docker objects
  git         Manipulate Git objects
  github      Manipulate GitHub objects
  gitlab      Manipulate GitLab objects
  istio       Istio Service Mesh commands
  jupyter     Manage jupyter objects
  kafka       Kafka commands
  kubernetes  Manipulate kubernetes objects
  publish     Publish command
  scaffold    Manipulate scaffold objects
  xcode       Manage xcode objects
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;If you prefer, run the &lt;strong&gt;&lt;code&gt;rit list repo&lt;/code&gt;&lt;/strong&gt; command, that returns informations about the imported repositories, like the latest version and the last available version.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;how-to-update&#34;&gt;How to update?&lt;/h3&gt;
&lt;p&gt;To update the version of any repository, you just have to run the command below informing the repository and the version you wish to be updated.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;rit update repo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;On this section, you saw how to share a formula on Ritchie. To keep configuring the formula:&lt;/p&gt;
&lt;p&gt;👉 Check out how to &lt;a href=&#34;https://docs.ritchiecli.io/how-to/manipulate-credentials&#34;&gt;&lt;strong&gt;manipulate credentials&lt;/strong&gt;&lt;/a&gt; with your formulas.&lt;/p&gt;
&lt;p&gt;👉 Check out our &lt;a href=&#34;../../reference/list-of-commands.md&#34;&gt;&lt;strong&gt;list of commands&lt;/strong&gt;&lt;/a&gt; to see the available automations on our community repo.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: How to delete formulas</title>
      <link>https://zupit.github.io/docs-ritchie/docs/tutorials/formulas/how-to-delete-formulas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/tutorials/formulas/how-to-delete-formulas/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;how-to-delete&#34;&gt;How to delete?&lt;/h2&gt;
&lt;p&gt;To delete a formula, you just have to run this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;rit delete formula
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you&amp;rsquo;ve made this, follow the steps:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Select the workspace where is the formula you want to delete.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Select the formula to be deleted.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; The Ritchie will ask you to confirm if you wish to continue the operation to delete the formula. Just select the answer &amp;ldquo;yes&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/delete-formula.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;On this section, you saw how to delete a formula on Ritchie. To keep reading:&lt;/p&gt;
&lt;p&gt;👉 Go to &lt;a href=&#34;encapsulate-formulas.md&#34;&gt;&lt;strong&gt;how to encapsulate formulas&lt;/strong&gt;&lt;/a&gt; section to find out how to run a formula inside another formula.&lt;/p&gt;
&lt;p&gt;👉 Check out all the available formulas on Ritchie in the &lt;a href=&#34;../../reference/list-of-commands.md&#34;&gt;&lt;strong&gt;list of commands and flags&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: How to encapsulate formulas</title>
      <link>https://zupit.github.io/docs-ritchie/docs/tutorials/formulas/how-to-encapsulate-formulas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/tutorials/formulas/how-to-encapsulate-formulas/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;what-is-an-encapsulation&#34;&gt;What is an encapsulation?&lt;/h2&gt;
&lt;p&gt;On Ritchie, it is possible to &lt;strong&gt;run formulas inside formulas.&lt;/strong&gt; This process is what we call **Formula Encapsulation.**‌&lt;/p&gt;
&lt;p&gt;This functionality allows you, for example, to make operations in which you need to run consecutive formulas.&lt;/p&gt;
&lt;p&gt;Check out on the following topics how works this encapsulation.&lt;/p&gt;
&lt;h2 id=&#34;how-to-encapsulate&#34;&gt;How to encapsulate?&lt;/h2&gt;
&lt;h3 id=&#34;1-premisse&#34;&gt;1. Premisse&lt;/h3&gt;
&lt;p&gt;To perform a formula encapsulation, it is necessary to use the STDIN flag. On the following page, we have a detailed explanation to how this works:&lt;/p&gt;
&lt;h3 id=&#34;2-execution-a-id2-executiona&#34;&gt;2. Execution &lt;a id=&#34;2-execution&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When &lt;a href=&#34;https://app.gitbook.com/@zup-products/s/ritchie/~/diff/drafts/-MHIAf91S1RlTOvJs_KU/how-to/implement-a-formula/@drafts&#34;&gt;&lt;strong&gt;implementing a formula&lt;/strong&gt;&lt;/a&gt;, the file where the operation is coded needs to execute a command line associated to a formula.‌&lt;/p&gt;
&lt;p&gt;The encapsulated formula command line needs to be executed using the STDIN flag, informing the inputs parameters directly on the code.‌&lt;/p&gt;
&lt;h3 id=&#34;3-example-a-id3-examplea&#34;&gt;3. Example &lt;a id=&#34;3-example&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;&lt;code&gt;rit publish repo&lt;/code&gt;&lt;/strong&gt; formula has been implemented using formula encapsulation, that you can find its &lt;a href=&#34;https://github.com/ZupIT/ritchie-formulas/tree/master/publish/repo&#34;&gt;&lt;strong&gt;formula implementation&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On the example below, you&amp;rsquo;ll find below how this encapsulation works on the code part.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

This formula has been implemented using **&lt;code&gt;Shell&lt;/code&gt;**and the reasoning would be the same for any other programming language.
&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;runFormula() {
  if [ &amp;#34;Github&amp;#34; == $PROVIDER ]
  then
    echo &amp;#34;🐙 Github provider selected&amp;#34;
    echo &amp;#39;{&amp;#34;privacy&amp;#34;:&amp;#34;&amp;#39;$PRIVACY&amp;#39;&amp;#34;, &amp;#34;project_name&amp;#34;:&amp;#34;&amp;#39;$PROJECT_NAME&amp;#39;&amp;#34;, &amp;#34;workspace_path&amp;#34;:&amp;#34;&amp;#39;$WORKSPACE_PATH&amp;#39;&amp;#34;, &amp;#34;version&amp;#34;:&amp;#34;&amp;#39;$VERSION&amp;#39;&amp;#34;}&amp;#39; | rit github publish repo --stdin
  elif [ &amp;#34;Gitlab&amp;#34; == $PROVIDER ]
  then
    echo &amp;#34;🦊 Gitlab provider selected&amp;#34;
    echo &amp;#39;{&amp;#34;privacy&amp;#34;:&amp;#34;&amp;#39;$PRIVACY&amp;#39;&amp;#34;, &amp;#34;project_name&amp;#34;:&amp;#34;&amp;#39;$PROJECT_NAME&amp;#39;&amp;#34;, &amp;#34;workspace_path&amp;#34;:&amp;#34;&amp;#39;$WORKSPACE_PATH&amp;#39;&amp;#34;, &amp;#34;version&amp;#34;:&amp;#34;&amp;#39;$VERSION&amp;#39;&amp;#34;}&amp;#39; | rit gitlab publish repo --stdin
  else
    echo &amp;#34;🤖 Unexpected Provider informed. Check it please and try again.&amp;#34;
  fi
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, according to the input informed by the user, two different formulas can be executed:‌&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;rit github publish repo&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;rit gitlab publish repo&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To do so, the encapsulated formulas inputs parameters are informed dynamically according to the inputs parameters of the main formula (&lt;strong&gt;&lt;code&gt;rit publish repo&lt;/code&gt;&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Depending on the operation, the JSON used with the STDIN command could be generated according to other operations performed through the formula execution before executing the encapsulated formula command line.‌&lt;/p&gt;
&lt;h2 id=&#34;next-steps-a-idnext-stepsa&#34;&gt;Next steps &lt;a id=&#34;next-steps&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You saw in this section how to use formula encapsulation. If you want to keep reading about Ritchie&amp;rsquo;s commands:‌&lt;/p&gt;
&lt;p&gt;​👉 Check out the &lt;a href=&#34;../../challenges/explanation.md&#34;&gt;&lt;strong&gt;challenges&lt;/strong&gt;&lt;/a&gt; we created to apply all the Ritchie concepts you learned.‌&lt;/p&gt;
&lt;p&gt;​👉 Check out our &lt;a href=&#34;../../reference/list-of-commands.md&#34;&gt;&lt;strong&gt;list of commands&lt;/strong&gt;&lt;/a&gt; to see the available automations on our community repo.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Context</title>
      <link>https://zupit.github.io/docs-ritchie/docs/tutorials/credentials/context/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/tutorials/credentials/context/</guid>
      <description>
        
        
        &lt;hr&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: How to set credentials</title>
      <link>https://zupit.github.io/docs-ritchie/docs/tutorials/credentials/how-to-set-credentials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/tutorials/credentials/how-to-set-credentials/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;You have to set Ritchie&amp;rsquo;s credentials to avoid informing data multiples times through the terminal.&lt;/p&gt;
&lt;p&gt;To do so, just run the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;rit set credential
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The terminal will return this message:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;? Select your provider  [Use arrows to move, type to filter]
&amp;gt; kubeconfig
  ansible
  aws
  github
  gitlab
  jenkins
  Add a new
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After you chose one of the available providers, Ritchie will ask you to fill the following fields:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;? Select your provider github
? username: DennisRitchie
? email: dennis.ritchie@zup.com.br
? token: 
✔ Github credential saved!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

You can check out on &lt;a href=&#34;../formulas/implement-a-formula/#editable-files&#34;&gt;&lt;strong&gt;formula&amp;rsquo;s editable files&lt;/strong&gt;&lt;/a&gt; to see how to manipulate the credentials defined in the session as formula input parameters (inputs in the config.json file).
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: How to delete credentials</title>
      <link>https://zupit.github.io/docs-ritchie/docs/tutorials/credentials/how-to-delete-credentials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/tutorials/credentials/how-to-delete-credentials/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;how-to-delete&#34;&gt;How to delete?&lt;/h2&gt;
&lt;p&gt;To delete a credential, you just have to run this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;rit delete credential
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Check out how the process works:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/large-gif-814x408-.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;On this section, you saw how to delete a credential on Ritchie. If you want to keep reading:&lt;/p&gt;
&lt;p&gt;👉 Go to &lt;a href=&#34;how-to-add-providers.md&#34;&gt;&lt;strong&gt;how to add providers&lt;/strong&gt;&lt;/a&gt; section to keep configuring your credentials.&lt;/p&gt;
&lt;p&gt;👉 Check out the l&lt;a href=&#34;../../reference/list-of-commands.md&#34;&gt;&lt;strong&gt;ist of commands and flags&lt;/strong&gt;&lt;/a&gt; available on Ritchie.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: How to add providers</title>
      <link>https://zupit.github.io/docs-ritchie/docs/tutorials/credentials/how-to-add-providers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/tutorials/credentials/how-to-add-providers/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;You can also configure Ritchie to add new providers on your workspace.&lt;/p&gt;
&lt;p&gt;To do so, just choose &amp;ldquo;&lt;strong&gt;Add a new&lt;/strong&gt;&amp;rdquo; option when running the &lt;strong&gt;&lt;code&gt;rit set credential&lt;/code&gt;&lt;/strong&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;? Select your provider Add a new
? Define your provider name: Provider_Name
? Define your field name: (ex.:token, secretAccessKey) token
? Select your field type: secret
? Add more credentials to this provider? no
? token: *
✔ Provider_Name credential saved!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The informations that will be requested are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Provider name:&lt;/strong&gt; name of the new provider. You name it according to your preference.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Field name:&lt;/strong&gt; name of a credential from this provider.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Field type:&lt;/strong&gt; value type of this credential. It can be: &lt;strong&gt;plain text&lt;/strong&gt; or &lt;strong&gt;secret&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you finished this configuration, you set up this credentials following the same instructions you saw above.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

This provider, as well as its informations, will be permanently saved on Ritchie. You can also add as much providers as you want.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: How to use credentials as formula inputs</title>
      <link>https://zupit.github.io/docs-ritchie/docs/tutorials/credentials/how-to-use-credentials-as-formula-inputs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/tutorials/credentials/how-to-use-credentials-as-formula-inputs/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;Once a provider&amp;rsquo;s credential has been set, it can be used as input in the formula&amp;rsquo;s &lt;strong&gt;&lt;code&gt;config.json&lt;/code&gt;&lt;strong&gt;file. To do so, it is necessary to use the reserved keyword:&lt;/strong&gt;&lt;code&gt;CREDENTIAL&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When used as an input, the credential will contain 2 fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;name&lt;/strong&gt; is the variable used to extract the input and manipulate it inside the formula&amp;rsquo;s code.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;type&lt;/strong&gt; is the specific nomenclature for the CLI to now which credential to use.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-danger&#34; role=&#34;alert&#34;&gt;

The &lt;strong&gt;type&lt;/strong&gt; needs to respect the following pattern:&lt;strong&gt;&lt;code&gt;CREDENTIAL_PROVIDER_VARIABLE&lt;/code&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;p&gt;For example, to be able to use &lt;strong&gt;&lt;code&gt;GITHUB&lt;/code&gt;&lt;/strong&gt; credentials as input, you need to inform them as follows in the formula&amp;rsquo;s **&lt;code&gt;config.json&lt;/code&gt;**file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&amp;#34;inputs&amp;#34;: [ 
    { 
        &amp;#34;name&amp;#34;: &amp;#34;git_user&amp;#34;, 
        &amp;#34;type&amp;#34;: &amp;#34;CREDENTIAL_GITHUB_USERNAME&amp;#34; 
    },
    { 
        &amp;#34;name&amp;#34;: &amp;#34;git_email&amp;#34;, 
        &amp;#34;type&amp;#34;: &amp;#34;CREDENTIAL_GITHUB_EMAIL&amp;#34; 
    },
    { 
        &amp;#34;name&amp;#34;: &amp;#34;git_token&amp;#34;, 
        &amp;#34;type&amp;#34;: &amp;#34;CREDENTIAL_GITHUB_TOKEN&amp;#34;
    } 
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you have any doubt regarding the provider&amp;rsquo;s variable names, you can check the credentials you&amp;rsquo;ve set using the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;rit list credential
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With &lt;strong&gt;&lt;code&gt;GITHUB&lt;/code&gt;&lt;/strong&gt;, it will return something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;PROVIDER	 CONTEXT	  CREDENTIAL
github  	 default	  {&amp;#34;token&amp;#34;:&amp;#34;***&amp;#34;, &amp;#34;email&amp;#34;:&amp;#34;***&amp;#34;, &amp;#34;username&amp;#34;:&amp;#34;***&amp;#34;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;You saw in this section how to deal with credentials on Ritchie.&lt;/p&gt;
&lt;p&gt;👉 Check the &lt;a href=&#34;https://app.gitbook.com/@zup-products/s/ritchie/~/drafts/-MDPWwvUtJ2ZZfV8Mw44/v/v2.0-pt/developer/lista-de-comandos&#34;&gt;&lt;strong&gt;commands list&lt;/strong&gt;&lt;/a&gt; to see the available automations on our community repo.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Core Commands</title>
      <link>https://zupit.github.io/docs-ritchie/docs/tutorials/standard-inputs/how-to-use-the-stdin-flag/core-commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/tutorials/standard-inputs/how-to-use-the-stdin-flag/core-commands/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;core-commands-with-stdin&#34;&gt;Core commands with STDIN&lt;/h2&gt;
&lt;p&gt;Here are the JSON used to run Ritchie&amp;rsquo;s core commands through &lt;strong&gt;stdin&lt;/strong&gt;.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

You will have to adapt the variable values of each JSON to perform the desired operations as expected.
&lt;/div&gt;

&lt;h3 id=&#34;general-commands&#34;&gt;General commands&lt;/h3&gt;
&lt;p&gt;rit init&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;addCommons&amp;#34;:true, &amp;#34;sendMetrics&amp;#34;:true, &amp;#34;runType&amp;#34;:&amp;#34;local&amp;#34;}&amp;#39; | rit init --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;rit tutorial&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;tutorial&amp;#34;:&amp;#34;enabled&amp;#34;}&amp;#39; | rit tutorial --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;repo-commands&#34;&gt;Repo commands&lt;/h3&gt;
&lt;p&gt;rit add repo&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;provider&amp;#34;:&amp;#34;Github&amp;#34;, &amp;#34;name&amp;#34;:&amp;#34;repoName&amp;#34;, &amp;#34;version&amp;#34;:&amp;#34;2.2.0&amp;#34;, &amp;#34;url&amp;#34;:&amp;#34;https://github.com/ZupIT/ritchie-formulas&amp;#34;, &amp;#34;token&amp;#34;: null, &amp;#34;priority&amp;#34;:1}&amp;#39; | rit add repo --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;rit update repo&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;repoName&amp;#34;, &amp;#34;version&amp;#34;:&amp;#34;2.2.0&amp;#34;}&amp;#39; | rit update repo --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;rit delete repo&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;repoName&amp;#34;}&amp;#39; | rit delete repo --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;formula-commands&#34;&gt;Formula commands&lt;/h3&gt;
&lt;p&gt;rit create formula&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;formulaCmd&amp;#34;:&amp;#34;rit demo create formula&amp;#34;, &amp;#34;lang&amp;#34;:&amp;#34;shell&amp;#34;, &amp;#34;workspacePath&amp;#34;:&amp;#34;/users/dennis/home/ritchie-formulas&amp;#34;, &amp;#34;formulaPath&amp;#34;:&amp;#34;/demo/create/formula&amp;#34;}&amp;#39; | rit create formula --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;rit build formula&lt;/p&gt;


&lt;div class=&#34;alert alert-danger&#34; role=&#34;alert&#34;&gt;

Not supported yet
&lt;/div&gt;

&lt;h3 id=&#34;context-commands&#34;&gt;Context commands&lt;/h3&gt;
&lt;p&gt;rit set context&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;context&amp;#34;:&amp;#34;contextName&amp;#34;}&amp;#39; | rit set context --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;rit delete context&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;context&amp;#34;:&amp;#34;contextName&amp;#34;}&amp;#39; | rit delete context --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;rit set credential&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;service&amp;#34;:&amp;#34;provider&amp;#34;, &amp;#34;type&amp;#34;:&amp;#34;type&amp;#34;, &amp;#34;credential&amp;#34;: {&amp;#34;username&amp;#34;:&amp;#34;credentialUsername&amp;#34;,&amp;#34;token&amp;#34;: &amp;#34;credentialToken&amp;#34;}}&amp;#39; | rit set credential --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;core-commands-without-stdin&#34;&gt;Core commands without STDIN&lt;/h2&gt;
&lt;p&gt;Some core commands don&amp;rsquo;t need the stdin flag to be executed as they don&amp;rsquo;t have any input parameter to inform:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;rit upgrade&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;rit --version&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;rit completion&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;rit list repo&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;rit list credential&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Formulas commands</title>
      <link>https://zupit.github.io/docs-ritchie/docs/tutorials/standard-inputs/how-to-use-the-stdin-flag/formulas-commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/tutorials/standard-inputs/how-to-use-the-stdin-flag/formulas-commands/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;With formulas, the STDIN flag &lt;strong&gt;JSON&lt;/strong&gt; is based on the &lt;strong&gt;inputs parameters names&lt;/strong&gt; informed on the &lt;strong&gt;config.json file&lt;/strong&gt; used to implement the formula.&lt;/p&gt;
&lt;h3 id=&#34;example&#34;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Formula command: &lt;strong&gt;&lt;code&gt;rit demo formula&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inputs names asked in the config.json file:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;name&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;surname&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;dateOfBirth&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Formula execution with STDIN:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;Dennis&amp;#34;, &amp;#34;surname&amp;#34;:&amp;#34;Ritchie&amp;#34;, &amp;#34;dateOfBirth&amp;#34;:&amp;#34;09/09/1941&amp;#34;}&amp;#39; | rit demo formula --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-danger&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;The formula&amp;rsquo;s command through stdin, needs the input parameters that are based on the config.json, in order to work properly.&lt;/p&gt;
&lt;p&gt;If the formula&amp;rsquo;s implementation asks for data via &lt;strong&gt;prompt&lt;/strong&gt;, it will not be possible to exclusively use  stdin for the formula to run successfully.&lt;/p&gt;

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Formulas commands</title>
      <link>https://zupit.github.io/docs-ritchie/docs/tutorials/standard-inputs/how-to-use-input-flags/formulas-commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/tutorials/standard-inputs/how-to-use-input-flags/formulas-commands/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;With formulas, the Input flags are based on the &lt;strong&gt;inputs parameters names&lt;/strong&gt; informed on the &lt;strong&gt;config.json file&lt;/strong&gt; used to implement the formula.&lt;/p&gt;
&lt;h3 id=&#34;example&#34;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Formula command: &lt;strong&gt;&lt;code&gt;rit demo formula&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inputs names asked in the config.json file:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;name&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;surname&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;dateOfBirth&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Formula execution with input flags:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;rit demo formula --name=&amp;#39;dennis&amp;#39; --surname=&amp;#39;ritchie&amp;#39; --dateOfBirth=&amp;#39;09/09/1941&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-danger&#34; role=&#34;alert&#34;&gt;

The formula&amp;rsquo;s command through Input flags, needs the input parameters that are based on the config.json, in order to work properly.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: What are these challenges?</title>
      <link>https://zupit.github.io/docs-ritchie/docs/challenges/what-are-these-challenges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/challenges/what-are-these-challenges/</guid>
      <description>
        
        
        &lt;p&gt;&amp;mdash;?&lt;/p&gt;
&lt;h2 id=&#34;context&#34;&gt;Context&lt;/h2&gt;
&lt;p&gt;The objective of this section is to help users to understand step by step several activities  you are able to do with Richie.&lt;/p&gt;
&lt;h3 id=&#34;premises&#34;&gt;Premises&lt;/h3&gt;
&lt;p&gt;To perform the tasks in this section, it will be necessary to understand the following concepts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;../tutorials/formulas/how-to-run-formulas/&#34;&gt;&lt;strong&gt;How to run formulas&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../tutorials/formulas/how-to-create-formulas.md&#34;&gt;&lt;strong&gt;How to create formulas&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../tutorials/formulas/implement-a-formula/&#34;&gt;&lt;strong&gt;How to implement formulas&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../tutorials/formulas/build-a-formula.md&#34;&gt;&lt;strong&gt;How to build formulas&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../tutorials/formulas/encapsulate-formulas.md&#34;&gt;&lt;strong&gt;How to encapsulate formulas&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;challenges&#34;&gt;Challenges&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;&lt;code&gt;first challenge&lt;/code&gt;&lt;/strong&gt; is to understand how to manipulate basic inputs.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;&lt;code&gt;second challenge&lt;/code&gt;&lt;/strong&gt; is to understand how to manipulate credentials inputs.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;&lt;code&gt;third challenge&lt;/code&gt;&lt;/strong&gt; is to understand how to manipulate conditional inputs.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;&lt;code&gt;fourth challenge&lt;/code&gt;&lt;/strong&gt; is to apply the formula encapsulation concept.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

We will add more challenging tasks in the future.&lt;br&gt;
Check it out from time to time!
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Level 1 Inputs</title>
      <link>https://zupit.github.io/docs-ritchie/docs/challenges/level-1-inputs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/challenges/level-1-inputs/</guid>
      <description>
        
        
        &lt;h1 id=&#34;level-1-inputs&#34;&gt;Level 1: Inputs&lt;/h1&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective&lt;/h2&gt;
&lt;p&gt;On this tutorial, the idea is to teach you how to create a formula on Ritchie that will &lt;strong&gt;sum two positive numbers&lt;/strong&gt;.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

Command suggestion: &lt;strong&gt;&lt;code&gt;rit math sum numbers&lt;/code&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;h2 id=&#34;inputs&#34;&gt;Inputs&lt;/h2&gt;
&lt;p&gt;This formula needs to contain (at least) those two inputs parameters, see below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Number one (&lt;code&gt;RIT_NUMBER_ONE&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Number two (&lt;code&gt;RIT_NUMBER_TWO&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;step-by-step&#34;&gt;Step by step&lt;/h2&gt;
&lt;p&gt;The formula needs to follow the next steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Extract all inputs parameters.&lt;/li&gt;
&lt;li&gt;Convert inputs to integers (there is currently no &lt;em&gt;&lt;strong&gt;integer&lt;/strong&gt;&lt;/em&gt; &lt;code&gt;type&lt;/code&gt; in inputs config.json file).&lt;/li&gt;
&lt;li&gt;Sum both numbers.&lt;/li&gt;
&lt;li&gt;Return the result on the terminal.&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&#34;alert alert-success&#34; role=&#34;alert&#34;&gt;

Well done! You&amp;rsquo;ve completed the first task!
&lt;/div&gt;

&lt;h2 id=&#34;improvement-suggestions&#34;&gt;Improvement suggestions&lt;/h2&gt;
&lt;p&gt;If you want to play a little more, here are some suggestions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a validation of the input parameters to return an error to the user if the parameter is not an integer.&lt;/li&gt;
&lt;li&gt;Allow the user to sum negative numbers with positive ones.&lt;/li&gt;
&lt;li&gt;Allow the user to digit decimals in addition to integers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;👉 If you&amp;rsquo;ve completed the first challenge, let&amp;rsquo;s go to the &lt;a href=&#34;level-2.md&#34;&gt;&lt;strong&gt;level 2 task&lt;/strong&gt;&lt;/a&gt;!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Level 2 Credentials</title>
      <link>https://zupit.github.io/docs-ritchie/docs/challenges/level-2-credentials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/challenges/level-2-credentials/</guid>
      <description>
        
        
        &lt;h1 id=&#34;level-2-credentials&#34;&gt;Level 2: Credentials&lt;/h1&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective&lt;/h2&gt;
&lt;p&gt;Create a formula on Ritchie that will &lt;strong&gt;return a JSON with Github credentials&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The challenge consists in configure those inputs inside the &lt;strong&gt;config.json&lt;/strong&gt; file, but run the formula without informing them as &lt;code&gt;prompt&lt;/code&gt; or &lt;code&gt;stdin&lt;/code&gt; (they will be extracted automatically). You&amp;rsquo;ll find all the informations you need in the &lt;a href=&#34;https://docs.ritchiecli.io/how-to/manipulate-credentials&#34;&gt;&lt;strong&gt;how to manipulate credentials&lt;/strong&gt;&lt;/a&gt; tutorial section.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

Command suggestion: &lt;strong&gt;&lt;code&gt;rit github get user&lt;/code&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;h2 id=&#34;inputs&#34;&gt;Inputs&lt;/h2&gt;
&lt;p&gt;This formula needs to contain (at least) those two inputs parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Username (&lt;code&gt;RIT_GIT_USER&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Token ( &lt;code&gt;RIT_GIT_TOKEN&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;step-by-step&#34;&gt;Step by step&lt;/h2&gt;
&lt;p&gt;The formula needs to follow the next steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Extract all inputs parameters.&lt;/li&gt;
&lt;li&gt;Consume the &lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/rest/reference/users#get-a-user&#34;&gt;&lt;strong&gt;GitHub api&lt;/strong&gt;&lt;/a&gt; to get the user data.&lt;/li&gt;
&lt;li&gt;Return the result on the terminal.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;improvement-suggestions&#34;&gt;Improvement suggestions&lt;/h2&gt;
&lt;p&gt;If you want to play a little more, here are some suggestions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Develop some Github operation by manipulating these credentials.&lt;/li&gt;
&lt;li&gt;Code a formula which will allow the user to create a repository on Github.&lt;/li&gt;
&lt;li&gt;Code a formula which will allow the user to &lt;strong&gt;add&lt;/strong&gt;, &lt;strong&gt;commit&lt;/strong&gt; and &lt;strong&gt;push&lt;/strong&gt; using only one command.&lt;/li&gt;
&lt;li&gt;Code a formula which will allow the user to generate a release of the informed Github repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;👉 If you&amp;rsquo;ve completed the second challenge, let&amp;rsquo;s go to &lt;a href=&#34;level-3.md&#34;&gt;&lt;strong&gt;level 3 task&lt;/strong&gt;&lt;/a&gt;!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Level 3 Conditional Inputs</title>
      <link>https://zupit.github.io/docs-ritchie/docs/challenges/level-3-conditional-inputs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/challenges/level-3-conditional-inputs/</guid>
      <description>
        
        
        &lt;h1 id=&#34;level-3-conditional-inputs&#34;&gt;Level 3: Conditional Inputs&lt;/h1&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective&lt;/h2&gt;
&lt;p&gt;Create a formula on Ritchie that will &lt;strong&gt;return the tool selected by the user according to its profile&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You&amp;rsquo;ll find all the information you need about the &lt;strong&gt;conditional field&lt;/strong&gt; on the &lt;a href=&#34;https://docs.ritchiecli.io/how-to/implement-a-formula#1-config-json&#34;&gt;&lt;strong&gt;config.json file section&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

Command suggestion: &lt;strong&gt;&lt;code&gt;rit get tools&lt;/code&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;h2 id=&#34;inputs&#34;&gt;Inputs&lt;/h2&gt;
&lt;p&gt;This formula needs to contain (at least) those two inputs parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Profile (&lt;code&gt;RIT_PROFILE&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Profile tool (&lt;code&gt;RIT_TOOL&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The formula inputs will have to respect the diagram below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/ritchie-conditional-inputs.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-by-step&#34;&gt;Step by step&lt;/h2&gt;
&lt;p&gt;The formula needs to follow the next steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Extract all inputs parameters.&lt;/li&gt;
&lt;li&gt;Return the selected profile on the terminal.&lt;/li&gt;
&lt;li&gt;Return the selected tool on the terminal.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;improvement-suggestions&#34;&gt;Improvement suggestions&lt;/h2&gt;
&lt;p&gt;If you want to play a little more, here are some suggestions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install the selected tool according to the computer OS.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;👉 If you&amp;rsquo;ve completed the third challenge, let&amp;rsquo;s go to the &lt;a href=&#34;level-4.md&#34;&gt;&lt;strong&gt;level 4 task&lt;/strong&gt;&lt;/a&gt;!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Level 4 Encapsulation</title>
      <link>https://zupit.github.io/docs-ritchie/docs/challenges/level-4-encapsulation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/challenges/level-4-encapsulation/</guid>
      <description>
        
        
        &lt;h1 id=&#34;level-4-encapsulation&#34;&gt;Level 4: Encapsulation&lt;/h1&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective&lt;/h2&gt;
&lt;p&gt;Create a formula on Ritchie that will &lt;strong&gt;encapsulate another formula inside it.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You&amp;rsquo;ll find all the informations you need in the &lt;a href=&#34;../tutorials/formulas/encapsulate-formulas.md&#34;&gt;&lt;strong&gt;how to encapsulate formulas&lt;/strong&gt;&lt;/a&gt; tutorial section.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The idea is to encapsulate at least 2 formulas inside another one:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;rit math sum numbers&lt;/code&gt;&lt;/strong&gt; (Level 1)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;rit math multiply numbers&lt;/code&gt;&lt;/strong&gt; (TODO)&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

Command suggestion: &lt;strong&gt;&lt;code&gt;rit math calculate&lt;/code&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;h2 id=&#34;inputs&#34;&gt;Inputs&lt;/h2&gt;
&lt;p&gt;This formula needs to contain (at least) those three inputs parameters:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Number one (&lt;code&gt;RIT_UMBER_ONE&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Number two (&lt;code&gt;RIT_NUMBER_TWO&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Operation (&lt;code&gt;RIT_OPERATION&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;step-by-step&#34;&gt;Step by step&lt;/h2&gt;
&lt;p&gt;To implement this formula, it will be necessary to follow the steps below:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Premisse:&lt;/strong&gt; Creation of the &lt;strong&gt;&lt;code&gt;rit math multiply numbers&lt;/code&gt;&lt;/strong&gt; formula (same as level 1).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Extract all inputs parameters.&lt;/li&gt;
&lt;li&gt;Execute the rit formula according to the selected operation:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;multiply&lt;/strong&gt; should call &lt;strong&gt;&lt;code&gt;rit math multiply numbers&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sum&lt;/strong&gt; should call &lt;strong&gt;&lt;code&gt;rit math sum numbers&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Return the result on the terminal.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;improvement-suggestions&#34;&gt;Improvement suggestions&lt;/h2&gt;
&lt;p&gt;If you want to play a little more, here are some suggestions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add more operations.&lt;/li&gt;
&lt;li&gt;Add the option to inform any quantity of numbers as inputs.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: List of commands and flags</title>
      <link>https://zupit.github.io/docs-ritchie/docs/reference/list-of-commands-and-flags/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/reference/list-of-commands-and-flags/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;commands&#34;&gt;Commands&lt;/h2&gt;
&lt;h3 id=&#34;configuration-commands&#34;&gt;Configuration commands&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Commands&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Operation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rit init&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;initialize Ritchie before use&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rit upgrade&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;upgrade to the last Ritchie stable version&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rit tutorial&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;enable or disable the tutorial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rit &amp;ndash;version&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;return Ritchie currently installed version&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;repo-commands&#34;&gt;Repo commands&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Command&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Operation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rit add repo&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;add a new repository (to access repository formulas with Ritchie)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rit list repo&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;show a list with all your available repositories&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rit update repo&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;update all repositories  (to access new formulas from those repositories with Ritchie)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;set repo-priority&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;set a repository priority&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rit delete repo&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;delete a repository (to remove access to the repository formulas with Ritchie)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;formula-commands&#34;&gt;Formula commands&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&#34;text-align:left&#34;&gt;Command&lt;/th&gt;
      &lt;th style=&#34;text-align:left&#34;&gt;Operation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;rit create formula&lt;/td&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;
        &lt;p&gt;create a new formula from scratch&lt;/p&gt;
        &lt;p&gt;(as well as a new local repository if necessary)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;rit build formula&lt;/td&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;build a formula locally for test&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;rit build formula --watch&lt;/td&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;build a formula monitoring the code to update real time changes&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;


&lt;div class=&#34;alert alert-danger&#34; role=&#34;alert&#34;&gt;

The rit build formula command was deprecated from Ritchie&amp;rsquo;s version 2.5.0.
&lt;/div&gt;

&lt;h3 id=&#34;autocomplete-commands&#34;&gt;Autocomplete commands&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Commands&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Operation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rit completion zsh&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;add autocomplete via zsh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rit completion bash&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;add autocomplete via bash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rit completion fish&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;add autocomplete via fish&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rit completion powershell&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;add autocomplete via powershell&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;context-commands&#34;&gt;Context commands&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Commands&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Operation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rit set context&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;set a new context into the session&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rit show context&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;show the current session context&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rit delete context&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;delete a context from the session&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;credential-commands&#34;&gt;Credential commands&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Commands&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Operation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rit set credential&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;set new credentials for the context&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rit list credential&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;list all credential names and fields&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;workspace-commands&#34;&gt;Workspace commands&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Commands&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Operation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rit list workspace&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;list all formula&amp;rsquo;s workspaces&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rit delete workspace&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;delete a specific formula&amp;rsquo;s workspace&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;flags&#34;&gt;Flags&lt;/h2&gt;
&lt;h3 id=&#34;main-flags&#34;&gt;Main flags&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Flags&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Operation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;ndash;default&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;attribute the &lt;strong&gt;default&lt;/strong&gt; values configured on the formula.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;ndash;docker&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;run a formula using &lt;strong&gt;Docker&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;ndash;help&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;returns a list of executable commands for the user&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;ndash;local&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;run a formula &lt;strong&gt;locally&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;ndash;verbose&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;run a formula without log details&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Release Notes</title>
      <link>https://zupit.github.io/docs-ritchie/docs/reference/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/reference/release-notes/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: Roadmap</title>
      <link>https://zupit.github.io/docs-ritchie/docs/reference/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/reference/roadmap/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: Youtube</title>
      <link>https://zupit.github.io/docs-ritchie/docs/reference/youtube/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/reference/youtube/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: About Ritchie</title>
      <link>https://zupit.github.io/docs-ritchie/docs/about-ritchie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/about-ritchie/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;where-ritchie-came-from&#34;&gt;&lt;strong&gt;Where Ritchie came from?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Ritchie&amp;rsquo;s objective is to improve the developer’s experience, bringing them more autonomy, automating and simplifying the execution of commands that are widely used in the process of creating and developing digital products. Its name is a tribute to &lt;strong&gt;Dennis Ritchie&lt;/strong&gt;, one of the creators of Unix (predecessor of Linux) and also of the C language. One of the pioneer of the digital world as we know it today.&lt;/p&gt;
&lt;p&gt;Despite the number of multidisciplinary teams in the market, a great challenge still is to reduce the dependence that developers have on inputs coming from the infrastructure and operations teams. &lt;strong&gt;DevOps&lt;/strong&gt; did a lot to remedy this bottleneck, but it did not completely eliminate the dependency between areas.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

With that in mind, we bring a tool to the community that promotes a &lt;strong&gt;NoOps&lt;/strong&gt; movement, a solution that automates repetitive operations and streamlines processes (also known as toil) that are often hampered in the infrastructure. This will give developers the ability to perform operations that were exclusively the infrastructure&amp;rsquo;s domain.
&lt;/div&gt;

&lt;p&gt;In that way, professionals - on all fronts - gain time to work on more complex and relevant tasks to generate value for their project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/rit-demo-deploy-project%20%281%29.gif&#34; alt=&#34;Demonstration of a formula following the NoOps mindset&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-makes-ritchie-different&#34;&gt;&lt;strong&gt;What makes Ritchie different?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Because it is a CLI tool, Ritchie seeks to improve the operational &lt;strong&gt;developers&#39;&lt;/strong&gt; &lt;strong&gt;experience and brings beneficial such as:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simplify repetitive and easy-to-execute tasks&lt;/li&gt;
&lt;li&gt;Reduce the rework&lt;/li&gt;
&lt;li&gt;Promote more time for the development team to focus on their deliveries.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, instead of writing down on the command lines which parameters and / or arguments the user needs to inform, we do the opposite: Ritchie presents the available options and goes, line by line, asking for the information needed for the command to work, in an interactive way.&lt;/p&gt;
&lt;p&gt;In the example below, we have the execution of a scaffold command with the coffee formula. As the user signals which formula he wants to use, the system automatically passes, line by line, asking which specific parameters must be considered to perform the desired action.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/rit-scaffold-generate-coffe-go.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Glossary</title>
      <link>https://zupit.github.io/docs-ritchie/docs/glossary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/glossary/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;context&#34;&gt;Context&lt;/h2&gt;
&lt;p&gt;On Ritchie, context means the environment you&amp;rsquo;re working with. Each context will have its credentials, that&amp;rsquo;s meant to be configured once you start using the CLI. Each context will have its own credentials, which will be needed to execute specific formulas.&lt;/p&gt;
&lt;h2 id=&#34;cli&#34;&gt;CLI&lt;/h2&gt;
&lt;p&gt;It refers to a command line interface, which is a program that processes commands in a software or any computing program only through text.&lt;/p&gt;
&lt;h2 id=&#34;credential&#34;&gt;Credential&lt;/h2&gt;
&lt;p&gt;It refers to reusable input parameters that you can use in Ritchie (example: access data for any tool or api).&lt;/p&gt;
&lt;h2 id=&#34;formula&#34;&gt;Formula&lt;/h2&gt;
&lt;p&gt;On Ritchie&amp;rsquo;s context, a formula is a script that can be executed through a command line once it has been adapted to Ritchie structure. It allows the user to execute it locally or through Docker and with its necessary dependencies.&lt;/p&gt;
&lt;h2 id=&#34;json&#34;&gt;JSON&lt;/h2&gt;
&lt;p&gt;It refers to JavaScript Object Notation (JSON), that is a standard text based &lt;strong&gt;format&lt;/strong&gt; used to structure data created with Java programming language.&lt;/p&gt;
&lt;h2 id=&#34;tree&#34;&gt;Tree&lt;/h2&gt;
&lt;p&gt;It refers to a group of commands organized on Ritchie. You can click on the next link to understand more about &lt;a href=&#34;key-concepts.md#command-tree&#34;&gt;&lt;strong&gt;Tree&amp;rsquo;s structure&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;repository&#34;&gt;Repository&lt;/h2&gt;
&lt;p&gt;A storage place you can organize features, commands or any files and/or files necessary to use a tool. On Ritchie, there are three repositories created to manage formulas, the server and contributions we receive.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ZupIT/ritchie-cli&#34;&gt;&lt;strong&gt;ritchie-cli&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ZupIT/ritchie-formulas&#34;&gt;&lt;strong&gt;ritchie-formulas&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;standard-streams&#34;&gt;Standard Streams&lt;/h2&gt;
&lt;p&gt;It refers to a communication channel that allows input and output interconnection between a computer program and its environment.&lt;/p&gt;
&lt;p&gt;On Ritchie, we use the standard input (stdin) to execute commands automatically.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: FAQ</title>
      <link>https://zupit.github.io/docs-ritchie/docs/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/faq/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;about-ritchie&#34;&gt;About Ritchie&lt;/h2&gt;
&lt;h3 id=&#34;what-is-ritchie&#34;&gt;What is Ritchie?&lt;/h3&gt;
&lt;p&gt;Ritchie is an &lt;strong&gt;open source framework&lt;/strong&gt; that creates and tweaks a CLI for your team. It allows you to easily create, build and share formulas. Check out more here &lt;a href=&#34;about-ritchie.md&#34;&gt;&lt;strong&gt;about Ritchie&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;what-does-ritchie-do&#34;&gt;What does Ritchie do?&lt;/h3&gt;
&lt;p&gt;Ritchie creates automation commands to improve the operational &lt;strong&gt;developers&#39;&lt;/strong&gt; &lt;strong&gt;experience and brings beneficial such as:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simplify repetitive and easy-to-execute tasks&lt;/li&gt;
&lt;li&gt;Reduce the rework&lt;/li&gt;
&lt;li&gt;Promote more time for the development team to focus on their deliveries.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;installation-and-use&#34;&gt;Installation and Use&lt;/h2&gt;
&lt;h3 id=&#34;how-to-install-ritchie&#34;&gt;How to install Ritchie?&lt;/h3&gt;
&lt;p&gt;You can follow the installation step by step according do the operational system you&amp;rsquo;re using. Check out more in &lt;a href=&#34;getting-started/installation/&#34;&gt;&lt;strong&gt;installation section&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;how-to-create-a-new-formula-on-ritchie&#34;&gt;How to create a new formula on Ritchie?&lt;/h3&gt;
&lt;p&gt;Using the command &lt;code&gt;rit create formula&lt;/code&gt; , you can create formulas using any programming language. Check out more in &lt;a href=&#34;tutorials/formulas/how-to-create-formulas.md&#34;&gt;&lt;strong&gt;create a formula section&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;como-executar-fórmulas&#34;&gt;Como executar fórmulas?&lt;/h3&gt;
&lt;p&gt;You can execute your formulas locally or through Docker. Check out more in &lt;a href=&#34;tutorials/formulas/how-to-create-formulas.md&#34;&gt;&lt;strong&gt;create a formula section&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;how-to-build-fórmulas-on-ritchie&#34;&gt;How to build fórmulas on Ritchie?&lt;/h3&gt;
&lt;p&gt;You can build a formula by running the &lt;code&gt;$ rit build formula&lt;/code&gt; command. Check out more in &lt;a href=&#34;tutorials/formulas/build-a-formula.md&#34;&gt;&lt;strong&gt;build a formula section.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;how-to-publish-formulas-on-ritchie&#34;&gt;How to publish formulas on Ritchie?&lt;/h3&gt;
&lt;p&gt;You can publish a formula by creating a Github&amp;rsquo;s repository and adding a release version of this formula. Check out more in &lt;a href=&#34;tutorials/formulas/publish-a-formula.md&#34;&gt;&lt;strong&gt;publish a formula section&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;community&#34;&gt;Community&lt;/h2&gt;
&lt;h3 id=&#34;how-to-submit-my-formula-on-communitys-repo&#34;&gt;How to submit my formula on community&amp;rsquo;s repo?&lt;/h3&gt;
&lt;p&gt;You just have to open a pull request on &lt;a href=&#34;https://github.com/ZupIT/ritchie-formulas&#34;&gt;&lt;strong&gt;ritchie-formula&amp;rsquo;s repository&lt;/strong&gt; &lt;/a&gt; with your formula suggestion.&lt;/p&gt;
&lt;h3 id=&#34;how-to-contribute&#34;&gt;How to contribute?&lt;/h3&gt;
&lt;p&gt;You can contribute with improvements, suggestions or reporting bugs on&lt;a href=&#34;https://github.com/ZupIT/ritchie-cli&#34;&gt; &lt;strong&gt;ritchie-cli&amp;rsquo;s repository.&lt;/strong&gt; &lt;/a&gt;That&amp;rsquo;s the process you should follow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fork the repository&lt;/li&gt;
&lt;li&gt;Create a branch: &lt;code&gt;git checkout -b &amp;lt;branch_name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Implement your idea&lt;/li&gt;
&lt;li&gt;Commit your implementation: &lt;code&gt;git commit -m &#39;&amp;lt;commit_message&amp;gt;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Push your branch: &lt;code&gt;git push origin &amp;lt;project_name&amp;gt;/&amp;lt;location&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open a pull request on the &lt;code&gt;master&lt;/code&gt; branch for analysis.&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
  </channel>
</rss>
