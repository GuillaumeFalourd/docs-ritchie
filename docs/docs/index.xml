<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ritchie – Docs</title>
    <link>https://zupit.github.io/docs-ritchie/docs/</link>
    <description>Recent content in Docs on Ritchie</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://zupit.github.io/docs-ritchie/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Overview</title>
      <link>https://zupit.github.io/docs-ritchie/docs/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/overview/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;what-is-ritchie&#34;&gt;What is Ritchie?&lt;/h2&gt;
&lt;p&gt;Ritchie is an &lt;strong&gt;automation tool&lt;/strong&gt; which allows to &lt;strong&gt;create&lt;/strong&gt;, &lt;strong&gt;store&lt;/strong&gt; and &lt;strong&gt;share&lt;/strong&gt; automation efficiently and securely with a team or with the whole community.&lt;/p&gt;
&lt;h2 id=&#34;what-does-ritchie-do&#34;&gt;What does Ritchie do?&lt;/h2&gt;
&lt;p&gt;The tool allows you to create formulas that, in other terms, represent programs and/or commands that will facilitate your daily programming work. Ritchie works as a single formulas repository.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/PtKFco2pIqs&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;Ritchie is a &lt;strong&gt;cross-plataform&lt;/strong&gt; CLI. For more information on how to install, just choose your operating system below:&lt;/p&gt;
&lt;h2 id=&#34;programming-languages&#34;&gt;&lt;strong&gt;Programming Languages&lt;/strong&gt;&lt;/h2&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

Ritchie has been developed using the &lt;strong&gt;Golang&lt;/strong&gt; language.
&lt;/div&gt;

&lt;p&gt;However, formulas can be written using &lt;strong&gt;any programming language&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/screenshot-2020-05-08-at-17.54.34%20%281%29.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;tools&#34;&gt;Tools&lt;/h2&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

Ritchie works with &lt;strong&gt;any tool&lt;/strong&gt; you could use for automations.
&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/screenshot-2020-05-08-at-17.54.49.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-does-ritchie-work&#34;&gt;&lt;strong&gt;How does Ritchie work?&lt;/strong&gt;&lt;/h2&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

The tool allows you to create &lt;strong&gt;formulas&lt;/strong&gt; that, in other terms, represent programs and /or commands that will facilitate the daily programming work.
&lt;/div&gt;

&lt;p&gt;In general, the common process for executing a project is to create a whole previous infrastructure, defining a language in the system that will be programmed, downloading dependencies and defining the rules that should be used for the project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/en-sem-ritchie.png&#34; alt=&#34;WITHOUT Ritchie&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;With Ritchie&lt;/strong&gt;, it&amp;rsquo;s possible to define this configuration using a formula, creating this infrastructure directly by a command line, which in this case will delivered all the structure of the project with all files automatically configured. That helps on avoiding an important time spent on infrastructure and configurations.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/en-com-ritchie.png&#34; alt=&#34;WITH Ritchie&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Key Concepts</title>
      <link>https://zupit.github.io/docs-ritchie/docs/key-concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/key-concepts/</guid>
      <description>
        
        
        &lt;hr&gt;


&lt;div class=&#34;alert alert-danger&#34; role=&#34;alert&#34;&gt;

Let&amp;rsquo;s assume you&amp;rsquo;re familiar with &lt;strong&gt;Standard Streams,&lt;/strong&gt; &lt;strong&gt;CLI&lt;/strong&gt;, &lt;strong&gt;JSON&lt;/strong&gt; format and &lt;strong&gt;automations&lt;/strong&gt; concepts. If you want to know more about it, check out our &lt;a href=&#34;glossary.md&#34;&gt;&lt;strong&gt;glossary&lt;/strong&gt;&lt;/a&gt;.
&lt;/div&gt;

&lt;h2 id=&#34;formulas&#34;&gt;Formulas&lt;/h2&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

&lt;strong&gt;Formulas&lt;/strong&gt; are nothing more than &lt;strong&gt;automations&lt;/strong&gt;. That is, they are codes called through the command lines to perform some operation.
&lt;/div&gt;

&lt;h2 id=&#34;formulas-on-demand&#34;&gt;&lt;strong&gt;Formulas o&lt;/strong&gt;n demand&lt;/h2&gt;
&lt;p&gt;The first time the user executes the command associated with a formula on the terminal, the executable file for that formula is downloaded according to the operating system installed on his computer.&lt;/p&gt;
&lt;p&gt;The config.json file is downloaded at the same time, with the &lt;strong&gt;formula input parameters&lt;/strong&gt;, necessary for the code implemented in the executable file to be executed.&lt;/p&gt;
&lt;p&gt;These input parameters will be informed by the user:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;after he types the command in the terminal (if via &lt;a href=&#34;getting-started/commands/prompt.md&#34;&gt;prompt&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;before typing the command in the terminal (if via &lt;a href=&#34;getting-started/commands/stdin.md&#34;&gt;stdin&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;hellip; before actually executing the formula.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/fluxo-formulas%20%283%29.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;execution-of-a-formula-with-prompt&#34;&gt;Execution of a formula (with prompt)&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/rit-scaffold-generate-coffee-go.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;rit scaffold generate coffee-go&lt;/code&gt;&lt;/strong&gt; is an executable command associated with a formula in the CLI&amp;rsquo;s tree.&lt;/p&gt;
&lt;p&gt;As it was the first time that the command was executed, it is possible to observe that Ritchie downloaded a config file and the formula&amp;rsquo;s binary in sequence.&lt;/p&gt;
&lt;p&gt;After downloading the files, Ritchie asked the user for some datas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;type of coffee&lt;/li&gt;
&lt;li&gt;delivery&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those datas are the &lt;strong&gt;input&lt;/strong&gt; &lt;strong&gt;parameters&lt;/strong&gt; of the formula.&lt;/p&gt;
&lt;p&gt;Once these parameters were informed, the formula was successfully executed (according to what the logs presented).&lt;/p&gt;
&lt;h2 id=&#34;command-tree&#34;&gt;Command Tree&lt;/h2&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;Commands used in Ritchie are grouped according to a &lt;strong&gt;tree&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It is important to know this concept in order to actually understand the structure of the product.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;In the case of Ritchie, the &lt;strong&gt;Cobra&lt;/strong&gt; (a Golang library) pattern was followed using the following logic of building core commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                             **RIT + VERB + NOUN**
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To allow more options and freedom for users, it is also allowed to follow the pattern below in the construction of formula commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                    **RIT + GROUP + VERB + NOUN**
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The app name is Ritchie, so we use the name &lt;strong&gt;rit&lt;/strong&gt; to start our command tree.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/arvore-rit%20%281%29.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;rit&lt;/strong&gt; command is therefore our parent command, or &lt;strong&gt;root&lt;/strong&gt;. It is not executable (it means that it will not start any operations if you use it alone in the terminal). It is necessary to use executable sub-commands (which are child commands, or branches, of the rit command) in order to start any process.&lt;/p&gt;
&lt;p&gt;The executable commands in Ritchie are the commands located at the last level of the tree.&lt;/p&gt;
&lt;p&gt;For example, in the image above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;rit set context&lt;/strong&gt; command is executable, as it is at the last level of the tree.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;rit kafka create&lt;/strong&gt; command is not executable as there is an executable &lt;strong&gt;topic&lt;/strong&gt; subcommand, at the last level of the tree.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This command tree concept is the &lt;strong&gt;core&lt;/strong&gt; of Ritchie&amp;rsquo;s structure. All commands and sub-commands are mapped into a json that is updated or created when you download or update the CLI on your computer.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Choosing a version</title>
      <link>https://zupit.github.io/docs-ritchie/docs/getting-started/choosing-a-version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/getting-started/choosing-a-version/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Before you begin to use Ritchie, it is necessary to choose one of available versions :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Single version&lt;/strong&gt;: suitable for freelance professionals;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Team version&lt;/strong&gt;: suitable for teams or professionals of a corporation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both versions were created to meet the different needs of infrastructure analysts, SREs, architects or software engineers.&lt;/p&gt;
&lt;p&gt;In practice, the main difference between the versions is in the use (or not) of a server for storing the &lt;strong&gt;formulas&lt;/strong&gt;, mandatory for those who use the Team Version, since, in the case of those who use Ritchie for corporate projects, it is necessary to ensure security information to protect sensitive data.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/team-and-single.png&#34; alt=&#34;Versions single and team architecture &#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;comparing-versions&#34;&gt;&lt;strong&gt;Comparing versions&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/captura_de_tela_2020-06-09_as_09.55.22.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;single-version&#34;&gt;&lt;strong&gt;Single version&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The main characteristics of this version are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Access to community formulas.&lt;/li&gt;
&lt;li&gt;The possibility to test new formulas on a local repository.&lt;/li&gt;
&lt;li&gt;Encrypted information on the local machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;repositories&#34;&gt;Repositories&lt;/h3&gt;
&lt;p&gt;If you choose the &lt;strong&gt;Single Version,&lt;/strong&gt; you are able to access two repositories:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ZupIT/ritchie-cli&#34;&gt;&lt;strong&gt;ritchie-cli&lt;/strong&gt;&lt;/a&gt;: this repository contains the core of the tool.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ZupIT/ritchie-formulas&#34;&gt;&lt;strong&gt;ritchie-formulas&lt;/strong&gt;&lt;/a&gt;: this repository contains the formulas shared with the community that every Ritchie user can access, update and execute through the terminal.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/single-ritchie.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;team-version&#34;&gt;Team version&lt;/h2&gt;
&lt;p&gt;The main characteristics of this version are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Access to community formulas as well as team formulas;&lt;/li&gt;
&lt;li&gt;The possibility to test new formulas on a local repository;&lt;/li&gt;
&lt;li&gt;Encrypted information on the server session.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;repositories-1&#34;&gt;Repositories&lt;/h3&gt;
&lt;p&gt;With the &lt;strong&gt;Team Version&lt;/strong&gt; is possible to access more repositories:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ZupIT/ritchie-cli&#34;&gt;&lt;strong&gt;ritchie-cli&lt;/strong&gt;&lt;/a&gt;: this repository contains the core of the tool.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ZupIT/ritchie-formulas&#34;&gt;&lt;strong&gt;ritchie-formulas&lt;/strong&gt;&lt;/a&gt;: this repository contains the formulas shared with the community that every Ritchie user can access, update and execute through the terminal.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ZupIT/ritchie-server&#34;&gt;&lt;strong&gt;ritchie-server&lt;/strong&gt;&lt;/a&gt;: This repository contains the integrations with the platforms &lt;a href=&#34;https://www.keycloak.org/&#34;&gt;Keycloak&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://www.vaultproject.io/&#34;&gt;Vault&lt;/a&gt;, used to create the session and store datas securely.&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

It is also possible to store your team specific formulas in &lt;strong&gt;other repositories&lt;/strong&gt;, and access them through &lt;a href=&#34;https://docs.ritchiecli.io/software-architecture-1/security#login-command&#34;&gt;the login command&lt;/a&gt;.
&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/team-ritchie-white.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Linux</title>
      <link>https://zupit.github.io/docs-ritchie/docs/getting-started/installing-ritchie/linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/getting-started/installing-ritchie/linux/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;how-does-it-work&#34;&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;To install the &lt;strong&gt;latest version of Ritchie&lt;/strong&gt;, you just have to execute the command below at your terminal according to the version you want to use.&lt;/p&gt;
&lt;h3 id=&#34;installing-team-version&#34;&gt;Installing Team Version&lt;/h3&gt;
&lt;p&gt;The command used to install Ritchie Team at your terminal is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -fsSL https://commons-repo.ritchiecli.io/install_legacy.sh | bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;installing-single-version&#34;&gt;Installing Single Version&lt;/h3&gt;
&lt;p&gt;The command used to install Ritchie Single at your terminal is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;curl -fsSL https://commons-repo.ritchiecli.io/install_single_legacy.sh | bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

If you prefer, you also can follow with&lt;a href=&#34;manual-installation.md&#34;&gt; &lt;strong&gt;manual installation&lt;/strong&gt;.&lt;/a&gt;
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Windows</title>
      <link>https://zupit.github.io/docs-ritchie/docs/getting-started/installing-ritchie/windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/getting-started/installing-ritchie/windows/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;how-does-it-work&#34;&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;To install &lt;strong&gt;the latest version of Ritchie (1.0.0-legacy)&lt;/strong&gt; on Windows, you just have to click on the links available for each version.&lt;/p&gt;
&lt;p&gt;However, it is important to keep in mind &lt;strong&gt;there are some requirements&lt;/strong&gt; before starting the installation on Windows.&lt;/p&gt;
&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;
&lt;p&gt;If you wanna use efficiently Ritchie on Windows, our recommendation is to install the following programs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Powershell&lt;/li&gt;
&lt;li&gt;Cygwin&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;&lt;strong&gt;Cygwin Configurations :&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You need to install the &lt;strong&gt;make&lt;/strong&gt; package inside Cygwin, &lt;a href=&#34;https://stackoverflow.com/questions/17710209/how-to-run-make-from-cygwin-environment?rq=1#:~:text=Run%20the%20Cygwin%20installation%2Fconfiguration,Development%22%20or%20something%20similar%29.&#34;&gt;as suggested here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You&amp;rsquo;ll also have to configure the file &lt;strong&gt;/etc/nsswitch.conf&lt;/strong&gt; inside the folder (/ProgramFiles) and add this non commented line:&lt;strong&gt;&lt;code&gt;db_home: /%H&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;h3 id=&#34;instalando-versão-team&#34;&gt;Instalando Versão Team&lt;/h3&gt;
&lt;p&gt;Click on the following link to&lt;a href=&#34;https://commons-repo.ritchiecli.io/1.0.0-legacy/windows/team/rit.exe&#34;&gt; install Ritchie Team&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;instalando-versão-single&#34;&gt;Instalando Versão Single&lt;/h3&gt;
&lt;p&gt;Click on the following link to &lt;a href=&#34;https://commons-repo.ritchiecli.io/1.0.0-legacy/windows/single/rit.exe&#34;&gt;install Ritchie Single.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you prefer, you also can follow with&lt;a href=&#34;manual-installation.md&#34;&gt; &lt;strong&gt;manual installation&lt;/strong&gt;.&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;use-ritchie-on-windows&#34;&gt;Use Ritchie on Windows&lt;/h2&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;The PATH to use Ritchie on Windows &lt;strong&gt;IS NOT&lt;/strong&gt; configured when you download it.&lt;/p&gt;
&lt;p&gt;As long as it hasn&amp;rsquo;t been configured, the user will have to go inside the folder where the &lt;strong&gt;rit.exe file&lt;/strong&gt; has been downloaded to execute Ritchie through this file. Example : &lt;strong&gt;&lt;code&gt;rit.exe init&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;You&amp;rsquo;ll find a guide about how to set a path here : &lt;a href=&#34;https://www.java.com/en/download/help/path.xml&#34;&gt;&lt;strong&gt;How do I set or change the PATH system variable?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Macos</title>
      <link>https://zupit.github.io/docs-ritchie/docs/getting-started/installing-ritchie/macos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/getting-started/installing-ritchie/macos/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;how-does-it-work&#34;&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;To install the &lt;strong&gt;latest version of Ritchie&lt;/strong&gt; for MacOS, you just have to execute the command below on your terminal according to the version you want to work with.&lt;/p&gt;
&lt;p&gt;However, it is important to keep in mind &lt;strong&gt;there are some requirements&lt;/strong&gt; before starting the installation on Windows.&lt;/p&gt;
&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;
&lt;p&gt;If you wanna use efficiently Ritchie on MacOs, our recommendation is to have the following elements configured:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;strong&gt;make&lt;/strong&gt; command (&lt;a href=&#34;https://stackoverflow.com/questions/1469994/using-make-on-os-x&#34;&gt;Using &amp;ldquo;make&amp;rdquo; on macOS&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;md5sum&lt;/strong&gt; tools&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;Install &lt;strong&gt;md5sum&lt;/strong&gt; with &lt;em&gt;&lt;strong&gt;Homebrew&lt;/strong&gt;&lt;/em&gt; : &lt;code&gt;brew install md5sha1sum&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Install &lt;strong&gt;md5sum&lt;/strong&gt; with &lt;em&gt;&lt;strong&gt;MacPorts&lt;/strong&gt;&lt;/em&gt; : &lt;code&gt;sudo port install md5sha1sum&lt;/code&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h3 id=&#34;installing-team-version&#34;&gt;Installing Team Version&lt;/h3&gt;
&lt;p&gt;The command used to install Ritchie Team at your terminal is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -fsSL https://commons-repo.ritchiecli.io/install_legacy.sh | bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;installing-single-version&#34;&gt;Installing Single Version&lt;/h3&gt;
&lt;p&gt;The command used to install Ritchie Single at your terminal is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;curl -fsSL https://commons-repo.ritchiecli.io/install_single_legacy.sh | bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

If you prefer, you also can follow with&lt;a href=&#34;manual-installation.md&#34;&gt; &lt;strong&gt;manual installation&lt;/strong&gt;.&lt;/a&gt;
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Manual Installation</title>
      <link>https://zupit.github.io/docs-ritchie/docs/getting-started/installing-ritchie/manual-installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/getting-started/installing-ritchie/manual-installation/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;how-does-it-work&#34;&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;The 1.0.0 version is deprecated, it is still possible to use it, but the team is now focussing on new features starting on the version 2.0.0.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

The latest and most stable release of this Ritchie version is the &lt;strong&gt;&lt;code&gt;1.0.0-legacy&lt;/code&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;h3 id=&#34;heading&#34;&gt;&lt;/h3&gt;
&lt;h3 id=&#34;installation-for-mac&#34;&gt;&lt;strong&gt;Installation for MAC&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;team-version-url&#34;&gt;&lt;strong&gt;Team Version URL&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;https://commons-repo.ritchiecli.io/1.0.0-legacy/darwin/team/rit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;single-version-url&#34;&gt;Single Version URL&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;https://commons-repo.ritchiecli.io/1.0.0-legacy/darwin/single/rit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;installation-for-linux&#34;&gt;&lt;strong&gt;Installation for Linux&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;team-version-url-1&#34;&gt;&lt;strong&gt;Team Version URL&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;https://commons-repo.ritchiecli.io/1.0.0-legacy/linux/team/rit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Single Version URL&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;https://commons-repo.ritchiecli.io/1.0.0-legacy/linux/single/rit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;heading-1&#34;&gt;&lt;/h3&gt;
&lt;h3 id=&#34;installation-for-windows&#34;&gt;&lt;strong&gt;Installation for Windows&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;team-version-url-2&#34;&gt;&lt;strong&gt;Team Version URL&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;https://commons-repo.ritchiecli.io/1.0.0-legacy/windows/team/rit.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Single Version URL&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;https://commons-repo.ritchiecli.io/1.0.0-legacy/windows/single/rit.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;manual-settings&#34;&gt;&lt;strong&gt;Manual settings&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;folder-creation&#34;&gt;&lt;strong&gt;Folder creation&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;→&lt;/strong&gt; Create a folder  &lt;code&gt;$HOME/.rit/bin&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Comando Linux / MacOs

mkdir -p $HOME/.rit/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;→ Copy the binary to the folder above.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Comandos Linux / MacOs

cd $HOME/.rit/bin 
cp $HOME/Downloads/rit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;→ Permission to execute.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Comando Linux / MacOs : 

chmod +x rit
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;configure-the-bashrc-ou-etcprofile-or-zshrc-linux--macos&#34;&gt;&lt;strong&gt;Configure the .bashrc ou /etc/profile or .zshrc (Linux / MacOS)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;To ZSH, define a new PATH by copying the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;export RIT_PATH=$HOME/.rit
PATH=$RIT_PATH/bin:$PATH
rit completion zsh &amp;gt; ~/.rit_completion
source ~/.rit_completion
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To Bash, define a new PATH by copying the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;export RIT_PATH=$HOME/.rit
PATH=$RIT_PATH/bin:$PATH
rit completion bash &amp;gt; ~/.rit_completion
source ~/.rit_completion
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;setting-environment-variables-windows&#34;&gt;Setting environment variables (Windows)&lt;/h3&gt;
&lt;p&gt;For this operating system, you need to call rit on the terminal directly from rit.exe (&lt;strong&gt;rit.exe login&lt;/strong&gt; command for example)&lt;/p&gt;
&lt;p&gt;It is possible (and suggested) to create an environment variable for rit to facilitate the use of the CLI.&lt;/p&gt;
&lt;p&gt;Here are some articles explaining how to add an environment variable in Windows.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://professor-falken.com/pt/windows/como-configurar-la-ruta-y-las-variables-de-entorno-en-windows-10/&#34;&gt;Through interface&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://devcontent.com.br/artigos/windows/o-que-sao-como-alterar-criar-excluir-variaveis-de-ambiente&#34;&gt;Through terminal&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Initialization</title>
      <link>https://zupit.github.io/docs-ritchie/docs/getting-started/initialization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/getting-started/initialization/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;When you finish your&lt;a href=&#34;https://docs.ritchiecli.io/getting-started/installation&#34;&gt; &lt;strong&gt;installing process&lt;/strong&gt;&lt;/a&gt;, it&amp;rsquo;s necessary make the Ritchie&amp;rsquo;s initialization and this procedure varies according to the &lt;a href=&#34;https://docs.ritchiecli.io/getting-started/choosing-a-version&#34;&gt;&lt;strong&gt;version&lt;/strong&gt; &lt;/a&gt;you&amp;rsquo;re using.&lt;/p&gt;
&lt;p&gt;The command to execute the initialization is:&lt;strong&gt;&lt;code&gt;$ rit init&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;single-version&#34;&gt;Single Version&lt;/h2&gt;
&lt;p&gt;On this version, it will be necessary to inform :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;strong&gt;passphrase&lt;/strong&gt; that will be used to encrypt datas locally with Ritchie.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;➜ rit init
Define a passphrase for your machine: **
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;team-version&#34;&gt;Team Version&lt;/h2&gt;
&lt;p&gt;On this version, it will be necessary to inform  :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;strong&gt;organization&lt;/strong&gt; which the user plan to access.&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;server URL&lt;/strong&gt; used by this organization.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

You can&amp;rsquo;t use the &lt;strong&gt;Team&lt;/strong&gt; version &lt;strong&gt;without having a configured server&lt;/strong&gt;.
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;if the user want to perform login&lt;/strong&gt; to the organization now, or later using the**&lt;code&gt;rit login&lt;/code&gt;** command.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;➜ rit init
Enter your organization:  zup
URL of the server [http(s)://host]:  https://ritchie-server.zup.io
Use the arrow keys to navigate: ↓ ↑ → ←
You can perform login to your organization now, or later using [rit login] command. Perform now?
  ▸ no
    yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;login-command&#34;&gt;Login Command&lt;/h3&gt;
&lt;p&gt;On the &lt;strong&gt;Team version&lt;/strong&gt;, the &lt;strong&gt;&lt;code&gt;rit login&lt;/code&gt;&lt;/strong&gt; command allows to create a session to store datas that can be reused in different formulas.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;➜ rit login
Enter your username:  dennis.ritchie
Enter your password:  **
Organization: org
Login successfully!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command creates a session using &lt;em&gt;Keycloak&lt;/em&gt; after the user has informed his organization with his datas (email &amp;amp; password). In this session, the user can, for example, define his credentials for various tools (github, aws, etc &amp;hellip;).&lt;/p&gt;
&lt;p&gt;In this case, the credentials are stored in the &lt;em&gt;Vault&lt;/em&gt;. This allows that if the user logs in to Ritchie with his data, on someone else&amp;rsquo;s machine, he will be able to fetch these credentials from the &lt;em&gt;Vault&lt;/em&gt;, despite having configured them on his local machine.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

The command &lt;strong&gt;&lt;code&gt;rit logout&lt;/code&gt;&lt;/strong&gt; allows the user to end the current session.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Via Prompt</title>
      <link>https://zupit.github.io/docs-ritchie/docs/getting-started/executing-commands/via-prompt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/getting-started/executing-commands/via-prompt/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;commands-structure&#34;&gt;Commands structure&lt;/h2&gt;
&lt;p&gt;Ritchie core commands are executed following this pattern:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;RIT&lt;/code&gt;&lt;/strong&gt; &lt;code&gt;+&lt;/code&gt; &lt;strong&gt;&lt;code&gt;VERBO&lt;/code&gt;&lt;/strong&gt; &lt;code&gt;+&lt;/code&gt; &lt;strong&gt;&lt;code&gt;SUBSTANTIVO&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;formulas-structure&#34;&gt;Formulas structure&lt;/h2&gt;
&lt;p&gt;Formula commands are executed following this pattern:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;RIT&lt;/code&gt;&lt;/strong&gt; &lt;code&gt;+&lt;/code&gt; &lt;strong&gt;&lt;code&gt;GRUPO&lt;/code&gt;&lt;/strong&gt;  &lt;code&gt;+&lt;/code&gt; &lt;strong&gt;&lt;code&gt;VERBO&lt;/code&gt;&lt;/strong&gt; &lt;code&gt;+&lt;/code&gt; &lt;strong&gt;&lt;code&gt;SUBSTANTIVO&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you want to see more formulas, check the &lt;a href=&#34;https://github.com/ZupIT/ritchie-formulas&#34;&gt;&lt;strong&gt;github community repository&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;flags&#34;&gt;Flags&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Flags&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Operation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rit &amp;ndash;help&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Help for any Ritchie command&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rit &amp;ndash;version&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Display Ritchie current version&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;➜ rit --help

A CLI that developers can build and operate
your applications without help from the infra staff.
Complete documentation is available at https://github.com/ZupIT/ritchie-cli

core commands:
  add         add objects
  completion  Add autocomplete for terminal
  clean       clean objects
  create      Create objects
  delete      Delete objects
  list        list objects
  set         Set objects
  show        Show objects
  update      update objects

commons commands:
  aws         Apply Aws objects
  docker      Manipulate docker objects
  github      Manipulate GitHub objects
  k8s         Manipulate k8s objects
  kafka       Kafka commands
  scaffold    Manipulate scaffold objects

Other Commands:

Options:
  -v, --version: version for rit

Usage:
  rit [flags] [options]

Use &amp;#34;rit &amp;lt;command&amp;gt; --help&amp;#34; for more information about a given command.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;➜ rit --version

rit version 1.0.0-beta.7 (single)
  Build date: 05/20/20_13:29
  Built with: go1.14.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;core-commands&#34;&gt;Core commands&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&#34;text-align:left&#34;&gt;Commands&lt;/th&gt;
      &lt;th style=&#34;text-align:left&#34;&gt;Operation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://docs.ritchiecli.io/getting-started/commands/using-first-commands/repositories#add-other-repositories&#34;&gt;rit add repo&lt;/a&gt;
      &lt;/td&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;add a new repository tree
        &lt;br /&gt;(to access repository formulas with Ritchie)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://docs.ritchiecli.io/use-cases/creating-formulas#step-4-test-the-formula-new-implementation&#34;&gt;rit build formula&lt;/a&gt;
      &lt;/td&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;build a formula for test (also work using the &lt;b&gt;--watch&lt;/b&gt; flag)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://docs.ritchiecli.io/getting-started/commands/using-first-commands/repositories#clean-a-repository&#34;&gt;rit clean repo&lt;/a&gt;
      &lt;/td&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;clean the cache of a repository&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;rit completion zsh&lt;/td&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;add autocomplete via zsh&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;rit completion bash&lt;/td&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;add autocomplete via bash&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;../../use-cases/creating-formulas.md#step-1-execute-the-formula&#34;&gt;rit create formula&lt;/a&gt;
      &lt;/td&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;
        &lt;p&gt;create a new formula from scratch&lt;/p&gt;
        &lt;p&gt;(as well as a new local repository for test)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;rit create user&lt;/td&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;create a new user (with &lt;em&gt;default&lt;/em&gt; role) into the organisation
        &lt;br
        /&gt;(only available for &lt;em&gt;admin&lt;/em&gt; role on the &lt;b&gt;Team version&lt;/b&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://docs.ritchiecli.io/getting-started/commands/using-first-commands/repositories#delete-a-repository&#34;&gt;rit delete repo&lt;/a&gt;
      &lt;/td&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;delete a repository tree
        &lt;br /&gt;(to remove access to the repository formulas with Ritchie)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;rit delete user&lt;/td&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;
        &lt;p&gt;delete a user from the organisation&lt;/p&gt;
        &lt;p&gt;(only available for &lt;em&gt;admin&lt;/em&gt; role on the &lt;b&gt;Team version&lt;/b&gt;)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://docs.ritchiecli.io/getting-started/commands/using-first-commands/context&#34;&gt;rit delete context&lt;/a&gt;
      &lt;/td&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;delete a context form the session&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://docs.ritchiecli.io/developer/formulas/repository#delete-a-repository&#34;&gt;rit list repo&lt;/a&gt;
      &lt;/td&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;list all repository that Ritchie has access on the computer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;../initialization.md#login-command&#34;&gt;rit login&lt;/a&gt;
      &lt;/td&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;user login to a team (creating a session)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;../initialization.md#login-command&#34;&gt;rit logout&lt;/a&gt;
      &lt;/td&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;user logout from session&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://docs.ritchiecli.io/getting-started/commands/using-first-commands/credentials#set-credentials&#34;&gt;rit set credential&lt;/a&gt;
      &lt;/td&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;set new credentials into the session&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://docs.ritchiecli.io/getting-started/commands/using-first-commands/context&#34;&gt;rit set context&lt;/a&gt;
      &lt;/td&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;set a new context into the session&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;rit set server&lt;/td&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;set the team server URL (&lt;b&gt;Team version&lt;/b&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://docs.ritchiecli.io/getting-started/commands/using-first-commands/context&#34;&gt;rit show context&lt;/a&gt;
      &lt;/td&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;show the current session context&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://docs.ritchiecli.io/getting-started/commands/using-first-commands/repositories#update-a-repository&#34;&gt;rit update repo&lt;/a&gt;
      &lt;/td&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;update all repositories tree
        &lt;br /&gt;(to access new formulas from those repositories with Ritchie)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;rit upgrade&lt;/td&gt;
      &lt;td style=&#34;text-align:left&#34;&gt;upgrade to the last Ritchie stable version&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Via Stdin</title>
      <link>https://zupit.github.io/docs-ritchie/docs/getting-started/executing-commands/via-stdin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/getting-started/executing-commands/via-stdin/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;commands-structure&#34;&gt;Commands structure&lt;/h2&gt;
&lt;p&gt;With &lt;strong&gt;stdin&lt;/strong&gt;, the input parameters need to be informed in a JSON format, following different patterns according to the operating system used :&lt;/p&gt;
&lt;h3 id=&#34;linux--mac&#34;&gt;Linux &amp;amp; Mac&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;echo&lt;/code&gt;&lt;/strong&gt; &lt;code&gt;&amp;quot;{\&amp;quot;key\&amp;quot;:\&amp;quot;value\&amp;quot;}&amp;quot;&lt;/code&gt;&lt;strong&gt;&lt;code&gt;|&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;RIT (GROUP) VERB NOUN&lt;/code&gt; &lt;strong&gt;&lt;code&gt;--stdin&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;windows-with-powershell&#34;&gt;Windows (with &lt;strong&gt;PowerShell&lt;/strong&gt;)&lt;/h3&gt;


&lt;div class=&#34;alert alert-danger&#34; role=&#34;alert&#34;&gt;

&lt;strong&gt;STDIN&lt;/strong&gt; doesn&amp;rsquo;t work with the &lt;strong&gt;Windows&lt;/strong&gt; &lt;strong&gt;Command Prompt.&lt;/strong&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;echo&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;&#39;{&amp;quot;key&amp;quot;:&amp;quot;value&amp;quot;}&#39;&lt;/code&gt;&lt;strong&gt;&lt;code&gt;|&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;RIT (GROUP) VERB NOUN&lt;/code&gt; &lt;strong&gt;&lt;code&gt;--stdin&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;core-commands&#34;&gt;Core Commands&lt;/h2&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

It will be necessary to adapt the variable values of each JSON to perform the desired operations as expected.
&lt;/div&gt;

&lt;p&gt;Here are the JSON used to run Ritchie&amp;rsquo;s core commands through &lt;strong&gt;stdin&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;rit-init&#34;&gt;RIT INIT&lt;/h3&gt;
&lt;p&gt;Linux / Mac&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#34;{\&amp;#34;organization\&amp;#34;:\&amp;#34;team\&amp;#34;, \&amp;#34;url\&amp;#34;:\&amp;#34;https://ritchie-server.team.io\&amp;#34;}&amp;#34; | rit init --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Windows (PowerShell)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;organization&amp;#34;:&amp;#34;team&amp;#34;, &amp;#34;url&amp;#34;:&amp;#34;https://ritchie-server.team.io&amp;#34;}&amp;#39; | rit init --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;rit-login&#34;&gt;RIT LOGIN&lt;/h3&gt;
&lt;p&gt;Linux / Mac&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#34;{\&amp;#34;username\&amp;#34;:\&amp;#34;dennis.ritchie\&amp;#34;, \&amp;#34;password\&amp;#34;:\&amp;#34;123456\&amp;#34;}&amp;#34; | rit login --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Windows (PowerShell)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;username&amp;#34;:&amp;#34;dennis.ritchie&amp;#34;, &amp;#34;password&amp;#34;:&amp;#34;123456&amp;#34;}&amp;#39; | rit login --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;heading&#34;&gt;&lt;/h3&gt;
&lt;h3 id=&#34;rit-add-repo&#34;&gt;RIT ADD REPO&lt;/h3&gt;
&lt;p&gt;Linux / Mac&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#34;{\&amp;#34;treePath\&amp;#34;:\&amp;#34;https://commons-repo.ritchiecli.io/tree/tree.json\&amp;#34;,\&amp;#34;name\&amp;#34;:\&amp;#34;repoName\&amp;#34;,\&amp;#34;priority\&amp;#34;:1}&amp;#34; | rit add repo --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Windows (PowerShell)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;treePath&amp;#34;:&amp;#34;https://commons-repo.ritchiecli.io/tree/tree.json&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;repoName&amp;#34;,&amp;#34;priority&amp;#34;:1}&amp;#39; | rit add repo --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;heading-1&#34;&gt;&lt;/h3&gt;
&lt;h3 id=&#34;rit-clean-repo&#34;&gt;RIT CLEAN REPO&lt;/h3&gt;
&lt;p&gt;Linux / Mac&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;repoName\&amp;#34;}&amp;#34; | rit clean repo --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Windows (PowerShell)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;repoName&amp;#34;}&amp;#39; | rit clean repo --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;heading-2&#34;&gt;&lt;/h4&gt;
&lt;h3 id=&#34;rit-create-formula&#34;&gt;RIT CREATE FORMULA&lt;/h3&gt;
&lt;p&gt;Linux / Mac&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#34;{\&amp;#34;formulaCmd\&amp;#34;:\&amp;#34;rit formula test command\&amp;#34;, \&amp;#34;lang\&amp;#34;:\&amp;#34;Go\&amp;#34;}&amp;#34; | rit create formula --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Windows (PowerShell)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;formulaCmd&amp;#34;:&amp;#34;rit formula test command&amp;#34;, &amp;#34;lang&amp;#34;:&amp;#34;Go&amp;#34;}&amp;#39; | rit create formula --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;heading-3&#34;&gt;&lt;/h4&gt;
&lt;h3 id=&#34;rit-create-user-team&#34;&gt;RIT CREATE USER (TEAM)&lt;/h3&gt;
&lt;p&gt;Linux / Mac&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#34;{\&amp;#34;organization\&amp;#34;:\&amp;#34;teamName\&amp;#34;, \&amp;#34;firstName\&amp;#34;:\&amp;#34;Dennis\&amp;#34;, \&amp;#34;lastName\&amp;#34;:\&amp;#34;Ritchie\&amp;#34;, \&amp;#34;email\&amp;#34;:\&amp;#34;dennis.ritchie@team.com\&amp;#34;, \&amp;#34;username\&amp;#34;:\&amp;#34;Dennis Ritchie\&amp;#34;, \&amp;#34;password\&amp;#34;:\&amp;#34;123456\&amp;#34;}&amp;#34; | rit create user --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Windows (PowerShell)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;organization&amp;#34;:&amp;#34;teamName&amp;#34;, &amp;#34;firstName&amp;#34;:&amp;#34;Dennis&amp;#34;, &amp;#34;lastName&amp;#34;:&amp;#34;Ritchie&amp;#34;, &amp;#34;email&amp;#34;:&amp;#34;dennis.ritchie@team.com&amp;#34;, &amp;#34;username&amp;#34;:&amp;#34;Dennis Ritchie&amp;#34;, &amp;#34;password&amp;#34;:&amp;#34;123456&amp;#34;}&amp;#39; | rit create user --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;heading-4&#34;&gt;&lt;/h4&gt;
&lt;h3 id=&#34;rit-delete-repo&#34;&gt;RIT DELETE REPO&lt;/h3&gt;
&lt;p&gt;Linux / Mac&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;repoName\&amp;#34;}&amp;#34; | rit delete repo --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Windows (PowerShell)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;repoName&amp;#34;}&amp;#39; | rit delete repo --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;rit-delete-user-team&#34;&gt;RIT DELETE USER (TEAM)&lt;/h3&gt;
&lt;p&gt;Linux / Mac&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#34;{\&amp;#34;username\&amp;#34;:\&amp;#34;username\&amp;#34;}&amp;#34; | rit delete user --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Windows (PowerShell)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;username&amp;#34;:&amp;#34;username&amp;#34;}&amp;#39; | rit delete user --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;heading-5&#34;&gt;&lt;/h4&gt;
&lt;h3 id=&#34;rit-delete-context&#34;&gt;RIT DELETE CONTEXT&lt;/h3&gt;
&lt;p&gt;Linux / Mac&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#34;{\&amp;#34;context\&amp;#34;:\&amp;#34;contextName\&amp;#34;}&amp;#34; | rit delete context --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Windows (PowerShell)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;context&amp;#34;:&amp;#34;contextName&amp;#34;}&amp;#39; | rit delete context --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;heading-6&#34;&gt;&lt;/h4&gt;
&lt;h3 id=&#34;rit-set-credential-single&#34;&gt;RIT SET CREDENTIAL (SINGLE)&lt;/h3&gt;
&lt;p&gt;Linux / Mac&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#34;{\&amp;#34;service\&amp;#34;:\&amp;#34;credentialService\&amp;#34;,\&amp;#34;credential\&amp;#34;: {\&amp;#34;username\&amp;#34;:\&amp;#34;credentialUsername\&amp;#34;,\&amp;#34;token\&amp;#34;: \&amp;#34;credentialToken\&amp;#34;}}&amp;#34; | rit set credential --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Windows (PowerShell)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;service&amp;#34;:&amp;#34;credentialService&amp;#34;,&amp;#34;credential&amp;#34;: {&amp;#34;username&amp;#34;:&amp;#34;credentialUsername&amp;#34;,&amp;#34;token&amp;#34;: &amp;#34;credentialToken&amp;#34;}}&amp;#39; | rit set credential --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;heading-7&#34;&gt;&lt;/h4&gt;
&lt;h3 id=&#34;rit-set-credential-team&#34;&gt;RIT SET CREDENTIAL (TEAM)&lt;/h3&gt;
&lt;p&gt;Linux / Mac&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#34;{\&amp;#34;username\&amp;#34;:\&amp;#34;me\&amp;#34;,\&amp;#34;service\&amp;#34;:\&amp;#34;credentialService\&amp;#34;,\&amp;#34;credential\&amp;#34;: {\&amp;#34;username\&amp;#34;:\&amp;#34;credentialUsername\&amp;#34;,\&amp;#34;token\&amp;#34;: \&amp;#34;credentialToken\&amp;#34;}}&amp;#34; | rit set credential --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Windows (PowerShell)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;username&amp;#34;:&amp;#34;me&amp;#34;,&amp;#34;service&amp;#34;:&amp;#34;credentialService&amp;#34;,&amp;#34;credential&amp;#34;: {&amp;#34;username&amp;#34;:&amp;#34;credentialUsername&amp;#34;,&amp;#34;token&amp;#34;: &amp;#34;credentialToken&amp;#34;}}&amp;#39; | rit set credential --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;rit-set-context&#34;&gt;RIT SET CONTEXT&lt;/h3&gt;
&lt;p&gt;Linux / Mac&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#34;{\&amp;#34;context\&amp;#34;:\&amp;#34;contextName\&amp;#34;}&amp;#34; | rit set context --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Windows (PowerShell)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;context&amp;#34;:&amp;#34;contextName&amp;#34;}&amp;#39; | rit set context --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;heading-8&#34;&gt;&lt;/h4&gt;
&lt;h3 id=&#34;rit-set-server&#34;&gt;RIT SET SERVER&lt;/h3&gt;
&lt;p&gt;Linux / Mac&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#34;{\&amp;#34;url\&amp;#34;:\&amp;#34;serverUrl\&amp;#34;}&amp;#34; | rit set server --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Windows (PowerShell)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;url&amp;#34;:&amp;#34;serverUrl&amp;#34;}&amp;#39; | rit set server --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;rit-login-team&#34;&gt;RIT LOGIN (TEAM)&lt;/h3&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

&lt;strong&gt;stdin&lt;/strong&gt; hasn&amp;rsquo;t been implemented yet for the **&lt;code&gt;rit login&lt;/code&gt;**command.
&lt;/div&gt;

&lt;h2 id=&#34;formula-commands&#34;&gt;Formula Commands&lt;/h2&gt;
&lt;p&gt;JSON is build according to the config.json used to implement the formula. Because of that, for the formula&amp;rsquo;s commands to work through &lt;strong&gt;stdin&lt;/strong&gt;, it is necessary that this formula works informing &lt;strong&gt;exclusively the input parameters through the config.json file&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If, for example, the formula&amp;rsquo;s code asks for data via prompt, it will not be possible to use only stdin for the formula to run successfully.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

It will be necessary to adapt the variable values of each JSON to perform the desired operations as expected.
&lt;/div&gt;

&lt;p&gt;Here are some examples of JSON used to run Ritchie &lt;strong&gt;formulas&lt;/strong&gt; through &lt;strong&gt;stdin&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;heading-9&#34;&gt;&lt;/h3&gt;
&lt;h3 id=&#34;rit-scaffold-generate-coffee-go&#34;&gt;RIT SCAFFOLD GENERATE COFFEE-GO&lt;/h3&gt;
&lt;p&gt;Linux / Mac&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;{\&amp;quot;name\&amp;quot;:\&amp;quot;Dennis Ritchie\&amp;quot;,\&amp;quot;coffee_type\&amp;quot;:\&amp;quot;espresso\&amp;quot;,\&amp;quot;delivery\&amp;quot;:\&amp;quot;true\&amp;quot;}&amp;quot; | rit scaffold generate coffee-go --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Windows (PowerShell)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &#39;{&amp;quot;name&amp;quot;:&amp;quot;Dennis Ritchie&amp;quot;,&amp;quot;coffee_type&amp;quot;:&amp;quot;espresso&amp;quot;,&amp;quot;delivery&amp;quot;:&amp;quot;true&amp;quot;}&#39; | rit scaffold generate coffee-go --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;heading-10&#34;&gt;&lt;/h4&gt;
&lt;h3 id=&#34;rit-scaffold-generate-spring-starter&#34;&gt;RIT SCAFFOLD GENERATE SPRING-STARTER&lt;/h3&gt;
&lt;p&gt;Linux / Mac&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#34;{\&amp;#34;type\&amp;#34;:\&amp;#34;maven-project\&amp;#34;,\&amp;#34;language\&amp;#34;:\&amp;#34;java\&amp;#34;,\&amp;#34;boot_version\&amp;#34;:\&amp;#34;2.2.5.BUILD-SNAPSHOT\&amp;#34;,\&amp;#34;group_id\&amp;#34;:\&amp;#34;br.com.zup\&amp;#34;,\&amp;#34;artifact_id\&amp;#34;:\&amp;#34;ritchie-project\&amp;#34;,\&amp;#34;description\&amp;#34;:\&amp;#34;ritchie\&amp;#34;,\&amp;#34;packaging\&amp;#34;:\&amp;#34;jar\&amp;#34;,\&amp;#34;java_version\&amp;#34;:\&amp;#34;11\&amp;#34;,\&amp;#34;dependencies\&amp;#34;:\&amp;#34;web\&amp;#34;}&amp;#34; | rit scaffold generate spring-starter --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Windows (PowerShell)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;type&amp;#34;:&amp;#34;maven-project&amp;#34;,&amp;#34;language&amp;#34;:&amp;#34;java&amp;#34;,&amp;#34;boot_version&amp;#34;:&amp;#34;2.2.5.BUILD-SNAPSHOT&amp;#34;,&amp;#34;group_id&amp;#34;:&amp;#34;br.com.zup&amp;#34;,&amp;#34;artifact_id&amp;#34;:&amp;#34;ritchie-project&amp;#34;,&amp;#34;description&amp;#34;:&amp;#34;ritchie&amp;#34;,&amp;#34;packaging&amp;#34;:&amp;#34;jar&amp;#34;,&amp;#34;java_version&amp;#34;:&amp;#34;11&amp;#34;,&amp;#34;dependencies&amp;#34;:&amp;#34;web&amp;#34;}&amp;#39; | rit scaffold generate spring-starter --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;rit-github-fast-merge&#34;&gt;RIT GITHUB FAST-MERGE&lt;/h3&gt;
&lt;p&gt;Linux / Mac&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#34;{\&amp;#34;branch\&amp;#34;:\&amp;#34;qa\&amp;#34;,\&amp;#34;push\&amp;#34;:\&amp;#34;false\&amp;#34;}&amp;#34; | rit github fast-merge --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Windows (PowerShell)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#39;{&amp;#34;branch&amp;#34;:&amp;#34;qa&amp;#34;,&amp;#34;push&amp;#34;:\&amp;#34;false\&amp;#34;}&amp;#39; | rit github fast-merge --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;rit-aws-apply-terraform&#34;&gt;RIT AWS APPLY TERRAFORM&lt;/h3&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

&lt;strong&gt;Premise&lt;/strong&gt;: Have the GITHUB and AWS credentials configured inside the session.
&lt;/div&gt;

&lt;p&gt;Linux / Mac&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;echo &amp;#34;{\&amp;#34;repository\&amp;#34;:\&amp;#34;https://github.com/group/project\&amp;#34;,\&amp;#34;terraform_path\&amp;#34;:\&amp;#34;src\&amp;#34;,\&amp;#34;environment\&amp;#34;:\&amp;#34;qa\&amp;#34;}&amp;#34; | rit aws apply terraform --stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Context</title>
      <link>https://zupit.github.io/docs-ritchie/docs/use-cases/first-commands/context/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/use-cases/first-commands/context/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;context-command&#34;&gt;Context command&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Commands :&lt;/strong&gt;     &lt;em&gt;&lt;code&gt;rit set context&lt;/code&gt;    +    &lt;code&gt;rit show context&lt;/code&gt;    +     &lt;code&gt;rit delete context&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh6.googleusercontent.com/nSp8JByYbWSojwR4LPk-itqC8Dt23bSmFWf6wzes-oKqRkOFspjGBqNiam8eEI3YOCBp67IQaPpPKZCqXQEiBG56rqyWIAChUdNO1thIdRA46MrNMH5McpCW0zoWOFxYMVkVx2eE&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Explanation :&lt;/strong&gt; These commands are among the most useful and simple of the Ritchie core.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;set context&lt;/strong&gt; allows you to define a context in the session. Thus, information that will be defined within this context can be reused by executing other commands needing this input. This command has a cache in case it is necessary to re-apply a previously used context.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;➜  rit set context
✔ Type new context?
New context:  qa
Set context successful!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;The reason for this command to exist is to enable the user to have several credentials registered (github, aws, etc &amp;hellip;), so if he has credentials in dev, qa and prod, for example, he can create these contexts and set his specific credentials for each one.&lt;/p&gt;
&lt;p&gt;When a new context is used, all your credentials must be set again.&lt;/p&gt;

&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;show context&lt;/strong&gt; allows you to check which context is currently defined in the session.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;➜  rit show context
Current context: qa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;delete context&lt;/strong&gt; allows you to remove a context that was defined in the session (it can be either one that is currently being used, or one that was configured in the set context previously and was saved in the cache).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;➜  rit delete context
✔ Current -&amp;gt; qa
✔ yes
Delete context successful!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Credentials</title>
      <link>https://zupit.github.io/docs-ritchie/docs/use-cases/first-commands/credentials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/use-cases/first-commands/credentials/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;set-credentials&#34;&gt;Set &lt;strong&gt;Credentials&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;It is possible to set credentials (secrets) on Ritchie to avoid informing datas multiplus times through the terminal.&lt;/p&gt;
&lt;p&gt;The command that will allow it is &lt;strong&gt;&lt;code&gt;$ rit set credential&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On the &lt;a href=&#34;https://docs.ritchiecli.io/getting-started/choosing-a-version#single-version&#34;&gt;&lt;strong&gt;Single version&lt;/strong&gt;&lt;/a&gt;, credentials are encrypted locally on the session, through the passphrase informed at the &lt;a href=&#34;https://docs.ritchiecli.io/getting-started/initialization#single-version&#34;&gt;&lt;strong&gt;initialization step&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On the &lt;a href=&#34;https://docs.ritchiecli.io/getting-started/choosing-a-version#team-version&#34;&gt;&lt;strong&gt;Team&lt;/strong&gt; &lt;strong&gt;version&lt;/strong&gt;&lt;/a&gt;, credentials are encrypted on the &lt;strong&gt;Keycloak&lt;/strong&gt; session (online) through the &lt;strong&gt;Vault&lt;/strong&gt; (Hashicorp).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;➜   rit set credential
Use the arrow keys to navigate: ↓ ↑ → ←
Profile to add credential:
  ▸ ME (for you)
     OTHER (for another user)
     ORG (for the organization)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Every user can set his own credentials,&lt;br&gt;
On the Team version, server admins can also set credentials for specific team users or for the whole team.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;➜  rit set credential
✔ ME (for you)
Use the arrow keys to navigate: ↓ ↑ → ←
Provider:
 ▸ darwin
     email-org
     github
     gitlab
     jenkins
     kubeconfig
     aws
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the user select the profile option, he needs to select with provider he wishes to add. This provider’s list is setted inside the server configuration file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;➜  rit set credential
✔ ME (for you)
✔ github
Github username:  user
Github token:  *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the user select the provider, he need to inform the selected credential’s datas.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh4.googleusercontent.com/-JVtQ04rw-nThL0ALvAnk5B63942l5z9gUrjzk34TNPiPU3BNUc4aa-BFSimdtBNO6dMJDTwBgiWr9uEg3sIwQTLiklUwqyKr5ZyWpnaHGpg4P-4GELLnmw3pPaomBM433N_bg0o&#34; alt=&#34;&#34;&gt;&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

Check the &lt;a href=&#34;https://docs.ritchiecli.io/developer/server#credentials-configurations&#34;&gt;credentials configuration section&lt;/a&gt; to understand how to manipulate the credentials defined in the session as formula input parameters (inputs in the config.json file).
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Repositories</title>
      <link>https://zupit.github.io/docs-ritchie/docs/use-cases/first-commands/repositories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/use-cases/first-commands/repositories/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;You can have access to more than one repository using Ritchie. We&amp;rsquo;ll show you some commands that you can use to manage your repo.&lt;/p&gt;
&lt;h2 id=&#34;add-the-_commons_-repository&#34;&gt;Add the &lt;em&gt;commons&lt;/em&gt; repository&lt;/h2&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;The commons repo &lt;strong&gt;is automatically added&lt;/strong&gt; when you execute successfully the &lt;strong&gt;rit init&lt;/strong&gt; command.&lt;/p&gt;
&lt;p&gt;You can remove it using the &lt;strong&gt;rit delete repo&lt;/strong&gt; command explained below.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Community&amp;rsquo;s formulas&lt;/strong&gt; are located on the &lt;a href=&#34;https://github.com/ZupIT/ritchie-formulas&#34;&gt;&lt;strong&gt;ritchie-formulas&lt;/strong&gt;&lt;/a&gt; project on &lt;strong&gt;GitHub&lt;/strong&gt;. Those formulas commands won&amp;rsquo;t appear when executing the &lt;code&gt;rit --help&lt;/code&gt; command if the user doesn&amp;rsquo;t import the &lt;strong&gt;tree.json&lt;/strong&gt; of this repository first.&lt;/p&gt;
&lt;p&gt;The tree.json of the ritchie-formulas repository is located on the following url :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;https://commons-repo.ritchiecli.io/tree/tree.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This path must be informed through the &lt;code&gt;rit add repo&lt;/code&gt; command to be added to the local Ritchie-CLI tree. As the example below :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/rit-add-repo-min.gif&#34; alt=&#34;Example of how to add the commons repository commands to Ritchie&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once the new repository &lt;strong&gt;tree.json&lt;/strong&gt; has been added, its &lt;em&gt;formulas executable commands&lt;/em&gt; are added to the Ritchie helper. That means they are now available to the user.&lt;/p&gt;
&lt;p&gt;When adding a new repository, the user can also choose the &lt;strong&gt;repository&amp;rsquo;s priority&lt;/strong&gt;, giving the formulas of this repository priority over formulas which use the same executable command on another repository. That way, when the CLI will build the main tree, it won&amp;rsquo;t allow any duplicated command, but will always keep the one with the highest priority.&lt;/p&gt;
&lt;h2 id=&#34;add-other-repositories&#34;&gt;&lt;strong&gt;Add other&lt;/strong&gt; repositories&lt;/h2&gt;
&lt;p&gt;To add another repository to the CLI, follow the same process as above, except its necessary to have the tree.json of this repository stored somewhere for Ritchie to import it the same way it has been done for the &lt;a href=&#34;https://github.com/ZupIT/ritchie-formulas&#34;&gt;&lt;strong&gt;ritchie-formulas&lt;/strong&gt;&lt;/a&gt; project.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;➜ rit add repo
Name of the repository:  community
URL of the tree [http(s)://host:port/tree.json]:  https://commons-repo.ritchiecli.io/tree/tree.json
Priority [ps.: 0 is higher priority, the lower higher the priority] : 1
Repository added
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;update-a-repository&#34;&gt;&lt;strong&gt;Update&lt;/strong&gt; a repository&lt;/h2&gt;
&lt;p&gt;It is possible to update all repositories once they have been setted, using the &lt;code&gt;rit update repo&lt;/code&gt; command. It will update the repositories tree.json from the URL informed at the repositories additions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;➜ rit update repo

Wait while we update your repositories...
...Successfully got an update from the &amp;#34;commons&amp;#34; formula repository
Done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;delete-a-repository&#34;&gt;&lt;strong&gt;Delete&lt;/strong&gt; a repository&lt;/h2&gt;
&lt;p&gt;It is possible to remove a repository tree from the CLI using the &lt;code&gt;rit delete repo&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;The user will need to inform the name he used when he added the repository. It is possible to check the name of the current repositories using the &lt;code&gt;rit list repo&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;➜ rit list repo

NAME   	URL
commons	https://commons-repo.ritchiecli.io/tree/tree.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/rit-delete-repo-min.gif&#34; alt=&#34;Example of how to remove the commons repository commands from Ritchie&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;clean-a-repository&#34;&gt;&lt;strong&gt;Clean&lt;/strong&gt; a repository&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;rit clean repo&lt;/code&gt; command allows the user to remove the cache of the repository informed. That way, those commands won&amp;rsquo;t appear on the autocompletion until importing the tree.json of this repository again, next time the user will execute a formula from there.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Docker compose</title>
      <link>https://zupit.github.io/docs-ritchie/docs/use-cases/first-formulas/docker-compose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/use-cases/first-formulas/docker-compose/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;docker-compose&#34;&gt;Docker compose&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Command :&lt;/strong&gt; &lt;em&gt;&lt;code&gt;rit docker generate compose&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh6.googleusercontent.com/X5kec7ahhVEKNLx8CBJZhZuX7c_yiDcRe4ZJuEcziuGYMgunrFtx82Kq56SNti6DQsB9FK0iNSOG4ALQ-qAbC6TFVllIsksWuQpeRe0jZoDO-1Bmfp2QTvyFloAyFvFG42_O0NWN&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt; : This command allows you to create a &lt;strong&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/strong&gt; file in the directory where the formula is executed.&lt;/p&gt;
&lt;p&gt;The user can choose which tools he wants to include in the file from the inputs requested in the terminal (if necessary, additional informations are requested).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;➜    rit docker generate compose
Use the arrow keys to navigate: ↓ ↑ → ←
Select docker image:
  ▸ awsclivl
    consul
    dynamoDB
    jaeger
    kafka
    mongo
    postgres
    redis
    stubby4j
    rabbitmq
    finish!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;➜  rit docker generate compose
✔ kafka
✔ finish!
Generated files in the current directory
Run:
docker-compose up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the file is created, it is possible to run it normally, via the &lt;strong&gt;docker-compose up&lt;/strong&gt; command.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

When using docker-compose up, it is necessary to have docker installed.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Spring starter</title>
      <link>https://zupit.github.io/docs-ritchie/docs/use-cases/first-formulas/spring-starter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/use-cases/first-formulas/spring-starter/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;spring-starter&#34;&gt;Spring starter&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Command :&lt;/strong&gt; &lt;em&gt;&lt;code&gt;rit scaffold generate spring-starter&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/IeLvW38X-qEOCUtocOyHmtmCMABBXOIat9GQ6d7lH4Y7nzIcabqrIC7hTd7GfSdQe_1xijuywhgsUAvNQl8RBqsyRrVmvhTn23IlwtxUNZWgypZqtJwOFqCYYDyfBSzOOYHTbE7Q&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Explanation :&lt;/strong&gt; This command allows you to create a project using the Spring framework in the directory where the formula is executed.&lt;/p&gt;
&lt;p&gt;The user can choose between different languages (java, kotlin, groovy), modules (maven, gradle) and their versions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;➜  rit scaffold generate spring-starter
✔ maven-project
✔ java
✔ 2.2.5.BUILD-SNAPSHOT
Type your groupId[ex.: br.com.zup]:  br.com.zup
Type your artifactId[ex.: demo]:  dennis
Type the project`s description [ex.: project demo]:  dennis description
✔ jar
✔ 11
Enter the dependencies ids [ex.: web,postgresql]. For list dependencies: &amp;#39;rit scaffold show spring-starter-dependencies&amp;#39; :  web

16:03:37 Starting scaffold generation...
[ ... ] 
16:03:39 Finished scaffold generation
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the project is created, it is possible to navigate between its folders to access the different files (as shown in the animation below) or directly open it with an IDE (ex: Eclipse, IntelliJ, etc &amp;hellip;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/WZULiXqsu4Ba-GWpYilBrzNFGmDE7AfGfhi-ydhymu-hroJ8GZRcjax1qbJaA5RuwHyTb_PxW1Jx5-_1tnCLGUUo_HeT7EhsHXdGqgqyjOBYiTEuzp0h34XLoObnLwfUYnJjG6bV&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;heading&#34;&gt;&lt;/h3&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Creating formulas</title>
      <link>https://zupit.github.io/docs-ritchie/docs/use-cases/creating-formulas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/use-cases/creating-formulas/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The process to create a formula it is done through the &lt;strong&gt;&lt;code&gt;rit create formula&lt;/code&gt;&lt;/strong&gt; command. It creates the necessary structure for the user to start developing a new formula on his local machine.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

Before following the steps to create a formula, it is recommended to have &lt;strong&gt;Ritchie&lt;/strong&gt; &lt;strong&gt;properly installed&lt;/strong&gt; and &lt;strong&gt;tested&lt;/strong&gt; to make sure all the commands are working.
&lt;/div&gt;

&lt;h2 id=&#34;step-1-formula-creation&#34;&gt;Step 1: Formula creation&lt;/h2&gt;
&lt;p&gt;When the &lt;strong&gt;&lt;code&gt;rit create formula&lt;/code&gt;&lt;/strong&gt; command is executed on the terminal, a few information are requested from the user :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the &lt;strong&gt;&lt;code&gt;new formula command&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The ideal is to follow the pattern rit + group + verb + noun.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;the &lt;strong&gt;&lt;code&gt;new formula programming language&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A &lt;em&gt;&lt;strong&gt;Hello World template&lt;/strong&gt;&lt;/em&gt; will be created in this language.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;the &lt;strong&gt;&lt;code&gt;workspace&lt;/code&gt;&lt;/strong&gt; where the new formula will be added&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It can be an existing formula workspace. If there isn&amp;rsquo;t any available, a default formula workspace will be created automatically, named &lt;strong&gt;&lt;code&gt;ritchie-formulas-local&lt;/code&gt;&lt;/strong&gt; in the &lt;strong&gt;HOME&lt;/strong&gt; of the user&amp;rsquo;s machine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/ZAkUuAxUQVqtusM_n3IThSnfvAy46zcmm9CwIBOvNiByqq3pN_MJZWoXQnTHzpffVtld1gjMc2pPuBaPNdgwWr1omPpAEKRLwN8rzSWUYWjXGesVZIjm5W0ZQgq0u_vUYCRpdZRc&#34; alt=&#34;Creation of a new formula&#34;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;&lt;code&gt;rit create formula&lt;/code&gt;&lt;/strong&gt; command also build the formula automatically (it generates the formula executables files and add them to the &lt;a href=&#34;https://docs.ritchiecli.io/developer/cli#composition-of-the-rit-folder&#34;&gt;.rit folder&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;That means it is possible to execute the new command directly after its creation. In that case, the formula &lt;em&gt;&lt;strong&gt;Hello World template&lt;/strong&gt;&lt;/em&gt; will be executed as shown below :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/iju8Rbeh1vm7adM9d-9Y-jxDaqE93VonK3Gr2fDKZBgV0uNkJ8pn-q97zM_WFQLiQOr3cDXknfaEa6Qyb6G9Cgzfr_gFJH-LvvQa-QRAHT8Pm1TJQ_QD7JcTE6bk0964Dyn0H_NU&#34; alt=&#34;Execution of the Hello World template&#34;&gt;&lt;/p&gt;
&lt;p&gt;This &lt;em&gt;&lt;strong&gt;Hello World template&lt;/strong&gt;&lt;/em&gt; is currently composed of 3 inputs parameters :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a sample text variable&lt;/li&gt;
&lt;li&gt;a sample list of variables&lt;/li&gt;
&lt;li&gt;a sample boolean variable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Those represents the 3 kinds of inputs currently available when using Ritchie.&lt;/p&gt;
&lt;h2 id=&#34;step-2-formula-structure&#34;&gt;&lt;strong&gt;Step 2: Formula structure&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;All Ritchie formulas workspaces follow the same architecture, you can find more information &lt;a href=&#34;https://docs.ritchiecli.io/developer/formulas&#34;&gt;in the formulas section&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When executing the &lt;strong&gt;&lt;code&gt;rit create formula&lt;/code&gt;&lt;/strong&gt; command, the new formula is added to the informed workspace, updating automatically the workspace structure with the &lt;em&gt;Hello World template&lt;/em&gt; files.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/rit-demo-create-formula.png&#34; alt=&#34;ritchie-formula-local repository structure with rit demo create formula Hello World template &#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-3-formula-implementation&#34;&gt;Step 3: &lt;strong&gt;Formula implementation&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;With the new formula structure generated successfully inside the chosen workspace, it is possible to start implementing the new automation, updating the Hello World template.&lt;/p&gt;
&lt;p&gt;To implement the desired operation, it is necessary to update 3 files located inside the /src package of the new formula’s root folder :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The formula &lt;strong&gt;&lt;code&gt;config.json&lt;/code&gt;&lt;/strong&gt;, to configure the inputs.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;main file&lt;/code&gt;&lt;/strong&gt; (generally used to extract those inputs)&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;files in the /pkg folder&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Observation : Depending on the chosen language, it may be necessary to update more files, for example to manipulate dependencies.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;&lt;strong&gt;Some other instructions:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;❗Do not change the name of the formula&amp;rsquo;s root folders (group / verb / noun) without updating the tree.json and Makefile (of the workspace) with the appropriated paths.&lt;/p&gt;
&lt;p&gt;❗The tree.json and Makefile (of the workspace) are already created / updated by executing the rit create formula command. Consequently, you will not need to change them to be able to test the new formula, even after changing the files commented above.&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&#34;step-4-test-the-formula-new-implementation&#34;&gt;Step 4: &lt;strong&gt;Test the formula new implementation&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Once the new automation has been implemented, it necessary to execute the &lt;strong&gt;&lt;code&gt;rit build formula&lt;/code&gt;&lt;/strong&gt; command to update the formula executable files which has been generated at its creation.&lt;/p&gt;
&lt;p&gt;When the rit build formula command is executed on the terminal, a few information are requested from the user :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the &lt;strong&gt;&lt;code&gt;workspace&lt;/code&gt;&lt;/strong&gt; where the formula has been implemented&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;&lt;code&gt;path&lt;/code&gt;&lt;/strong&gt; to the formula /src package (group / verb / noun, if this pattern has been followed)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/Anz1rV6HJ3e9mwSIW3IPTK77DVuYruASkphPW-Ro8Zo9_QhMkM7alNfRtJ8o741l-I7BYrI7sBnsHNMndH1Q7lUWNDvwksLA7UEQXGZMP6XAe6lbbwhdgG12XBpocpWprVHelLH6&#34; alt=&#34;Build of a formula&#34;&gt;&lt;/p&gt;
&lt;p&gt;That’s it ! After building successfully the formula, it is possible to execute the formula command again to see the updated implementation.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : the &lt;strong&gt;&lt;code&gt;rit build formula&lt;/code&gt;&lt;/strong&gt; command can also be used with a flag &lt;strong&gt;&lt;code&gt;--watch&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Using this flag, the command will automatically “watch” the specified formula &lt;strong&gt;&lt;code&gt;/src package&lt;/code&gt;&lt;/strong&gt; and update the formula executable files if any change is saved by the user.&lt;/p&gt;

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: CLI</title>
      <link>https://zupit.github.io/docs-ritchie/docs/reference/cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/reference/cli/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Ritchie works through files stored inside the &lt;strong&gt;.rit&lt;/strong&gt; folder in the &lt;em&gt;HOME&lt;/em&gt; of the user&amp;rsquo;s machine. This folder is &lt;strong&gt;manipulated&lt;/strong&gt; by the CLI as commands are executed.&lt;/p&gt;
&lt;p&gt;In this folder are stored:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;strong&gt;tree.json&lt;/strong&gt; files from the formula repositories accessible on the user&amp;rsquo;s machine&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;executable&lt;/strong&gt; files of the formulas&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;temporary&lt;/strong&gt; files used in Ritchie&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;passphrase&lt;/strong&gt; and &lt;strong&gt;session&lt;/strong&gt; files for the &lt;strong&gt;Single&lt;/strong&gt; version&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

To get to know more about our CLI repository, access &lt;a href=&#34;https://github.com/ZupIT/ritchie-cli&#34;&gt;&lt;strong&gt;ritchie-cli&lt;/strong&gt;&lt;/a&gt; on Github.
&lt;/div&gt;

&lt;h2 id=&#34;composition-of-the-rit-folder&#34;&gt;Composition of the .rit folder&lt;/h2&gt;
&lt;h3 id=&#34;repo-folder&#34;&gt;Repo folder&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;repo&lt;/strong&gt; folder contains all the files necessary for the CLI to know the commands and formulas it can execute.&lt;/p&gt;
&lt;p&gt;It is made up of other folders:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;strong&gt;cache&lt;/strong&gt; folder that will contain the tree.json files from the formula repository that the user has access to (according to the version of Ritchie he is using).&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;local&lt;/strong&gt; folder that will contain the tree.json of the repository where the user is developing and testing formulas locally.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition to these folders, there is also a &lt;strong&gt;repositories.json&lt;/strong&gt; file. This file contains a list of tree.json for the CLI to identify which trees it has access to, and what their priorities are, in order to avoid duplicate commands if they appear in more than one formula repository.&lt;/p&gt;
&lt;h3 id=&#34;formulas-folder&#34;&gt;Formulas folder&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;formulas&lt;/strong&gt; folder contains all the files necessary for the CLI to execute the formulas.&lt;/p&gt;
&lt;p&gt;It is composed of several folders, one per formula, containing the formula executable according to the operating system used, as soon as the associated config.json is used to identify the necessary input parameters for the formula to be executed correctly.&lt;/p&gt;
&lt;p&gt;These files are downloaded, and these folders are created when the CLI executes a formula command for the &lt;a href=&#34;https://docs.ritchiecli.io/key-concepts#formulas-on-demand&#34;&gt;first time&lt;/a&gt; (they are fetched through the formula&amp;rsquo;s repoUrl informed in the associated tree.json).&lt;/p&gt;
&lt;p&gt;When the user tests a formula he implemented locally, the &lt;em&gt;Makefile&lt;/em&gt; file contained in the formula repository used will add the formula&amp;rsquo;s executables inside that folder, creating the same structure that would be created if the formula were downloaded from a server.&lt;/p&gt;
&lt;h3 id=&#34;tmp-folder&#34;&gt;tmp folder&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;tmp&lt;/strong&gt; folder is where temporary files are stored. Those files can be created or manipulated during the execution of some formulas or core commands. These temporary files can be templates, certificates, or other single-use files.&lt;/p&gt;
&lt;h3 id=&#34;passphrase--session&#34;&gt;Passphrase &amp;amp; Session&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;passphrase&lt;/strong&gt; &amp;amp; &lt;strong&gt;session&lt;/strong&gt; files are encrypted files used in the Single version to be able to define datas that will repetitively be used through Ritchie. Those datas can be &lt;em&gt;credentials&lt;/em&gt; of some tools manipulated in the formulas, or even the definition of the &lt;em&gt;context&lt;/em&gt; used to perform some automations.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Formulas</title>
      <link>https://zupit.github.io/docs-ritchie/docs/reference/formulas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/reference/formulas/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The formulas are, in Ritchie&amp;rsquo;s context, the automation that can be executed to make an action in a short time, but more efficiently.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

To get to know more about our current formulas on Ritchie, access the repository &lt;a href=&#34;https://github.com/ZupIT/ritchie-formulas&#34;&gt;&lt;strong&gt;ritchie-formulas&lt;/strong&gt;&lt;/a&gt; on Github.
&lt;/div&gt;

&lt;h2 id=&#34;formula-repositories&#34;&gt;Formula repositories&lt;/h2&gt;
&lt;p&gt;Formulas are stored in &lt;strong&gt;formula repositories,&lt;/strong&gt; that need to have a particular structure.&lt;/p&gt;
&lt;p&gt;Each repository must contain the following elements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the formula folders.&lt;/li&gt;
&lt;li&gt;a tree folder&lt;/li&gt;
&lt;li&gt;a Makefile file&lt;/li&gt;
&lt;li&gt;a copy-bin-configs.sh file&lt;/li&gt;
&lt;li&gt;an unzip-bin-configs.sh file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/repo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Each &lt;strong&gt;formula folder&lt;/strong&gt; will contain the executable code and files for a formula.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;tree&lt;/strong&gt; folder is composed of a &lt;strong&gt;tree.json&lt;/strong&gt; file that will contain the command tree of all formulas in the repository.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Makefile&lt;/strong&gt; file contains a reference to all formulas in the repository, as well as an executable command manipulating the files &lt;strong&gt;copy-bin-configs.sh&lt;/strong&gt; and &lt;strong&gt;unzip-bin-configs.sh&lt;/strong&gt;, in order to generate the executable files needed to test the formula(s) locally inside the &lt;a href=&#34;cli.md&#34;&gt;.rit folder&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;formula-composition&#34;&gt;Formula composition&lt;/h3&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

Each formula is composed of several files allowing its execution by the CLI.
&lt;/div&gt;

&lt;p&gt;For a formula to be executed by the terminal, it is necessary to have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The tree.json file of the repository where the configured formula is located&lt;/li&gt;
&lt;li&gt;An executable file&lt;/li&gt;
&lt;li&gt;A config.json file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;tree.json&lt;/strong&gt; file allows the CLI to know the commands and sub-commands associated with the formula. This is how it identifies where to download the formula files on the first execution (on demand).&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;executable file&lt;/strong&gt; contains the implementation of the formula. The CLI will download this file according to the operating system of the user&amp;rsquo;s computer and execute this formula sending the input parameters that have been informed.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;config.json&lt;/strong&gt; file contains the formula&amp;rsquo;s input parameters. It allows the CLI to know what datas to ask the user when he executes the command in the terminal in order to process the formula correctly.&lt;/p&gt;
&lt;h4 id=&#34;configjson&#34;&gt;Config.json&lt;/h4&gt;
&lt;p&gt;This file contains the following information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a description&lt;/li&gt;
&lt;li&gt;the formula input parameters&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These input parameters are made up of the following fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;type&lt;/li&gt;
&lt;li&gt;label&lt;/li&gt;
&lt;li&gt;default (optional)&lt;/li&gt;
&lt;li&gt;items (optional)&lt;/li&gt;
&lt;li&gt;cache (optional)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{
  &amp;#34;description&amp;#34;: &amp;#34;Sample inputs in Ritchie.&amp;#34;,
  &amp;#34;inputs&amp;#34; : [
    {
      &amp;#34;name&amp;#34; : &amp;#34;sample_text&amp;#34;,
      &amp;#34;type&amp;#34; : &amp;#34;text&amp;#34;,
      &amp;#34;label&amp;#34; : &amp;#34;Type : &amp;#34;,
      &amp;#34;cache&amp;#34; : {
        &amp;#34;active&amp;#34;: true,
        &amp;#34;qty&amp;#34; : 6,
        &amp;#34;newLabel&amp;#34; : &amp;#34;Type new value. &amp;#34;
      }
    },
    {
      &amp;#34;name&amp;#34; : &amp;#34;sample_list&amp;#34;,
      &amp;#34;type&amp;#34; : &amp;#34;text&amp;#34;,
      &amp;#34;default&amp;#34; : &amp;#34;in1&amp;#34;,
      &amp;#34;items&amp;#34; : [&amp;#34;in_list1&amp;#34;, &amp;#34;in_list2&amp;#34;, &amp;#34;in_list3&amp;#34;, &amp;#34;in_listN&amp;#34;],
      &amp;#34;label&amp;#34; : &amp;#34;Pick your : &amp;#34;
    },
    {
      &amp;#34;name&amp;#34; : &amp;#34;sample_bool&amp;#34;,
      &amp;#34;type&amp;#34; : &amp;#34;bool&amp;#34;,
      &amp;#34;default&amp;#34; : &amp;#34;false&amp;#34;,
      &amp;#34;items&amp;#34; : [&amp;#34;false&amp;#34;, &amp;#34;true&amp;#34;],
      &amp;#34;label&amp;#34; : &amp;#34;Pick: &amp;#34;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;strong&gt;name&lt;/strong&gt; field refers to the name of the variable that will be extracted when implementing the formula.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;type&lt;/strong&gt; field represents the type of the variable (currently there is only TEXT and BOOL)&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;label&lt;/strong&gt; field is the text that will appear to the user via PROMPT to inform this variable.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;default&lt;/strong&gt; field is the value of the variable that will come by default if the choice is a list of options.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;items&lt;/strong&gt; field is the list of possible options for the variable.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;cache&lt;/strong&gt; field allows to configure whether it is necessary to store the user&amp;rsquo;s choices for this variable. It consists of 3 fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;active&lt;/li&gt;
&lt;li&gt;qty&lt;/li&gt;
&lt;li&gt;newLabel.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;active&lt;/strong&gt; field indicates whether the cache is enabled or not.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;qty&lt;/strong&gt; field refers to the number of choices that can be stored in the cache.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;newLabel&lt;/strong&gt; field is for the user to enter another value for the variable if those saved in the cache do not meet their needs.&lt;/p&gt;
&lt;h3 id=&#34;treejson&#34;&gt;Tree.json&lt;/h3&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;&lt;strong&gt;Each&lt;/strong&gt; Ritchie formula repository has a &lt;strong&gt;command tree&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This command tree is configured in a file called &lt;strong&gt;tree.json&lt;/strong&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;It is through these JSON (s) that the CLI will be able to identify the commands it has access to, and the necessary datas to download the executables of the formulas.&lt;/p&gt;
&lt;p&gt;The structure of a tree.json is as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{
  &amp;#34;commands&amp;#34;: [
    {
      &amp;#34;usage&amp;#34;: &amp;#34;aws&amp;#34;,
      &amp;#34;help&amp;#34;: &amp;#34;Apply Aws objects&amp;#34;,
      &amp;#34;parent&amp;#34;: &amp;#34;root&amp;#34;
    },
    {
      &amp;#34;usage&amp;#34;: &amp;#34;apply&amp;#34;,
      &amp;#34;help&amp;#34;: &amp;#34;Apply Aws objects&amp;#34;,
      &amp;#34;parent&amp;#34;: &amp;#34;root_aws&amp;#34;
    },
    {
      &amp;#34;usage&amp;#34;: &amp;#34;terraform&amp;#34;,
      &amp;#34;help&amp;#34;: &amp;#34;Apply Aws terraform objects&amp;#34;,
      &amp;#34;formula&amp;#34;: {
        &amp;#34;path&amp;#34;: &amp;#34;aws/terraform&amp;#34;,
        &amp;#34;bin&amp;#34;: &amp;#34;terraform-cli-${so}&amp;#34;,
        &amp;#34;bundle&amp;#34;: &amp;#34;${so}.zip&amp;#34;,
        &amp;#34;repoUrl&amp;#34;: &amp;#34;https://commons-repo.ritchiecli.io/formulas&amp;#34;
      },
      &amp;#34;parent&amp;#34;: &amp;#34;root_aws_apply&amp;#34;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s continue with the example of the command &lt;code&gt;RIT AWS APPLY TERRAFORM&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Each command contained in this list can contain up to 4 parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;usage&lt;/li&gt;
&lt;li&gt;help&lt;/li&gt;
&lt;li&gt;parent&lt;/li&gt;
&lt;li&gt;formula&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;usage&lt;/strong&gt; field refers to the word used in the command (aws, apply and terraforma in the example).&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;help&lt;/strong&gt; field represents the help message that will appear to the user if he enters this command.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;parent&lt;/strong&gt; field indicates the previous commands in the tree, possibly using an underline (_) to separate the commands. ROOT being a reserved word referring to the RIT command.&lt;/p&gt;
&lt;p&gt;When a command contains only these 3 fields (&lt;strong&gt;usage, help, parent&lt;/strong&gt;) it means that it is not executable, and that it is only part of a set of commands that together will execute a formula.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;formula&lt;/strong&gt; field will contain the necessary information for the CLI to identify where to look for the executables needed to execute the formula. It consists of 3 fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;repoUrl&lt;/li&gt;
&lt;li&gt;path&lt;/li&gt;
&lt;li&gt;bin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;repoUrl&lt;/strong&gt; field refers to the address where the formula&amp;rsquo;s executable files are located.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

It is important to note that Ritchie does not download all formulas at its installation. The CLI only downloads the executables of the formulas on demand, that is, when it executes the formulas commands for the first time.
&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;path&lt;/strong&gt; field indicates the folder that will be created locally on the user&amp;rsquo;s computer to add these executable files.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;bin&lt;/strong&gt; field tells you the name of the executable file that the CLI should download, according to the operating system (OS) of the user&amp;rsquo;s machine.&lt;/p&gt;
&lt;p&gt;Running the commands from the AWS formula above, it is possible to get the following scenarios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rit aws&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Apply Aws objects

Available Commands:
  apply       Apply Aws objects

Use &amp;#34;rit &amp;lt;command&amp;gt; --help&amp;#34; for more information about a given command.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rit aws apply&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Apply Aws objects

Available Commands:
  terraform   Apply Aws terraform objects

Use &amp;#34;rit &amp;lt;command&amp;gt; --help&amp;#34; for more information about a given command.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rit aws apply terraform&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Downloading config file...
Done.
Download formula...
Done.
Installing formula...
Directory Created: /Users/Dennis/.rit/formulas/aws/terraform/bin
File extracted: bin/terraform-cli-darwin
Done.
Use the arrow keys to navigate: ↓ ↑ → ←
Select your repository URL:
  ▸ https://github.com/zupit/iti-stack-core
    https://github.com/zupit/iti-stack-tools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first commands (&lt;strong&gt;&lt;code&gt;rit aws&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;rit aws apply&lt;/code&gt;&lt;/strong&gt;) returned the help field associated with the command in tree.json, as soon as the available sub-commands for the user to execute a formula.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;&lt;code&gt;rit aws apply terraform&lt;/code&gt;&lt;/strong&gt; command downloaded the formula&amp;rsquo;s executables and started asking the user for input parameters.&lt;/p&gt;
&lt;h3 id=&#34;makefile-e-shell-scripts&#34;&gt;Makefile e Shell Scripts&lt;/h3&gt;
&lt;p&gt;Those 3 files are used to generate files locally on the .rit folder when the user need to test the automation code he has implemented.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Makefile&lt;/li&gt;
&lt;li&gt;copy-bin-configs.sh file&lt;/li&gt;
&lt;li&gt;unzip-bin-configs.sh file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When creating the new formula, the path where the formula is located in the repository have to be informed in the &lt;strong&gt;Makefile&lt;/strong&gt; of the root of the repository, as the following example :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#Makefiles

SC_SPRING_STARTER=scaffold/spring-starter
KAFKA=kafka
DOCKER=docker/compose

FORMULAS=$(SC_SPRING_STARTER) $(KAFKA) $(DOCKER)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this file there is also a &lt;code&gt;test-local&lt;/code&gt; command that allows the user to generate the executable files of one or more formulas and place them in the temporary Ritchie folder (.rit) located in the home of the user&amp;rsquo;s machine.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;test-local:
ifneq (&amp;#34;$(FORM)&amp;#34;, &amp;#34;&amp;#34;)
	@echo &amp;#34;Using form true: &amp;#34;  $(FORM_TO_UPPER)
	$(MAKE) bin FORMULAS=$(FORM)
	mkdir -p $(HOME)/.rit/formulas
	rm -rf $(HOME)/.rit/formulas/$(FORM)
	./unzip-bin-configs.sh
	cp -r formulas/* $(HOME)/.rit/formulas
	rm -rf formulas
else
	@echo &amp;#34;Use make test-local form=NAME_FORMULA for specific formula.&amp;#34;
	@echo &amp;#34;form false: ALL FORMULAS&amp;#34;
	$(MAKE) bin
	rm -rf $(HOME)/.rit/formulas
	./unzip-bin-configs.sh
	mv formulas $(HOME)/.rit
endif
	mkdir -p $(HOME)/.rit/repo/local
	rm -rf $(HOME)/.rit/repo/local/tree.json
	cp tree/tree.json  $(HOME)/.rit/repo/local/tree.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;strong&gt;copy-bin-configs.sh&lt;/strong&gt; and &lt;strong&gt;unzip-bin-configs.sh&lt;/strong&gt; are actually manipulated by the &lt;strong&gt;test-local&lt;/strong&gt; command to extract the executable files and &lt;strong&gt;config.json&lt;/strong&gt; of the chosen formulas, and move them to the &lt;strong&gt;.rit folder&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&#34;there-are-2-ways-to-use-this-makefile-command&#34;&gt;There are 2 ways to use this Makefile command:&lt;/h4&gt;
&lt;p&gt;Informing the specific formula to test, according to the name informed in the Makefile:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;make test-local form={nome_formula}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Executing directly the &lt;strong&gt;test-local&lt;/strong&gt; script to add all formulas from the repository to the temporary .rit folder :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;make test-local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After adding the formula in .rit through the Makefile (main), it will be possible to execute the command associated with that formula through the terminal (auto-completion will not work in this case).&lt;/p&gt;
&lt;h3 id=&#34;formulas-build--test&#34;&gt;&lt;strong&gt;Formulas build / test&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;As explained in the &lt;a href=&#34;https://docs.ritchiecli.io/use-cases/creating-formulas#step-4-test-the-formula-new-implementation&#34;&gt;Step 4 of the create formula section&lt;/a&gt;, it is possible to generate a formula executable files for test with the &lt;strong&gt;&lt;code&gt;rit build formula&lt;/code&gt;&lt;/strong&gt; command.&lt;/p&gt;
&lt;p&gt;But what happen exactly when executing this command ? Well, it’s all related to the repository &lt;strong&gt;Makefile&lt;/strong&gt; file at the root of the repository.&lt;/p&gt;
&lt;p&gt;When creating the new formula, the path where the formula is located in the repository was added automatically in the repository &lt;strong&gt;Makefile&lt;/strong&gt; file.&lt;/p&gt;
&lt;p&gt;Therefore, executing the rit build formula command corresponds to the execution of the &lt;strong&gt;&lt;code&gt;make test-local form={formula_name}&lt;/code&gt;&lt;/strong&gt; command of the repository &lt;strong&gt;Makefile&lt;/strong&gt; file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh4.googleusercontent.com/8hoDs7Km57x5E8SBCVZsHGpv4rhTmU7UNoGae9xuxjIKWtKwlrvKPLH1S8DLX1WpDrYE8LPyI7KcxT1hl8oy6pSoUu2cb2r0CuwjFWHJztvBLtmUzUAN_hHwEcexbD0kOhyHgcou&#34; alt=&#34;Build of a formula&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;access-to-formulas&#34;&gt;Access to formulas&lt;/h2&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

All commands &lt;strong&gt;accessible through the CLI&lt;/strong&gt; can be observed through the &lt;em&gt;Helper&lt;/em&gt;
&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;➜ rit --help

A CLI that developers can build and operate
your applications without help from the infra staff.
Complete documentation is available at https://github.com/ZupIT/ritchie-cli

core commands:
  add         add objects
  completion  Add autocomplete for terminal
  clean       clean objects
  create      Create objects
  delete      Delete objects
  list        list objects
  set         Set objects
  show        Show objects
  update      update objects

commons commands:
  aws         Apply Aws objects
  docker      Manipulate docker objects
  github      Manipulate GitHub objects
  k8s         Manipulate k8s objects
  kafka       Kafka commands
  scaffold    Manipulate scaffold objects

Other Commands:

Options:
  -v, --version: version for rit

Usage:
  rit [flags] [options]

Use &amp;#34;rit &amp;lt;command&amp;gt; --help&amp;#34; for more information about a given command.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When a user will download Ritchie (&lt;a href=&#34;https://docs.ritchiecli.io/getting-started/choosing-a-version#single-version&#34;&gt;Single&lt;/a&gt; version) or execute the &lt;code&gt;rit login&lt;/code&gt; command (&lt;a href=&#34;https://docs.ritchiecli.io/getting-started/choosing-a-version#team-version&#34;&gt;Team&lt;/a&gt; version) to access an organization&amp;rsquo;s repositories, the CLI will download and merge the tree.json from the formula repositories to which the user has access.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/fluxo-cli%20%281%29.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The junction of the repository trees will be the tree of all commands available via the CLI on the user&amp;rsquo;s computer, which is presented in the &lt;em&gt;Helper&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;priority-between-repositories&#34;&gt;Priority between repositories&lt;/h2&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;There is a concept of &lt;strong&gt;priority&lt;/strong&gt; among the command trees of the &lt;strong&gt;formula repositories&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This makes it possible to &lt;strong&gt;avoid repetitive commands&lt;/strong&gt; after joining the trees of all commands by the CLI.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;Here is the &lt;strong&gt;default priority&lt;/strong&gt; defined in the CLI among the repositories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Priority 0: Core&lt;/li&gt;
&lt;li&gt;Priority 1: Location&lt;/li&gt;
&lt;li&gt;Priority 2: Other repositories&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This rule allows each user (&lt;em&gt;single&lt;/em&gt;) / organization (team) to define the priority among the other repositories.&lt;/p&gt;
&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;
&lt;p&gt;It is possible for a user to choose between the 2 scenarios below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh4.googleusercontent.com/HjfbyCr7FUbOrhlx7uEqr7-fgjmVbivXPSk9X3CD92BPtF4sgy4ojBl4-HKAzAcI7OGacCGWVzMJCDPh_IfS8y3520_i-TwccY2PQEqrnXgrZKcSdBiOyEjBwzB1Uy9E1b3KQaPL&#34; alt=&#34;&#34;&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/Oc1HatluaibDzbcfd0N34oERi8al1zsJj6qB4XDNpueoP5xgizDIarZmQ2BoGCXFp0K-g5QnQC6-pn1eQFoO15QKmQEOklfJ_AdK7hN0EeHpK7T3HrIm_wN0G_rNcbN6LP7VFBDK&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;scenario-1&#34;&gt;&lt;strong&gt;Scenario 1&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Priority would be given to commons commands over your team&amp;rsquo;s commands.&lt;/p&gt;
&lt;h4 id=&#34;scenario-2&#34;&gt;S&lt;strong&gt;cenario 2&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Priority would be given to team commands over commons commands. This would allow, for example, a user / team to use a command that is in the &lt;strong&gt;ritchie-formulas&lt;/strong&gt; (commons) repository tree for a formula in their repository, performing a different operation with the same command, since it would have priority.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;It is possible to configure the priority between the repositories in the &lt;strong&gt;repo&lt;/strong&gt; folder of the &lt;a href=&#34;cli.md&#34;&gt;.rit folder&lt;/a&gt; where you have a configurable repositories.json file.&lt;/p&gt;
&lt;p&gt;For more information on how to manipulate &lt;a href=&#34;../use-cases/first-commands/repositories.md&#34;&gt;repositories&lt;/a&gt;, check out the documentation here: Repository.&lt;/p&gt;

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Server</title>
      <link>https://zupit.github.io/docs-ritchie/docs/reference/server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/reference/server/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Available only on Team Version, the server is responsible to provide the information needed by the CLI so it can execute Ritchie&amp;rsquo;s commands.&lt;/p&gt;
&lt;p&gt;To make this happen, each team must have a configuration file to start their server when using Ritchie. That file is &lt;strong&gt;file_config.json&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Besides the configuration file, the CLI also provides and collect information through the &lt;strong&gt;ritchie-server repository.&lt;/strong&gt;&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

To get to know our server repository, access &lt;a href=&#34;https://github.com/ZupIT/ritchie-server&#34;&gt;&lt;strong&gt;ritchie-server&lt;/strong&gt;&lt;/a&gt; on Github.
&lt;/div&gt;

&lt;h2 id=&#34;server-configuration&#34;&gt;Server configuration&lt;/h2&gt;
&lt;p&gt;The file_config.json will contain the configuration and authorization part of the trees and commands, this involves the following fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tenant / team&lt;/li&gt;
&lt;li&gt;keycloak&lt;/li&gt;
&lt;li&gt;cliVersionPath&lt;/li&gt;
&lt;li&gt;repositories&lt;/li&gt;
&lt;li&gt;oauth&lt;/li&gt;
&lt;li&gt;credentials&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;em&gt;&lt;strong&gt;tenant / team&lt;/strong&gt;&lt;/em&gt; field represents the name of the team that must be informed by the user when logging in with Ritchie in the Team version.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;&lt;strong&gt;keycloak&lt;/strong&gt;&lt;/em&gt; field refers to the client &lt;a href=&#34;https://www.keycloak.org/&#34;&gt;&lt;strong&gt;Keycloak&lt;/strong&gt;&lt;/a&gt; settings used by the server to validate the token and manage the keycloak (url, realm, clientId and clientSecret).&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;&lt;strong&gt;cliVersionPath&lt;/strong&gt;&lt;/em&gt; field informs the URL to the provider in order to identify the version of the CLI being used.&lt;/p&gt;
&lt;p&gt;The _&lt;strong&gt;repositories**_ field indicates the formula repositories accessible by the team (with name, priority, treePath, urls) that the CLI will use to download the tree.json that will be in the &lt;/strong&gt;.rit folder** &lt;a href=&#34;cli.md&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;&lt;strong&gt;oauth&lt;/strong&gt;&lt;/em&gt; field contains the URL that will be used to login with the team&amp;rsquo;s SSO (Single Sign On) tool.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;&lt;strong&gt;credentials&lt;/strong&gt;&lt;/em&gt; field contains a list of credentials that can be used within the team&amp;rsquo;s environment, which can be set by both users and server administrators (for specific users, or for the entire team) using the &lt;strong&gt;&lt;code&gt;rit set credential&lt;/code&gt;&lt;/strong&gt; command.&lt;/p&gt;
&lt;h3 id=&#34;here-is-an-example-of-a-file_configjson&#34;&gt;Here is an example of a file_config.json&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{
  &amp;#34;zup&amp;#34;: {
    &amp;#34;keycloak&amp;#34;: {
      &amp;#34;url&amp;#34;: &amp;#34;http://localhost:8080&amp;#34;,
      &amp;#34;realm&amp;#34;: &amp;#34;ritchie&amp;#34;,
      &amp;#34;clientId&amp;#34;: &amp;#34;user-login&amp;#34;,
      &amp;#34;clientSecret&amp;#34;: &amp;#34;user-login&amp;#34;
    },
    &amp;#34;cliVersionPath&amp;#34;: {
      &amp;#34;provider&amp;#34;: &amp;#34;s3&amp;#34;,
      &amp;#34;url&amp;#34;: &amp;#34;http://localhost:8882/s3-version-mock&amp;#34;
    },
    &amp;#34;repositories&amp;#34;:
     [
       {
         &amp;#34;name&amp;#34;: &amp;#34;commons&amp;#34;,
         &amp;#34;priority&amp;#34;: 0,
         &amp;#34;treePath&amp;#34;: &amp;#34;/tree/tree.json&amp;#34;,
         &amp;#34;remote&amp;#34; : &amp;#34;http://localhost:8882&amp;#34;,
         &amp;#34;serverUrl&amp;#34; : &amp;#34;http://localhost:3000&amp;#34;,
         &amp;#34;replaceRepoUrl&amp;#34; : &amp;#34;http://localhost:3000/formulas&amp;#34;
       },
       {
         &amp;#34;name&amp;#34;: &amp;#34;zup&amp;#34;,
         &amp;#34;priority&amp;#34;: 1,
         &amp;#34;treePath&amp;#34;: &amp;#34;/tree/tree-zup.json&amp;#34;,
         &amp;#34;remote&amp;#34; : &amp;#34;http://localhost:8882&amp;#34;,
         &amp;#34;serverUrl&amp;#34; : &amp;#34;http://localhost:3000&amp;#34;,
         &amp;#34;replaceRepoUrl&amp;#34; : &amp;#34;http://localhost:3000/formulas&amp;#34;
       }
     ],

    &amp;#34;oauth&amp;#34; :{
      &amp;#34;url&amp;#34; : &amp;#34;http://localhost:8080/auth/realms/ritchie&amp;#34;,
      &amp;#34;clientId&amp;#34; : &amp;#34;oauth&amp;#34;
    },
    &amp;#34;credentials&amp;#34;: {
      &amp;#34;github&amp;#34;: [
        {
          &amp;#34;field&amp;#34;: &amp;#34;username&amp;#34;,
          &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;
        },
        {
          &amp;#34;field&amp;#34;: &amp;#34;token&amp;#34;,
          &amp;#34;type&amp;#34;: &amp;#34;password&amp;#34;
        }
      ],
      &amp;#34;gitlab&amp;#34;: [
        {
          &amp;#34;field&amp;#34;: &amp;#34;username&amp;#34;,
          &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;
        },
        {
          &amp;#34;field&amp;#34;: &amp;#34;token&amp;#34;,
          &amp;#34;type&amp;#34;: &amp;#34;password&amp;#34;
        }
      ],
      &amp;#34;email-zup&amp;#34;: [
        {
          &amp;#34;field&amp;#34;: &amp;#34;email&amp;#34;,
          &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;
        },
        {
          &amp;#34;field&amp;#34;: &amp;#34;token&amp;#34;,
          &amp;#34;type&amp;#34;: &amp;#34;password&amp;#34;
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;server-testing&#34;&gt;Server testing&lt;/h2&gt;
&lt;p&gt;For the Team version to work on the CLI, the team will need :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a server&lt;/li&gt;
&lt;li&gt;a &lt;a href=&#34;https://www.keycloak.org/&#34;&gt;Keycloak&lt;/a&gt; account (open source tool)&lt;/li&gt;
&lt;li&gt;a &lt;a href=&#34;https://www.vaultproject.io/&#34;&gt;Vault&lt;/a&gt; account (open source tool)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is possible to test these settings &lt;strong&gt;locally&lt;/strong&gt;, observing through Postman files (available in the &lt;strong&gt;/testdata&lt;/strong&gt; folder) how the server endpoints are handled by the CLI to work.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

To realize this test you&amp;rsquo;ll have to clone the &lt;a href=&#34;https://github.com/ZupIT/ritchie-server&#34;&gt;ritchie-server repository&lt;/a&gt; on your computer.
&lt;/div&gt;

&lt;p&gt;To start this test you need to run the repository &lt;strong&gt;docker-compose&lt;/strong&gt; file : &lt;code&gt;$ docker-compose up&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;version: &amp;#39;3&amp;#39;

services:
  vault:
    image: vault:1.3.0
    ports:
      - &amp;#34;8200:8200&amp;#34;
    volumes:
      - ./resources/vault.hcl:/vault/config/vault.hcl
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=87e7784b-d598-44fe-8962-c7c345a11eed
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - SKIP_SETCAP=true
      - disable_mlock=true

  keycloak:
    image: jboss/keycloak:7.0.0
    environment:
      DB_VENDOR: H2
      KEYCLOAK_IMPORT: /tmp/keycloak/ritchie.json
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
    ports:
      - &amp;#34;8080:8080&amp;#34;
    volumes:
      - ./testdata/security/keycloak:/tmp/keycloak

  stubby4j:
    image: sandokandias/stubby4j-docker
    ports:
      - &amp;#34;8787:8787&amp;#34;
      - &amp;#34;8882:8882&amp;#34;
    environment:
      STUBBY_PORT: 8882
    volumes:
      - ./testdata/stubby4j/integrations.yml:/usr/local/stubby.yml
      - ./testdata/stubby4j/response.zip:/usr/local/response.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then run the &lt;strong&gt;run-local.sh file&lt;/strong&gt; : &lt;code&gt;$ sh run-local.sh&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#!/bin/bash

./create-vault-approle.sh . http://0.0.0.0:8200

export VAULT_ADDR=http://localhost:8200
export VAULT_AUTHENTICATION=APPROLE
export VAULT_ROLE_ID=$(cat /tmp/vault/role-id.txt)
export VAULT_SECRET_ID=$(cat /tmp/vault/secret-id.txt)
export FILE_CONFIG=&amp;#34;$(pwd)/server/resources/file_config_local.json&amp;#34;

go run server/cmd/server/main.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These 2 files work together with the &lt;strong&gt;file_config-local.json&lt;/strong&gt; located in the &lt;strong&gt;/server/resources folder&lt;/strong&gt; of the ritchie-server repository.&lt;/p&gt;
&lt;p&gt;Once everything is up, it will be possible to execute the requests via Postman that the CLI sends to the server to get the information necessary for its operation.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

A &lt;strong&gt;core command&lt;/strong&gt; is being developed to allow a team to be able to create the configuration files as soon as the realm in kubectl, to be able to generate a server already working with Ritchie in a simplified way.
&lt;/div&gt;

&lt;h2 id=&#34;credentials-configurations&#34;&gt;&lt;strong&gt;Credentials Configurations&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The **&lt;code&gt;rit set credential&lt;/code&gt;**command allows to save credentials in the session (locally in the Single version, in the Vault in the Team version) for the user to take advantage of this data without having to inform them again when executing their formulas.&lt;/p&gt;
&lt;p&gt;To use these credentials as inputs to a formula, there is a keyword that needs to be entered in the formula&amp;rsquo;s &lt;strong&gt;config.json&lt;/strong&gt; file.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;This file is where the &lt;strong&gt;input&lt;/strong&gt; &lt;strong&gt;parameters&lt;/strong&gt; that will be requested from the user when he will execute the command in the terminal to process the formula are configured.&lt;/p&gt;
&lt;p&gt;That keyword is &lt;strong&gt;CREDENTIAL&lt;/strong&gt;.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;To know how to use it, you need to have access to the &lt;code&gt;ritchie-server&lt;/code&gt; repository, and observe how the credentials of each tool are registered in the &lt;code&gt;resources/file_config_local.json&lt;/code&gt; file as explained above in this section.&lt;/p&gt;
&lt;p&gt;For example, &lt;strong&gt;Github credentials&lt;/strong&gt; are configured as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&amp;#34;credentials&amp;#34;: { 
    &amp;#34;github&amp;#34;: [ 
        { 
            &amp;#34;field&amp;#34;: &amp;#34;username&amp;#34;, 
            &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34; 
        },
        { 
            &amp;#34;field&amp;#34;: &amp;#34;token&amp;#34;, 
            &amp;#34;type&amp;#34;: &amp;#34;password&amp;#34; 
        }  
    ] 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Therefore, to be able to use Github credentials as input to a formula&amp;rsquo;s &lt;code&gt;config.json&lt;/code&gt;, I would need to inform them as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&amp;#34;inputs&amp;#34;: [ 
    { 
        &amp;#34;name&amp;#34;: &amp;#34;git_user&amp;#34;, 
        &amp;#34;type&amp;#34;: &amp;#34;CREDENTIAL_GITHUB_USERNAME&amp;#34; 
    },
    { 
        &amp;#34;name&amp;#34;: &amp;#34;git_token&amp;#34;, 
        &amp;#34;type&amp;#34;: &amp;#34;CREDENTIAL_GITHUB_TOKEN&amp;#34;
    } 
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the formula command will be executed, the Github credentials will be fetched directly in the session, and can be used in the formulas without the user informing them again at the terminal.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

Remembering that the user must have logged in, and set the credentials (&lt;strong&gt;rit set credential&lt;/strong&gt;) for this to work.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Releases</title>
      <link>https://zupit.github.io/docs-ritchie/docs/reference/releases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/reference/releases/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: Roadmap</title>
      <link>https://zupit.github.io/docs-ritchie/docs/reference/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/reference/roadmap/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: How to contribute</title>
      <link>https://zupit.github.io/docs-ritchie/docs/how-to-contribute/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/how-to-contribute/</guid>
      <description>
        
        
        &lt;hr&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

Ritchie is a community tool where each individual can contribute, sharing its creations with the rest of the world!
&lt;/div&gt;

&lt;h3 id=&#34;what-are-the-ritchie-open-source-repositories&#34;&gt;What are the Ritchie open source repositories?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ZupIT/ritchie-cli&#34;&gt;ritchie-cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ZupIT/ritchie-server&#34;&gt;ritchie-server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ZupIT/ritchie-formulas&#34;&gt;ritchie-formulas&lt;/a&gt; (commons)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;do-you-have-any-ideas-for-creating-new-formulas-or-improving-ritchie&#34;&gt;&lt;strong&gt;Do you have any ideas for creating new formulas or improving Ritchie?&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Fork the related repository&lt;/li&gt;
&lt;li&gt;Create a branch: &lt;code&gt;git checkout -b &amp;lt;branch_name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Implement your idea&lt;/li&gt;
&lt;li&gt;Commit your implementation: &lt;code&gt;git commit -m &#39;&amp;lt;commit_message&amp;gt;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Push your branch: &lt;code&gt;git push origin &amp;lt;project_name&amp;gt;/&amp;lt;location&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open a pull request on the &lt;code&gt;master&lt;/code&gt; branch for analysis.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;do-you-have-any-suggestion-for-the-ritchie-development-team&#34;&gt;&lt;strong&gt;Do you have any suggestion for the Ritchie development team?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;→ Contact us  &lt;a href=&#34;mailto:ritchie@zup.com.br&#34;&gt;ritchie@zup.com.br&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Materials</title>
      <link>https://zupit.github.io/docs-ritchie/docs/materials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/materials/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;videos&#34;&gt;&lt;strong&gt;Videos&lt;/strong&gt;&lt;/h2&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/5S9CHC3QarQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/-G5OlPsgNsY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;{% embed url=&amp;ldquo;&lt;a href=&#34;https://www.youtube.com/watch?v=O&#34;&gt;https://www.youtube.com/watch?v=O&lt;/a&gt;_rD-0o8FrM&amp;amp;feature=youtu.be&amp;rdquo; %}}&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: About Ritchie</title>
      <link>https://zupit.github.io/docs-ritchie/docs/about-ritchie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/about-ritchie/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;where-ritchie-came-from&#34;&gt;&lt;strong&gt;Where Ritchie came from?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Ritchie&amp;rsquo;s objective is to improve the developer’s experience, bringing them more autonomy, automating and simplifying the execution of commands that are widely used in the process of creating and developing digital products. Its name is a tribute to &lt;strong&gt;Dennis Ritchie&lt;/strong&gt;, one of the creators of Unix (predecessor of Linux) and also of the C language. One of the pioneer of the digital world as we know it today.&lt;/p&gt;
&lt;p&gt;Despite the number of multidisciplinary teams in the market, a great challenge still is to reduce the dependence that developers have on inputs coming from the infrastructure and operations teams. &lt;strong&gt;DevOps&lt;/strong&gt; did a lot to remedy this bottleneck, but it did not completely eliminate the dependency between areas.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

With that in mind, we bring a tool to the community that promotes a &lt;strong&gt;NoOps&lt;/strong&gt; movement, a solution that automates repetitive operations and streamlines processes (also known as toil) that are often hampered in the infrastructure. This will give developers the ability to perform operations that were exclusively the infrastructure&amp;rsquo;s domain.
&lt;/div&gt;

&lt;p&gt;In that way, professionals - on all fronts - gain time to work on more complex and relevant tasks to generate value for their project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zupit.github.io/docs-ritchie/docs-ritchie/rit-demo-deploy-project%20%281%29.gif&#34; alt=&#34;Demonstration of a formula following the NoOps mindset&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-makes-ritchie-different&#34;&gt;&lt;strong&gt;What makes Ritchie different?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Because it is a CLI tool, Ritchie seeks to improve the operational &lt;strong&gt;developers&#39;&lt;/strong&gt; &lt;strong&gt;experience and brings beneficial such as:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simplify repetitive and easy-to-execute tasks&lt;/li&gt;
&lt;li&gt;reduce the rework&lt;/li&gt;
&lt;li&gt;Promote more time for the development team to focus on their deliveries.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, instead of writing down on the command lines which parameters and / or arguments the user needs to inform, we do the opposite: Ritchie presents the available options and goes, line by line, asking for the information needed for the command to work, in an interactive way.&lt;/p&gt;
&lt;p&gt;In the example below, we have the execution of a scaffold command with the coffee formula. As the user signals which formula he wants to use, the system automatically passes, line by line, asking which specific parameters must be considered to perform the desired action.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/joDVqE3Km8ePNO0j7vNvfwvZVHJ8mqq9l4x4Webot9pGDdjyoo6BTp7hr39PEb9EBLC43RhsDkIs_7GmxU_YT2KmSCkhOtmJWxtSA6uGEz0a-7Ar4Bfi5zvHkgy2zaMyRkHNle8w&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Glossary</title>
      <link>https://zupit.github.io/docs-ritchie/docs/glossary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/glossary/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;automations&#34;&gt;Automations&lt;/h2&gt;
&lt;p&gt;It refers to all commands created to simplify an operation.&lt;/p&gt;
&lt;h2 id=&#34;context&#34;&gt;Context&lt;/h2&gt;
&lt;p&gt;On Ritchie, context means the environment you&amp;rsquo;re working. Each context will have its credentials, that&amp;rsquo;s meant to be configured once you start using the CLI. Each context will have its own credentials, which will be needed to execute specific formulas.&lt;/p&gt;
&lt;h2 id=&#34;cli&#34;&gt;CLI&lt;/h2&gt;
&lt;p&gt;It refers to a command line interface, which is a program that processes commands in a software or any computing program only through text.&lt;/p&gt;
&lt;h2 id=&#34;credential&#34;&gt;Credential&lt;/h2&gt;
&lt;p&gt;It refers to necessary configurations so you can use Ritchie.&lt;/p&gt;
&lt;h2 id=&#34;formula&#34;&gt;Formula&lt;/h2&gt;
&lt;p&gt;On Ritchie&amp;rsquo;s context, it&amp;rsquo;s the name used for the CLI&amp;rsquo;s commands. It means they are codes called through the command lines to perform some operation.&lt;/p&gt;
&lt;h2 id=&#34;json&#34;&gt;JSON&lt;/h2&gt;
&lt;p&gt;It refers to JavaScript Object Notation (JSON), that is a standard text based &lt;strong&gt;format&lt;/strong&gt; used to structure data created with Java programming language.&lt;/p&gt;
&lt;h2 id=&#34;tree&#34;&gt;Tree&lt;/h2&gt;
&lt;p&gt;It refers to a group of commands organized on Ritchie. You can click on the next link to understand more about &lt;a href=&#34;key-concepts.md#command-tree&#34;&gt;&lt;strong&gt;Tree&amp;rsquo;s structure&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;repository&#34;&gt;Repository&lt;/h2&gt;
&lt;p&gt;A storage place you can organize features, commands or any files and/or files necessary to use a tool. On Ritchie, there are three repositories created to manage formulas, the server and contributions we receive.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ZupIT/ritchie-cli&#34;&gt;&lt;strong&gt;ritchie-cli&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ZupIT/ritchie-server&#34;&gt;&lt;strong&gt;ritchie-server&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ZupIT/ritchie-formulas&#34;&gt;&lt;strong&gt;ritchie-formulas&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;standard-streams&#34;&gt;Standard Streams&lt;/h2&gt;
&lt;p&gt;It refers to a communication channel that allows input and output interconnection between a computer program and its environment.&lt;/p&gt;
&lt;p&gt;On Ritchie, we use the standard input (&lt;a href=&#34;getting-started/commands/stdin.md&#34;&gt;&lt;strong&gt;stdin&lt;/strong&gt;&lt;/a&gt;) to execute commands.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: FAQ</title>
      <link>https://zupit.github.io/docs-ritchie/docs/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-ritchie/docs/faq/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;about-ritchie&#34;&gt;ABOUT RITCHIE&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ritchiecli.io/#what-is-ritchie&#34;&gt;What is Ritchie?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ritchiecli.io/about-ritchie#where-ritchie-came-from&#34;&gt;Where Ritchie came from?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ritchiecli.io/#what-does-ritchie-do&#34;&gt;What does Ritchie do?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ritchiecli.io/about-ritchie#what-makes-ritchie-different&#34;&gt;What makes Ritchie different?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;installation-and-use&#34;&gt;INSTALLATION AND USE&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ritchiecli.io/getting-started/installation&#34;&gt;How to install Ritchie?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ritchiecli.io/#how-does-ritchie-work&#34;&gt;How does Ritchie works?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ritchiecli.io/getting-started/commands&#34;&gt;How to execute commands on Ritchie?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ritchiecli.io/getting-started/creating-formulas&#34;&gt;How to create a new formula on Ritchie? (step by step)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=B-6MFIIbpZI&#34;&gt;How to create a new formula on Ritchie? (Video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ritchiecli.io/getting-started/choosing-a-version&#34;&gt;What the difference between Ritchie two versions?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ritchiecli.io/getting-started/installation&#34;&gt;Which operating systems does Ritchie work with?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ritchiecli.io/#programming-languages&#34;&gt;Which programming languages can I use to create formulas?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ritchiecli.io/#tools&#34;&gt;Which tools can I use to create formulas?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;use-cases/first-commands/credentials.md&#34;&gt;How to set credentials on Ritchie?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;community&#34;&gt;COMMUNITY&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ritchiecli.io/community&#34;&gt;How to access Ritchie open source repositories?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ritchiecli.io/community#do-you-have-any-suggestion-for-the-ritchie-development-team&#34;&gt;How to report a bug? &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ritchiecli.io/community#do-you-have-any-suggestion-for-the-ritchie-development-team&#34;&gt;How do I contribute with the documentation?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
