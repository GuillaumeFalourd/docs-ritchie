<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ritchie – Formulas</title><link>https://zupit.github.io/docs-ritchie/how-to/formulas/</link><description>Recent content in Formulas on Ritchie</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://zupit.github.io/docs-ritchie/how-to/formulas/index.xml" rel="self" type="application/rss+xml"/><item><title>How To: Run formulas</title><link>https://zupit.github.io/docs-ritchie/how-to/formulas/run-formulas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/docs-ritchie/how-to/formulas/run-formulas/</guid><description>
&lt;hr></description></item><item><title>How To: Create formulas</title><link>https://zupit.github.io/docs-ritchie/how-to/formulas/create-formulas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/docs-ritchie/how-to/formulas/create-formulas/</guid><description>
&lt;hr>
&lt;h2 id="how-to-create">How to create?&lt;/h2>
&lt;h3 id="step-1-run-the-formula-creation-command">Step 1: Run the formula creation command&lt;/h3>
&lt;p>Run the following command to create a formula:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit create formula
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, you&amp;rsquo;ll have to inform those inputs before running the formula:&lt;/p>
&lt;ol>
&lt;li>The &lt;strong>command&lt;/strong> (following the &lt;strong>pattern &lt;code>rit + group + verb + noun&lt;/code>&lt;/strong> to respect the &lt;a href="https://docs.ritchiecli.io/key-concepts#command-tree">&lt;strong>tree pattern&lt;/strong>&lt;/a>).&lt;/li>
&lt;li>The formula&amp;rsquo;s &lt;strong>programming language&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>The path&lt;/strong> used to save formula&amp;rsquo;s files.&lt;/li>
&lt;/ol>
&lt;p>Example: &lt;code>rit demo create formula&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://zupit.github.io/docs-ritchie/docs/rit_create_formula_demo.gif" alt="">&lt;/p>
&lt;h3 id="step-2-test-your-formula">&lt;strong>Step 2: Test your formula&lt;/strong>&lt;/h3>
&lt;p>You can test the formula directly after its creation. That&amp;rsquo;s possible because the &lt;strong>&lt;code>rit create formula&lt;/code>&lt;/strong> command also builds the formula automatically (it generates the formula&amp;rsquo;s executable files and add them on &lt;strong>.rit folder&lt;/strong>).&lt;/p>
&lt;p>In that case, the formula &lt;strong>&amp;ldquo;Hello World&amp;rdquo; template&lt;/strong> will be executed as shown below:&lt;/p>
&lt;p>&lt;img src="https://zupit.github.io/docs-ritchie/docs/rit_demo_hello-world_hd.gif" alt="">&lt;/p>
&lt;p>This template is composed of 4 &lt;strong>inputs parameters&lt;/strong>, that represents the currently available kinds of inputs to use Ritchie:&lt;/p>
&lt;ol>
&lt;li>A &lt;strong>&lt;code>sample text&lt;/code>&lt;/strong> variable&lt;/li>
&lt;li>A &lt;strong>&lt;code>sample list&lt;/code>&lt;/strong> of text variables&lt;/li>
&lt;li>A &lt;strong>&lt;code>sample boolean&lt;/code>&lt;/strong> variable&lt;/li>
&lt;li>A &lt;strong>&lt;code>sample password&lt;/code>&lt;/strong> variable&lt;/li>
&lt;/ol>
&lt;p>When you finished your formula creation, it will be built and sent to a specific repository according to the name of your workspace with the prefix &lt;strong>&amp;ldquo;local&amp;rdquo;.&lt;/strong>&lt;/p>
&lt;p>Example: if we have a workspace with the name &lt;code>Default&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;Default&amp;#34;:&amp;#34;/home/user/ritchie-formula-local&amp;#34;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A repository associated to this workspace will be created on the &lt;code>/home/user/.rit/repos&lt;/code> folder, and added on the &lt;code>repositories.json&lt;/code> file.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">[
{
&amp;#34;provider&amp;#34;: &amp;#34;Local&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;local-default&amp;#34;,
&amp;#34;version&amp;#34;: &amp;#34;0.0.0&amp;#34;,
&amp;#34;url&amp;#34;: &amp;#34;local repository&amp;#34;,
&amp;#34;priority&amp;#34;: 0,
&amp;#34;isLocal&amp;#34;: true
}
]
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="next-steps">Next steps&lt;/h2>
&lt;p>On this section, you saw how to create a formula on Ritchie and test it. To keep configuring the formula:&lt;/p>
&lt;p>👉 Go to &lt;a href="https://zupit.github.io/docs-ritchie/docs-ritchie/how-to/formulas/build-formulas/">&lt;strong>build a formula&lt;/strong>&lt;/a> to see how to continue the tests on the formulas you create.&lt;/p></description></item><item><title>How To: Organize the formula folder</title><link>https://zupit.github.io/docs-ritchie/how-to/formulas/organize-the-formula-folder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/docs-ritchie/how-to/formulas/organize-the-formula-folder/</guid><description>
&lt;hr>
&lt;h2 id="what-is-the-formula-folder">What is the formula folder?&lt;/h2>
&lt;p>This folder contains the files with the formula&amp;rsquo;s behavior.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
The folder structure defines the command tree, so &lt;strong>it&amp;rsquo;s not indicated to update&lt;/strong> folders names or include more files and/or folders, &lt;strong>if not&lt;/strong> in the &lt;strong>src/*&lt;/strong> folder.
&lt;/div>
&lt;p>Each programming language has its own specificities, but the formula&amp;rsquo;s structure is almost always the same, no matter what language is used, and will contain:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">File&lt;/th>
&lt;th style="text-align:left">Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;code>config.json&lt;/code>&lt;/td>
&lt;td style="text-align:left">file to configure the formula inputs.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>main file&lt;/code>&lt;/td>
&lt;td style="text-align:left">file to extract local variables.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>pkg/formula file&lt;/code>&lt;/td>
&lt;td style="text-align:left">file to implement the formula operation.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>Dockerfile&lt;/code>&lt;/td>
&lt;td style="text-align:left">file to build docker images.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>README file&lt;/code>&lt;/td>
&lt;td style="text-align:left">file to explain what the formula does.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>Makefile file&lt;/code>&lt;/td>
&lt;td style="text-align:left">file to compile the formula&amp;rsquo;s code (&lt;em>will be deprecated 03/2021&lt;/em>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>build.sh file&lt;/code>&lt;/td>
&lt;td style="text-align:left">file to compile the formula&amp;rsquo;s code in shell.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>metadata.json file&lt;/code>&lt;/td>
&lt;td style="text-align:left">file to tag the formula&amp;rsquo;s information.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>set_unmask.sh file&lt;/code>&lt;/td>
&lt;td style="text-align:left">file used by the Makefile file.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>help.json files&lt;/code>&lt;/td>
&lt;td style="text-align:left">file to configure formula helper messages on the CLI.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>You can find all &lt;a href="https://github.com/ZupIT/ritchie-formulas/tree/master/templates/create_formula/languages">&lt;strong>languages templates&lt;/strong>&lt;/a> on the ritchie-formulas repository.&lt;/p>
&lt;h3 id="formula-folder-examples">Formula folder examples&lt;/h3>
&lt;ul class="nav nav-tabs" id="tabset-docs-ritchiehow-toformulasorganize-the-formula-folder-1" role="tablist">&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link active" href="#tabset-docs-ritchiehow-toformulasorganize-the-formula-folder-1-0" role="tab" aria-controls="tabset-docs-ritchiehow-toformulasorganize-the-formula-folder-1-0" aria-selected="true">Golang&lt;/a>&lt;/li>
&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link" href="#tabset-docs-ritchiehow-toformulasorganize-the-formula-folder-1-1" role="tab" aria-controls="tabset-docs-ritchiehow-toformulasorganize-the-formula-folder-1-1">Java&lt;/a>&lt;/li>
&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link" href="#tabset-docs-ritchiehow-toformulasorganize-the-formula-folder-1-2" role="tab" aria-controls="tabset-docs-ritchiehow-toformulasorganize-the-formula-folder-1-2">Node&lt;/a>&lt;/li>
&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link" href="#tabset-docs-ritchiehow-toformulasorganize-the-formula-folder-1-3" role="tab" aria-controls="tabset-docs-ritchiehow-toformulasorganize-the-formula-folder-1-3">Python&lt;/a>&lt;/li>
&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link" href="#tabset-docs-ritchiehow-toformulasorganize-the-formula-folder-1-4" role="tab" aria-controls="tabset-docs-ritchiehow-toformulasorganize-the-formula-folder-1-4">Shell&lt;/a>&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabset-docs-ritchiehow-toformulasorganize-the-formula-folder-1">&lt;div id="tabset-docs-ritchiehow-toformulasorganize-the-formula-folder-1-0" class="tab-pane show active" role="tabpanel" aria-labelledby="tabset-docs-ritchiehow-toformulasorganize-the-formula-folder-1-0">
&lt;p>&lt;p>&lt;img src="https://zupit.github.io/docs-ritchie/go%20%281%29%20%281%29.png" alt="">&lt;/p>
&lt;p>To change the formula&amp;rsquo;s behavior for this language, you&amp;rsquo;ll have at least to update the following files:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>config.json:&lt;/strong> Update the inputs configurations.&lt;/li>
&lt;li>&lt;strong>main.go:&lt;/strong> Extract the inputs and call the formula&amp;rsquo;s methods (coded on &lt;strong>formula/*&lt;/strong>).&lt;/li>
&lt;li>&lt;strong>formula/*:&lt;/strong> Code the formula&amp;rsquo;s behavior.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div id="tabset-docs-ritchiehow-toformulasorganize-the-formula-folder-1-1" class="tab-pane" role="tabpanel" aria-labelledby="tabset-docs-ritchiehow-toformulasorganize-the-formula-folder-1-1">
&lt;p>&lt;p>&lt;img src="https://zupit.github.io/docs-ritchie/java%20%282%29%20%282%29.png" alt="">&lt;/p>
&lt;p>To change the formula&amp;rsquo;s behavior for this language, you&amp;rsquo;ll have at least to update the following files:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>config.json:&lt;/strong> Update the inputs configurations.&lt;/li>
&lt;li>&lt;strong>main.java:&lt;/strong> Extract the inputs and call the formula&amp;rsquo;s methods (coded on &lt;strong>formula/*&lt;/strong>).&lt;/li>
&lt;li>&lt;strong>formula/*:&lt;/strong> Code the formula&amp;rsquo;s behavior.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div id="tabset-docs-ritchiehow-toformulasorganize-the-formula-folder-1-2" class="tab-pane" role="tabpanel" aria-labelledby="tabset-docs-ritchiehow-toformulasorganize-the-formula-folder-1-2">
&lt;p>&lt;p>&lt;img src="https://zupit.github.io/docs-ritchie/node%20%283%29%20%283%29.png" alt="">&lt;/p>
&lt;p>To change the formula&amp;rsquo;s behavior for this language, you&amp;rsquo;ll have at least to update the following files:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>config.json:&lt;/strong> Update the inputs configurations.&lt;/li>
&lt;li>&lt;strong>index.js:&lt;/strong> Extract the inputs and call the formula&amp;rsquo;s methods (coded on &lt;strong>formula/*&lt;/strong>).&lt;/li>
&lt;li>&lt;strong>formula/*:&lt;/strong> Code the formula&amp;rsquo;s behavior.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div id="tabset-docs-ritchiehow-toformulasorganize-the-formula-folder-1-3" class="tab-pane" role="tabpanel" aria-labelledby="tabset-docs-ritchiehow-toformulasorganize-the-formula-folder-1-3">
&lt;p>&lt;p>&lt;img src="https://zupit.github.io/docs-ritchie/python%20%282%29.png" alt="">&lt;/p>
&lt;p>To change the formula&amp;rsquo;s behavior for this language, you&amp;rsquo;ll have at least to update the following files:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>config.json:&lt;/strong> Update the inputs configurations.&lt;/li>
&lt;li>&lt;strong>main.py:&lt;/strong> Extract the inputs and call the formula&amp;rsquo;s methods (coded on &lt;strong>formula/*&lt;/strong>).&lt;/li>
&lt;li>&lt;strong>formula/*:&lt;/strong> Code the formula&amp;rsquo;s behavior.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div id="tabset-docs-ritchiehow-toformulasorganize-the-formula-folder-1-4" class="tab-pane" role="tabpanel" aria-labelledby="tabset-docs-ritchiehow-toformulasorganize-the-formula-folder-1-4">
&lt;p>&lt;p>&lt;img src="https://zupit.github.io/docs-ritchie/shell%20%282%29%20%281%29.png" alt="">&lt;/p>
&lt;p>To change the formula&amp;rsquo;s behavior for this language, you&amp;rsquo;ll have at least to update the following files:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>config.json:&lt;/strong> Update the inputs configurations.&lt;/li>
&lt;li>&lt;strong>main.sh:&lt;/strong> Extract the inputs and call the formula&amp;rsquo;s methods (coded on &lt;strong>formula/*&lt;/strong>).&lt;/li>
&lt;li>&lt;strong>formula/*:&lt;/strong> Code the formula&amp;rsquo;s behavior.&lt;/li>
&lt;/ul>
&lt;/div>&lt;/div>
&lt;div class="alert alert-warning" role="alert">
The structures defines the command, so &lt;strong>it&amp;rsquo;s not indicated to update&lt;/strong> folders names or include more files/folders &lt;strong>if not&lt;/strong> in the &lt;strong>src/*&lt;/strong> folder.
&lt;/div></description></item><item><title>How To: Configure Inputs</title><link>https://zupit.github.io/docs-ritchie/how-to/formulas/configure-inputs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/docs-ritchie/how-to/formulas/configure-inputs/</guid><description>
&lt;hr>
&lt;h2 id="what-is-the-configjson-file">What is the config.json file?&lt;/h2>
&lt;p>The &lt;strong>config.json&lt;/strong> file contains the formula&amp;rsquo;s input parameters. It allows the CLI to know what datas to ask the user when he runs the command in the terminal in order to process the formula correctly.&lt;/p>
&lt;p>These input parameters are made up of the following fields:&lt;/p>
&lt;ul>
&lt;li>a &lt;strong>&lt;code>docker image builder&lt;/code>&lt;/strong> (according to the programming language chose at the formula creation)&lt;/li>
&lt;li>the formula &lt;strong>&lt;code>inputs parameters list&lt;/code>&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;dockerImageBuilder&amp;#34;: &amp;#34;dockerImage&amp;#34;,
&amp;#34;inputs&amp;#34;: []
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="input-parameter-configuration">Input parameter configuration&lt;/h2>
&lt;p>Each input parameter is composed of the following fields:&lt;/p>
&lt;h3 id="mandatory-fields">Mandatory fields&lt;/h3>
&lt;ul>
&lt;li>&lt;code>name&lt;/code>: variable name to extract.&lt;/li>
&lt;/ul>
&lt;div class="alert alert-warning" role="alert">
&lt;p>Once an input value is informed on Ritchie CLI, it is saved as a &lt;strong>local variable&lt;/strong> during the formula execution.&lt;/p>
&lt;p>The variable &lt;strong>name&lt;/strong> will be convert &lt;strong>uppercase&lt;/strong> as the &lt;strong>local variable name&lt;/strong>.&lt;/p>
&lt;/div>
&lt;blockquote>
&lt;p>A good practice is to add a &lt;strong>_&lt;code>RIT_&lt;/code>&lt;/strong> suffix to each &lt;strong>&lt;code>input name&lt;/code>&lt;/strong> to avoid having conflicts with local variables.&lt;/p>
&lt;p>Example_: &lt;code>rit_file_name&lt;/code> &amp;ndash;&amp;gt; &lt;code>RIT_FILE_NAME&lt;/code>_&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>type&lt;/code>:
&lt;ul>
&lt;li>&lt;strong>text&lt;/strong> (string),&lt;/li>
&lt;li>&lt;strong>bool&lt;/strong> (boolean),&lt;/li>
&lt;li>&lt;strong>password&lt;/strong> (hidden string on CLI),&lt;/li>
&lt;li>**credentials** &lt;em>(specific type, learn more informations_ &lt;/em>&lt;strong>here&lt;/strong>_&lt;a href="https://docs.ritchiecli.io/tutorials/credentials#how-to-use-credentials-as-formula-inputs">&lt;/a>&lt;em>),&lt;/em>&lt;/li>
&lt;li>&lt;strong>dynamic&lt;/strong> &lt;em>(associated with the optional &lt;code>request_info&lt;/code> field below),&lt;/em>&lt;/li>
&lt;li>&lt;strong>path:&lt;/strong> enables the autocomplete to inform a path to a folder or a file (string).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>label&lt;/code>: text appearing on the CLI, asking for the input.&lt;/li>
&lt;/ul>
&lt;h4 id="input-example-with-mandatory-fields">Input example with mandatory fields:&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="input-example-with-the-multiselect-type">Input example with the multiselect type:&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;label&amp;#34;: &amp;#34;Choose one or more days: &amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_days&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;multiselect&amp;#34;,
&amp;#34;required&amp;#34;: true,
&amp;#34;items&amp;#34;: [
&amp;#34;Monday&amp;#34;,
&amp;#34;Tuesday&amp;#34;,
&amp;#34;Wednesday&amp;#34;,
&amp;#34;Thursday&amp;#34;,
&amp;#34;Friday&amp;#34;,
&amp;#34;Saturday&amp;#34;,
&amp;#34;Friday&amp;#34;
]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="some-observations-regarding-the-multiselect-type">Some observations regarding the &lt;strong>&lt;code>multiselect&lt;/code> type&lt;/strong>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>To select one of the options with the &lt;code>multiselect&lt;/code> type, you must press the &lt;code>space&lt;/code> key (the &lt;code>enter&lt;/code> key will move to the next input, if any)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The options selected in the &lt;code>multiselect&lt;/code> type field will return a string with the options separated by pipe (&lt;code>|&lt;/code>) and without space example: &lt;code>Monday | Wednesday | Friday&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It is suggested to use the &lt;code>required&lt;/code> field as &lt;code>true&lt;/code>, otherwise, if no option is selected, the local variable will be saved as &lt;code>undefined&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="parameter-example-using-the-autocomplete-type">Parameter example using the autocomplete type:&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;label&amp;#34;: &amp;#34;Type the path to the folder with your file:&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_path&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;path&amp;#34;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="optional-fields">Optional fields&lt;/h3>
&lt;ul>
&lt;li>&lt;code>default&lt;/code>: default input value (&lt;strong>if&lt;/strong> &lt;strong>null&lt;/strong>).&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
&amp;#34;default&amp;#34;: &amp;#34;Dennis&amp;#34;
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-info" role="alert">
&lt;p>You also can make this default configuration with the default flag, which allows you to attribute default values configured on the formula.&lt;/p>
&lt;p>In case of fields without a default value, the flag will keep asking for this inputs that must be configured on your config.json file.&lt;/p>
&lt;/div>
&lt;ul>
&lt;li>&lt;code>required&lt;/code>: boolean that indicates if the input value is required or optional.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
&amp;#34;required&amp;#34;: true
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>tutorial&lt;/code>: input helper message &lt;em>[? for help]&lt;/em>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
&amp;#34;tutorial&amp;#34;: &amp;#34;We are expecting you to write your name (ex: John)&amp;#34;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>items&lt;/code>: list of input variable options.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
&amp;#34;items&amp;#34;: [
&amp;#34;Dennis&amp;#34;,
&amp;#34;John&amp;#34;,
&amp;#34;Bill&amp;#34;
]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>cache&lt;/code>: saves former input values.
&lt;ul>
&lt;li>&lt;code>active&lt;/code>: if cache is enabled or not.&lt;/li>
&lt;li>&lt;code>qty&lt;/code>: amount of values to store.&lt;/li>
&lt;li>&lt;code>newLabel&lt;/code>: text appearing on the CLI asking for a new input.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
&amp;#34;cache&amp;#34;: {
&amp;#34;active&amp;#34;: true,
&amp;#34;qty&amp;#34;: 5,
&amp;#34;newLabel&amp;#34;: &amp;#34;Type another name:&amp;#34;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>condition&lt;/code>: shows this input if the given condition succeeds
&lt;ul>
&lt;li>&lt;code>variable&lt;/code>: The variable name used on a previous input for comparison.&lt;/li>
&lt;li>&lt;code>operator&lt;/code>: A logical operator to compare. Supports &lt;strong>&lt;code>==&lt;/code>&lt;/strong>, &lt;strong>&lt;code>!=&lt;/code>&lt;/strong>, &lt;strong>&lt;code>&amp;lt;&lt;/code>&lt;/strong>, &lt;strong>&lt;code>&amp;gt;&lt;/code>&lt;/strong>, &lt;strong>&lt;code>&amp;lt;=&lt;/code>&lt;/strong>, and &lt;strong>&lt;code>&amp;gt;=&lt;/code>.&lt;/strong>&lt;/li>
&lt;li>&lt;code>value&lt;/code>: The desired value to compare to.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
&amp;#34;default&amp;#34;: &amp;#34;Dennis&amp;#34;
},
{
&amp;#34;condition&amp;#34;: {
&amp;#34;variable&amp;#34;: &amp;#34;rit_name&amp;#34;,
&amp;#34;operator&amp;#34;: &amp;#34;!=&amp;#34;,
&amp;#34;value&amp;#34;: &amp;#34;Dennis&amp;#34;
}
&amp;#34;label&amp;#34;: &amp;#34;What is your date of birth?&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_date_of_birth&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>pattern&lt;/code>: configure an input value validation.
&lt;ul>
&lt;li>&lt;code>regex&lt;/code>: The regex pattern to validate the input.&lt;/li>
&lt;li>&lt;code>mismatchText&lt;/code>: error message when input doesn&amp;rsquo;t match the regex pattern&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;label&amp;#34;: &amp;#34;What is your age&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_age&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
&amp;#34;pattern&amp;#34;: {
&amp;#34;regex&amp;#34;: &amp;#34;[0-9]&amp;#34;,
&amp;#34;mismatchText&amp;#34;: &amp;#34;Only a integer value is allowed here (ex: 20)&amp;#34;
}
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-warning" role="alert">
The &lt;strong>&lt;code>dynamic input&lt;/code>&lt;/strong> type will be &lt;strong>depreciated&lt;/strong> in the &lt;strong>next releases&lt;/strong>.
&lt;/div>
&lt;ul>
&lt;li>&lt;code>requestInfo&lt;/code>: configuration to get dynamic input type.
&lt;ul>
&lt;li>&lt;code>url&lt;/code>: URL to consume a GET service that will return a list of objects.&lt;/li>
&lt;li>&lt;code>jsonPath&lt;/code>: path to the variable to extract from the returned list, for each object. (Check out &lt;a href="https://goessner.net/articles/JsonPath/">&lt;strong>how works the json path&lt;/strong>&lt;/a>).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
&amp;#34;requestInfo&amp;#34;: {
&amp;#34;url&amp;#34;: &amp;#34;https://my-url.com&amp;#34;,
&amp;#34;jsonPath&amp;#34;: $[&amp;#39;user&amp;#39;][&amp;#39;name&amp;#39;]
}
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-info" role="alert">
Each formula can contain as many inputs as necessary, as well as any association of the above fields.
&lt;/div>
&lt;p>&lt;strong>Conditional input example with Regex pattern:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">&amp;#34;inputs&amp;#34;: [
{
&amp;#34;label&amp;#34;: &amp;#34;Select a system:&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_system&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
&amp;#34;items&amp;#34;: [
&amp;#34;LINUX&amp;#34;,
&amp;#34;MACOS&amp;#34;,
&amp;#34;WINDOWS&amp;#34;
],
&amp;#34;required&amp;#34;: true,
&amp;#34;tutorial&amp;#34;: &amp;#34;Select a System from the list.&amp;#34;
},
{
&amp;#34;condition&amp;#34;: {
&amp;#34;variable&amp;#34;:&amp;#34;rit_system&amp;#34;,
&amp;#34;operator&amp;#34;:&amp;#34;==&amp;#34;,
&amp;#34;value&amp;#34;:&amp;#34;LINUX&amp;#34;
},
&amp;#34;label&amp;#34;: &amp;#34;Select a LINUX OS:&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_linux_os&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
&amp;#34;items&amp;#34;: [
&amp;#34;UBUNTU&amp;#34;,
&amp;#34;FEDORA&amp;#34;,
&amp;#34;CENTOS&amp;#34;
],
&amp;#34;pattern&amp;#34;: {
&amp;#34;regex&amp;#34;: &amp;#34;UBUNTU|FEDORA|CENTOS&amp;#34;,
&amp;#34;mismatchText&amp;#34;: &amp;#34;Invalid option&amp;#34;
},
&amp;#34;required&amp;#34;: false,
&amp;#34;tutorial&amp;#34;: &amp;#34;Select an Linux Operating System from the list.&amp;#34;
}
]
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-warning" role="alert">
Once an input is informed on Ritchie CLI, it is saved as a &lt;strong>local variable&lt;/strong> during the formula execution.
&lt;/div></description></item><item><title>How To: Extract input variables in a formula</title><link>https://zupit.github.io/docs-ritchie/how-to/formulas/extract-input-variables-in-a-formula/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/docs-ritchie/how-to/formulas/extract-input-variables-in-a-formula/</guid><description>
&lt;hr>
&lt;h2 id="what-is-the-main-file">What is the main file?&lt;/h2>
&lt;div class="alert alert-info" role="alert">
&lt;p>The main file is used to extract the &lt;strong>inputs&lt;/strong> asked in the config.json file, saved as &lt;strong>local variables.&lt;/strong>&lt;/p>
&lt;p>&lt;em>Inputs are extracted by the field &lt;strong>name&lt;/strong> informed on the config.json file &lt;strong>UPPERCASE&lt;/strong>.&lt;/em>&lt;/p>
&lt;/div>
&lt;p>This file is also where the formula functions, manipulating the input parameters, are called to perform the operation and/or automation of the formula.&lt;/p>
&lt;h3 id="main-file-examples">Main file examples&lt;/h3>
&lt;p>In our examples below, there is always an existing &lt;code>formula&lt;/code> class with a &lt;code>Run()&lt;/code> function.&lt;/p>
&lt;ul class="nav nav-tabs" id="t1" role="tablist">&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link active" href="#t1-0" role="tab" aria-controls="t1-0" aria-selected="true">main.go&lt;/a>&lt;/li>
&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link" href="#t1-1" role="tab" aria-controls="t1-1">Main.java&lt;/a>&lt;/li>
&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link" href="#t1-2" role="tab" aria-controls="t1-2">index.js&lt;/a>&lt;/li>
&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link" href="#t1-3" role="tab" aria-controls="t1-3">main.py&lt;/a>&lt;/li>
&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link" href="#t1-4" role="tab" aria-controls="t1-4">main.sh&lt;/a>&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="t1">&lt;div id="t1-0" class="tab-pane show active" role="tabpanel" aria-labelledby="t1-0">
&lt;p>&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">func main() {
input1 := os.Getenv(&amp;#34;INPUT_TEXT&amp;#34;)
input2 := os.Getenv(&amp;#34;INPUT_LIST&amp;#34;)
input3, _ := strconv.ParseBool(os.Getenv(&amp;#34;INPUT_BOOLEAN&amp;#34;))
input4 := os.Getenv(&amp;#34;INPUT_PASSWORD&amp;#34;)
formula.Formula{
Text: input1,
List: input2,
Boolean: input3,
Password: input4,
}.Run(os.Stdout)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div id="t1-1" class="tab-pane" role="tabpanel" aria-labelledby="t1-1">
&lt;p>&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">public class Main {
public static void main(String[] args) {
String inputText = System.getenv(&amp;#34;INPUT_TEXT&amp;#34;);
boolean inputBoolean = Boolean.parseBoolean(System.getenv(&amp;#34;INPUT_BOOLEAN&amp;#34;));
String inputList = System.getenv(&amp;#34;INPUT_LIST&amp;#34;);
String inputPassword = System.getenv(&amp;#34;INPUT_PASSWORD&amp;#34;);
Formula formula = new Formula(
inputText,
inputBoolean,
inputList,
inputPassword
);
formula.Run();
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div id="t1-2" class="tab-pane" role="tabpanel" aria-labelledby="t1-2">
&lt;p>&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">const INPUT1 = process.env.INPUT_TEXT
const INPUT2 = process.env.INPUT_BOOLEAN
const INPUT3 = process.env.INPUT_LIST
const INPUT4 = process.env.INPUT_PASSWORD
run(INPUT1, INPUT2, INPUT3, INPUT4)
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div id="t1-3" class="tab-pane" role="tabpanel" aria-labelledby="t1-3">
&lt;p>&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">input1 = os.environ.get(&amp;#34;INPUT_TEXT&amp;#34;)
input2 = os.environ.get(&amp;#34;INPUT_BOOLEAN&amp;#34;)
input3 = os.environ.get(&amp;#34;INPUT_LIST&amp;#34;)
input4 = os.environ.get(&amp;#34;INPUT_PASSWORD&amp;#34;)
formula.Run(input1, input2, input3, input4)
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div id="t1-4" class="tab-pane" role="tabpanel" aria-labelledby="t1-4">
&lt;p>&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">//Inputs are not even necessary here, as Shellscript get values from local variables directly.
runFormula &amp;#39;$SAMPLE_TEXT&amp;#39; $SAMPLE_LIST &amp;#39;$SAMPLE_BOOL&amp;#39;&amp;#39;$SAMPLE_PASSWORD&amp;#39;
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;/div></description></item><item><title>How To: Add formula dependencies</title><link>https://zupit.github.io/docs-ritchie/how-to/formulas/add-formula-dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/docs-ritchie/how-to/formulas/add-formula-dependencies/</guid><description>
&lt;hr>
&lt;h2 id="what-are-dependencies">What are dependencies?&lt;/h2>
&lt;div class="alert alert-info" role="alert">
Each programming language has its own specificities &lt;strong>to import libraries or packages&lt;/strong>.
&lt;/div>
&lt;p>On Ritchie, it&amp;rsquo;s possible to configure each formula as an independent and small project.&lt;/p>
&lt;p>Therefore, it will be possible to import all the necessary dependencies to perform the operations you want to implement.&lt;/p>
&lt;ul class="nav nav-tabs" id="t2" role="tablist">&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link active" href="#t2-0" role="tab" aria-controls="t2-0" aria-selected="true">go.mod \(GOLANG\)&lt;/a>&lt;/li>
&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link" href="#t2-1" role="tab" aria-controls="t2-1">pom.xml \(JAVA\)&lt;/a>&lt;/li>
&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link" href="#t2-2" role="tab" aria-controls="t2-2">package.json \(NODE\)&lt;/a>&lt;/li>
&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link" href="#t2-3" role="tab" aria-controls="t2-3">requirements.txt \(PYTHON\)&lt;/a>&lt;/li>
&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link" href="#t2-4" role="tab" aria-controls="t2-4">composer.json \(PHP\)&lt;/a>&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="t2">&lt;div id="t2-0" class="tab-pane show active" role="tabpanel" aria-labelledby="t2-0">
&lt;p>&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">module formula
go 1.14
require (
github.com/gookit/color v1.2.5
)
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div id="t2-1" class="tab-pane" role="tabpanel" aria-labelledby="t2-1">
&lt;p>&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;
&amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;
xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt;
&amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
&amp;lt;groupId&amp;gt;com.ritchie&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;formula&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
&amp;lt;properties&amp;gt;
&amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;
&amp;lt;maven.compiler.source&amp;gt;${java.version}&amp;lt;/maven.compiler.source&amp;gt;
&amp;lt;maven.compiler.target&amp;gt;${java.version}&amp;lt;/maven.compiler.target&amp;gt;
&amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
&amp;lt;maven-jar-plugin.version&amp;gt;3.2.0&amp;lt;/maven-jar-plugin.version&amp;gt;
&amp;lt;/properties&amp;gt;
&amp;lt;build&amp;gt;
&amp;lt;finalName&amp;gt;Main&amp;lt;/finalName&amp;gt;
&amp;lt;plugins&amp;gt;
&amp;lt;plugin&amp;gt;
&amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt;
&amp;lt;configuration&amp;gt;
&amp;lt;source&amp;gt;1.8&amp;lt;/source&amp;gt;
&amp;lt;target&amp;gt;1.8&amp;lt;/target&amp;gt;
&amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;
&amp;lt;plugin&amp;gt;
&amp;lt;!-- Build an executable JAR --&amp;gt;
&amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;maven-jar-plugin&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;${maven-jar-plugin.version}&amp;lt;/version&amp;gt;
&amp;lt;configuration&amp;gt;
&amp;lt;archive&amp;gt;
&amp;lt;manifest&amp;gt;
&amp;lt;!-- &amp;lt;addClasspath&amp;gt;true&amp;lt;/addClasspath&amp;gt; --&amp;gt;
&amp;lt;mainClass&amp;gt;com.ritchie.Main&amp;lt;/mainClass&amp;gt;
&amp;lt;/manifest&amp;gt;
&amp;lt;/archive&amp;gt;
&amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;
&amp;lt;plugin&amp;gt;
&amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt;
&amp;lt;configuration&amp;gt;
&amp;lt;appendAssemblyId&amp;gt;false&amp;lt;/appendAssemblyId&amp;gt;
&amp;lt;archive&amp;gt;
&amp;lt;manifest&amp;gt;
&amp;lt;mainClass&amp;gt;com.ritchie.Main&amp;lt;/mainClass&amp;gt;
&amp;lt;/manifest&amp;gt;
&amp;lt;/archive&amp;gt;
&amp;lt;descriptorRefs&amp;gt;
&amp;lt;descriptorRef&amp;gt;jar-with-dependencies&amp;lt;/descriptorRef&amp;gt;
&amp;lt;/descriptorRefs&amp;gt;
&amp;lt;/configuration&amp;gt;
&amp;lt;executions&amp;gt;
&amp;lt;execution&amp;gt;
&amp;lt;id&amp;gt;make-assembly&amp;lt;/id&amp;gt;
&amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;
&amp;lt;goals&amp;gt;
&amp;lt;goal&amp;gt;single&amp;lt;/goal&amp;gt;
&amp;lt;/goals&amp;gt;
&amp;lt;/execution&amp;gt;
&amp;lt;/executions&amp;gt;
&amp;lt;/plugin&amp;gt;
&amp;lt;/plugins&amp;gt;
&amp;lt;/build&amp;gt;
&amp;lt;dependencies&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;4.13.1&amp;lt;/version&amp;gt;
&amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;com.github.tomas-langer&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;chalk&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;1.0.2&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div id="t2-2" class="tab-pane" role="tabpanel" aria-labelledby="t2-2">
&lt;p>&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;dependencies&amp;#34;: {
&amp;#34;cli-color&amp;#34;: &amp;#34;^2.0.0&amp;#34;
},
&amp;#34;main&amp;#34;: &amp;#34;index.js&amp;#34;,
&amp;#34;scripts&amp;#34;: {
&amp;#34;test&amp;#34;: &amp;#34;echo \&amp;#34;Error: no test specified\&amp;#34; &amp;amp;&amp;amp; exit 1&amp;#34;
},
&amp;#34;version&amp;#34;: &amp;#34;1.0.0&amp;#34;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div id="t2-3" class="tab-pane" role="tabpanel" aria-labelledby="t2-3">
&lt;p>&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">colored==1.4.2
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div id="t2-4" class="tab-pane" role="tabpanel" aria-labelledby="t2-4">
&lt;p>&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;require&amp;#34;: {
&amp;#34;codedungeon/php-cli-colors&amp;#34;: &amp;#34;~1.0&amp;#34;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;/div></description></item><item><title>How To: Build formulas</title><link>https://zupit.github.io/docs-ritchie/how-to/formulas/build-formulas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/docs-ritchie/how-to/formulas/build-formulas/</guid><description>
&lt;hr>
&lt;div class="alert alert-danger" role="alert">
&lt;p>This functionality is no longer available from &lt;strong>Ritchie&amp;rsquo;s 2.5.0 version&lt;/strong>. From now on, a formula build is automatically made on your CLI: a local repo file will be created as soon as you implement the formula to host it.&lt;/p>
&lt;p>If you&amp;rsquo;re using a previous version just follow the instructions of this section.&lt;/p>
&lt;/div>
&lt;h2 id="how-to-build">How to build?&lt;/h2>
&lt;p>After &lt;a href="https://zupit.github.io/docs-ritchie/docs-ritchie/tutorials/formulas/how-to-create-formulas/">&lt;strong>creating a formula&lt;/strong>&lt;/a>, if you want to edit the code of the formula, it&amp;rsquo;s necessary to &lt;strong>build&lt;/strong> these changes to test the command with the new implementation.&lt;/p>
&lt;p>To do so, just run the command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit build formula
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You must inform:&lt;/p>
&lt;ul>
&lt;li>The &lt;strong>directory&amp;rsquo;s path&lt;/strong> where the formula is located.&lt;/li>
&lt;li>The &lt;strong>formula&amp;rsquo;s path&lt;/strong> to be builded (the formula&amp;rsquo;s command).&lt;/li>
&lt;/ul>
&lt;p>In case you want to update the formula&amp;rsquo;s code in running time, you can use the &lt;strong>flag “&amp;ndash;watch”&lt;/strong> as shown in the command below:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit build formula --watch
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>How To: Publish formulas</title><link>https://zupit.github.io/docs-ritchie/how-to/formulas/publish-formulas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/docs-ritchie/how-to/formulas/publish-formulas/</guid><description>
&lt;hr>
&lt;h2 id="how-to-publish">How to publish?&lt;/h2>
&lt;p>There is a formula on Ritchie that allows the user to create and/or update a formula repository on Github/Gitlab.&lt;/p>
&lt;h3 id="premisses">Premisses&lt;/h3>
&lt;div class="alert alert-warning" role="alert">
To publish your formula, make sure to set Github / Gitlab credentials using the &lt;strong>&lt;code>rit set credential&lt;/code>&lt;/strong> command.
&lt;/div>
&lt;h2 id="publish-your-repository">Publish your repository&lt;/h2>
&lt;p>A formula has been created on the community repository to perform:&lt;/p>
&lt;ul>
&lt;li>The initialization of a local repository on Git (if necessary).&lt;/li>
&lt;li>The creation of the repository on Github/Gitlab.&lt;/li>
&lt;li>The release generation of a new version of the repository.&lt;/li>
&lt;li>The addition of the repository to Ritchie local repositories (&lt;strong>&lt;code>rit add repo&lt;/code>&lt;/strong> command).&lt;/li>
&lt;/ul>
&lt;div class="alert alert-info" role="alert">
Moreover, if the repository already exists, it will commit the new code and generate the new release version informed, before updating Ritchie repositories ( &lt;strong>&lt;code>rit update repo&lt;/code>&lt;/strong> command).
&lt;/div>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit publish repo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The user has to inform 5 different kinds of inputs:&lt;/p>
&lt;ol>
&lt;li>The &lt;strong>&lt;code>provider&lt;/code>&lt;/strong> (Github or Gitlab)&lt;/li>
&lt;li>The &lt;strong>&lt;code>repository's privacy&lt;/code>&lt;/strong>&lt;/li>
&lt;li>The &lt;strong>&lt;code>repository's name&lt;/code>&lt;/strong>&lt;/li>
&lt;li>The &lt;strong>&lt;code>local repository path&lt;/code>&lt;/strong> you wish to publish&lt;/li>
&lt;li>The &lt;strong>&lt;code>release version&lt;/code>&lt;/strong> to generate&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://zupit.github.io/docs-ritchie/docs/rit-publish-repo.gif" alt="">&lt;/p>
&lt;div class="alert alert-warning" role="alert">
As shown on the example above, you can check if the publication has been successful by using the &lt;strong>&lt;code>rit list repo&lt;/code>&lt;/strong> command and see if the published repository appears.
&lt;/div>
&lt;h2 id="publish-manually">Publish manually&lt;/h2>
&lt;p>To publish a formula manually, you need to push it on a &lt;strong>Github/Gitlab&lt;/strong> repository, following these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Have an exclusive repository for formulas on Github / Gitlab.&lt;/p>
&lt;p>&lt;em>It can be created from the a local repository, or based on a cloned repository.&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Add your formulas to the repository &lt;em>Using the &lt;strong>&lt;code>rit create formula&lt;/code>&lt;/strong> command, or &lt;strong>copy / paste&lt;/strong> folders&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Commit and push the new code to the Github/Gitlab repository.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Generate a new release of the formulas repository.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="next-steps">Next steps&lt;/h2>
&lt;p>On this section, you saw how to publish a formula on Ritchie. To keep configuring the formula:&lt;/p>
&lt;p>👉 Check out &lt;a href="https://zupit.github.io/docs-ritchie/docs-ritchie/tutorials/formulas/how-to-share-formulas/">&lt;strong>how to share formulas&lt;/strong>&lt;/a>&lt;/p></description></item><item><title>How To: Share formulas</title><link>https://zupit.github.io/docs-ritchie/how-to/formulas/share-formulas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/docs-ritchie/how-to/formulas/share-formulas/</guid><description>
&lt;hr>
&lt;h2 id="how-to-share">How to share?&lt;/h2>
&lt;p>Once a formula repository has been published, other users can add it locally from its &lt;strong>URL&lt;/strong> to access its formulas.&lt;/p>
&lt;p>Example: &lt;a href="https://github.com/ZupIT/ritchie-formulas">&lt;strong>&lt;code>https://github.com/ZupIT/ritchie-formulas&lt;/code>&lt;/strong>&lt;/a>&lt;/p>
&lt;p>To add a new repository on Ritchie, it is necessary to run the command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit add repo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once the repository has been added, Ritchie will use the selected release on the repository to access the available formulas.&lt;/p>
&lt;p>&lt;img src="https://zupit.github.io/docs-ritchie/docs/rit-add-repo-3.gif" alt="">&lt;/p>
&lt;div class="alert alert-warning" role="alert">
If the formula repository is &lt;strong>private&lt;/strong>, the user will have to inform his Github/Gitlab token.
&lt;/div>
&lt;h2 id="how-to-see-the-repo-latest-version">How to see the repo latest version?&lt;/h2>
&lt;div class="alert alert-info" role="alert">
This feature is available from Ritchie 2.2 version.
&lt;/div>
&lt;p>On Ritchie, it is possible to check out new formula commands and if there is a new version of some repository you added locally.&lt;/p>
&lt;p>To do so, just follow these steps:&lt;/p>
&lt;ol>
&lt;li>Run the help command &lt;strong>&lt;code>rit --help&lt;/code>&lt;/strong>. The system will return a list with the group of available repositories.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">(new version 2.12.1) commons repo commands:
beagle Beagle commands
bitbucket Manage bitbucket objects
clean-swift Manage clean-swift objects
docker Manipulate Docker objects
git Manipulate Git objects
github Manipulate GitHub objects
gitlab Manipulate GitLab objects
istio Istio Service Mesh commands
jupyter Manage jupyter objects
kafka Kafka commands
kubernetes Manipulate kubernetes objects
publish Publish command
scaffold Manipulate scaffold objects
xcode Manage xcode objects
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>If you prefer, run the &lt;strong>&lt;code>rit list repo&lt;/code>&lt;/strong> command, that returns informations about the imported repositories, like the latest version and the last available version.&lt;/li>
&lt;/ol>
&lt;h3 id="how-to-update">How to update?&lt;/h3>
&lt;p>To update the version of any repository, you just have to run the command below informing the repository and the version you wish to be updated.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit update repo
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="next-steps">Next steps&lt;/h2>
&lt;p>On this section, you saw how to share a formula on Ritchie. To keep configuring the formula:&lt;/p>
&lt;p>👉 Check out how to &lt;a href="https://zupit.github.io/docs-ritchie/docs-ritchie/how-to/credentials/use-credentials-as-formula-inputs/">&lt;strong>use credentials&lt;/strong>&lt;/a> with your formulas.&lt;/p>
&lt;p>👉 Check out our &lt;a href="https://zupit.github.io/docs-ritchie/docs-ritchie/reference/list-of-commands-and-flags/">&lt;strong>list of commands&lt;/strong>&lt;/a> to see the available automations on our community repo.&lt;/p></description></item><item><title>How To: Delete formulas</title><link>https://zupit.github.io/docs-ritchie/how-to/formulas/delete-formulas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/docs-ritchie/how-to/formulas/delete-formulas/</guid><description>
&lt;hr>
&lt;h2 id="how-to-delete">How to delete?&lt;/h2>
&lt;p>To delete a formula, you just have to run this command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit delete formula
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once you&amp;rsquo;ve made this, follow the steps:&lt;/p>
&lt;p>&lt;strong>Step 1:&lt;/strong> Select the workspace where is the formula you want to delete.&lt;/p>
&lt;p>&lt;strong>Step 2:&lt;/strong> Select the formula to be deleted.&lt;/p>
&lt;p>&lt;strong>Step 3:&lt;/strong> The Ritchie will ask you to confirm if you wish to continue the operation to delete the formula. Just select the answer &amp;ldquo;yes&amp;rdquo;.&lt;/p>
&lt;p>&lt;img src="https://zupit.github.io/docs-ritchie/docs/delete-formula.gif" alt="">&lt;/p>
&lt;h2 id="next-steps">Next Steps&lt;/h2>
&lt;p>On this section, you saw how to delete a formula on Ritchie. To keep reading:&lt;/p>
&lt;p>👉 Go to &lt;a href="https://zupit.github.io/docs-ritchie/docs-ritchie/how-to/formulas/group-formulas/">&lt;strong>how to group formulas&lt;/strong>&lt;/a> section to find out how to run a formula inside another formula.&lt;/p>
&lt;p>👉 Check out all the available formulas on Ritchie in the &lt;a href="https://zupit.github.io/docs-ritchie/docs-ritchie/reference/list-of-commands-and-flags/">&lt;strong>list of commands and flags&lt;/strong>&lt;/a>&lt;/p></description></item><item><title>How To: Group formulas</title><link>https://zupit.github.io/docs-ritchie/how-to/formulas/group-formulas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/docs-ritchie/how-to/formulas/group-formulas/</guid><description>
&lt;hr>
&lt;h2 id="what-is-an-aggregation">What is an aggregation?&lt;/h2>
&lt;p>On Ritchie, it is possible to &lt;strong>run formulas inside formulas.&lt;/strong> This process is called **Formula aggregation.**‌&lt;/p>
&lt;p>This functionality allows you, for example, to make operations in which you need to run consecutive formulas.&lt;/p>
&lt;p>Check out on the following topics to understand how works this aggregation.&lt;/p>
&lt;h2 id="how-to-group">How to group?&lt;/h2>
&lt;h3 id="1-premisse">1. Premisse&lt;/h3>
&lt;p>To group formulas, it is necessary to use &lt;strong>Standard Inputs&lt;/strong>. On the following page, we have a detailed explanation to how this works:&lt;/p>
&lt;h3 id="2-execution-a-id2-executiona">2. Execution &lt;a id="2-execution">&lt;/a>&lt;/h3>
&lt;p>When &lt;a href="https://app.gitbook.com/@zup-products/s/ritchie/~/diff/drafts/-MHIAf91S1RlTOvJs_KU/how-to/implement-a-formula/@drafts">&lt;strong>implementing a formula&lt;/strong>&lt;/a>, the file where the operation is coded needs to execute a command line associated to a formula.‌&lt;/p>
&lt;p>The grouped formula command line needs to be executed using &lt;strong>Standard Inputs&lt;/strong>, which means informing the inputs parameters directly on the code.‌&lt;/p>
&lt;h3 id="3-example-a-id3-examplea">3. Example &lt;a id="3-example">&lt;/a>&lt;/h3>
&lt;p>The &lt;strong>&lt;code>rit publish repo&lt;/code>&lt;/strong> formula has been implemented using formula aggregation, that you can find its &lt;a href="https://github.com/ZupIT/ritchie-formulas/tree/master/publish/repo">&lt;strong>formula implementation&lt;/strong>&lt;/a>.&lt;/p>
&lt;p>On the example below, you&amp;rsquo;ll find below how this aggregation works on the code part, using &lt;strong>&lt;code>Input flags&lt;/code>&lt;/strong>.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
This formula has been implemented using &lt;strong>&lt;code>Shell&lt;/code>&lt;/strong> and the reasoning would be the same for any other programming language.
&lt;/div>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">runFormula() {
if [ &amp;#34;Github&amp;#34; == $PROVIDER ]
then
echo &amp;#34;🐙 Github provider selected&amp;#34;
rit github publish repo --privacy=$PRIVACY --project_name=$PROJECT_NAME --workspace_path=$WORKSPACE_PATH --version=$VERSION
elif [ &amp;#34;Gitlab&amp;#34; == $PROVIDER ]
then
echo &amp;#34;🦊 Gitlab provider selected&amp;#34;
rit gitlab publish repo --privacy=$PRIVACY --project_name=$PROJECT_NAME --workspace_path=$WORKSPACE_PATH --version=$VERSION
else
echo &amp;#34;🤖 Unexpected Provider informed. Check it please and try again.&amp;#34;
fi
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, according to the input informed by the user, two different formulas can be executed:‌&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>rit github publish repo&lt;/code>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;code>rit gitlab publish repo&lt;/code>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>To do so, the grouped formulas inputs parameters are informed dynamically according to the inputs parameters of the main formula (&lt;strong>&lt;code>rit publish repo&lt;/code>&lt;/strong>).&lt;/p>
&lt;p>Depending on the operation, the &lt;strong>&lt;code>input flags&lt;/code>&lt;/strong> used for the command could be generated according to other operations performed through the formula execution before executing the grouped formula command line.‌&lt;/p>
&lt;h2 id="next-steps">Next steps&lt;/h2>
&lt;p>You saw in this section how to use formula aggregation. If you want to keep reading about Ritchie&amp;rsquo;s commands:‌&lt;/p>
&lt;p>​👉 Check out the &lt;a href="https://zupit.github.io/docs-ritchie/docs-ritchie/challenges/what-are-these-challenges/">&lt;strong>challenges&lt;/strong>&lt;/a> we created to apply all the Ritchie concepts you learned.‌&lt;/p>
&lt;p>​👉 Check out our &lt;a href="https://zupit.github.io/docs-ritchie/docs-ritchie/reference/list-of-commands-and-flags/">&lt;strong>list of commands&lt;/strong>&lt;/a> to see the available automations on our community repo.&lt;/p></description></item></channel></rss>